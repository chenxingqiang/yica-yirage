/* Generated by Cython 3.1.3 */

/* BEGIN: Cython Metadata
{
    "distutils": {
        "depends": [
            "/Users/xingqiangchen/TASK/yica-yirage/include/yirage/kernel/device_memory_manager.h",
            "/Users/xingqiangchen/TASK/yica-yirage/include/yirage/kernel/device_tensor.h",
            "/Users/xingqiangchen/TASK/yica-yirage/include/yirage/kernel/graph.h",
            "/Users/xingqiangchen/TASK/yica-yirage/include/yirage/kernel/runtime.h",
            "/Users/xingqiangchen/TASK/yica-yirage/include/yirage/layout.h",
            "/Users/xingqiangchen/TASK/yica-yirage/include/yirage/nki_transpiler/transpile.h",
            "/Users/xingqiangchen/TASK/yica-yirage/include/yirage/search/search_c.h",
            "/Users/xingqiangchen/TASK/yica-yirage/include/yirage/threadblock/graph.h",
            "/Users/xingqiangchen/TASK/yica-yirage/include/yirage/transpiler/transpile.h",
            "/Users/xingqiangchen/TASK/yica-yirage/include/yirage/triton_transpiler/transpile.h",
            "/Users/xingqiangchen/TASK/yica-yirage/include/yirage/type.h"
        ],
        "extra_compile_args": [
            "-std=c++17",
            "-fopenmp"
        ],
        "extra_link_args": [
            "-fPIC",
            "-fopenmp"
        ],
        "include_dirs": [
            "/Users/xingqiangchen/TASK/yica-yirage/python/../include",
            "/Users/xingqiangchen/TASK/yica-yirage/python/../deps/json/include",
            "/Users/xingqiangchen/TASK/yica-yirage/python/../deps/cutlass/include",
            "/usr/local/cuda/include"
        ],
        "language": "c++",
        "libraries": [
            "yirage_runtime",
            "cudadevrt",
            "cudart_static",
            "cudart",
            "cuda",
            "z3",
            "gomp",
            "rt"
        ],
        "library_dirs": [
            "/Users/xingqiangchen/TASK/yica-yirage/python/../build",
            "/Users/xingqiangchen/TASK/yica-yirage/python/../deps/z3/build",
            "/usr/local/cuda/lib",
            "/usr/local/cuda/lib64",
            "/usr/local/cuda/lib64/stubs"
        ],
        "name": "yirage.core",
        "sources": [
            "/Users/xingqiangchen/TASK/yica-yirage/python/yirage/_cython/core.pyx"
        ]
    },
    "module_name": "yirage.core"
}
END: Cython Metadata */

#ifndef PY_SSIZE_T_CLEAN
#define PY_SSIZE_T_CLEAN
#endif /* PY_SSIZE_T_CLEAN */
/* InitLimitedAPI */
#if defined(Py_LIMITED_API) && !defined(CYTHON_LIMITED_API)
  #define CYTHON_LIMITED_API 1
#endif

#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x03080000
    #error Cython requires Python 3.8+.
#else
#define __PYX_ABI_VERSION "3_1_3"
#define CYTHON_HEX_VERSION 0x030103F0
#define CYTHON_FUTURE_DIVISION 1
/* CModulePreamble */
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(_WIN32) && !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#define __PYX_COMMA ,
#ifndef HAVE_LONG_LONG
  #define HAVE_LONG_LONG
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#define __PYX_LIMITED_VERSION_HEX PY_VERSION_HEX
#if defined(GRAALVM_PYTHON)
  /* For very preliminary testing purposes. Most variables are set the same as PyPy.
     The existence of this section does not imply that anything works or is even tested */
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 1
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 0
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #undef CYTHON_PEP489_MULTI_PHASE_INIT
  #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #undef CYTHON_USE_TP_FINALIZE
  #define CYTHON_USE_TP_FINALIZE 0
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 1
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(PYPY_VERSION)
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 1
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #undef CYTHON_USE_UNICODE_WRITER
  #define CYTHON_USE_UNICODE_WRITER 0
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #undef CYTHON_AVOID_BORROWED_REFS
  #define CYTHON_AVOID_BORROWED_REFS 1
  #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL 0
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #if PY_VERSION_HEX < 0x03090000
    #undef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 0
  #elif !defined(CYTHON_PEP489_MULTI_PHASE_INIT)
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #undef CYTHON_USE_MODULE_STATE
  #define CYTHON_USE_MODULE_STATE 0
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE (PYPY_VERSION_NUM >= 0x07030C00)
  #endif
  #undef CYTHON_USE_AM_SEND
  #define CYTHON_USE_AM_SEND 0
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC (PYPY_VERSION_NUM >= 0x07031100)
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#elif defined(CYTHON_LIMITED_API)
  #ifdef Py_LIMITED_API
    #undef __PYX_LIMITED_VERSION_HEX
    #define __PYX_LIMITED_VERSION_HEX Py_LIMITED_API
  #endif
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 0
  #define CYTHON_COMPILING_IN_LIMITED_API 1
  #define CYTHON_COMPILING_IN_GRAAL 0
  #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #undef CYTHON_CLINE_IN_TRACEBACK
  #define CYTHON_CLINE_IN_TRACEBACK 0
  #undef CYTHON_USE_TYPE_SLOTS
  #define CYTHON_USE_TYPE_SLOTS 0
  #undef CYTHON_USE_TYPE_SPECS
  #define CYTHON_USE_TYPE_SPECS 1
  #undef CYTHON_USE_PYTYPE_LOOKUP
  #define CYTHON_USE_PYTYPE_LOOKUP 0
  #undef CYTHON_USE_PYLIST_INTERNALS
  #define CYTHON_USE_PYLIST_INTERNALS 0
  #undef CYTHON_USE_UNICODE_INTERNALS
  #define CYTHON_USE_UNICODE_INTERNALS 0
  #ifndef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #endif
  #undef CYTHON_USE_PYLONG_INTERNALS
  #define CYTHON_USE_PYLONG_INTERNALS 0
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #undef CYTHON_ASSUME_SAFE_MACROS
  #define CYTHON_ASSUME_SAFE_MACROS 0
  #undef CYTHON_ASSUME_SAFE_SIZE
  #define CYTHON_ASSUME_SAFE_SIZE 0
  #undef CYTHON_UNPACK_METHODS
  #define CYTHON_UNPACK_METHODS 0
  #undef CYTHON_FAST_THREAD_STATE
  #define CYTHON_FAST_THREAD_STATE 0
  #undef CYTHON_FAST_GIL
  #define CYTHON_FAST_GIL 0
  #undef CYTHON_METH_FASTCALL
  #define CYTHON_METH_FASTCALL (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
  #undef CYTHON_FAST_PYCALL
  #define CYTHON_FAST_PYCALL 0
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #undef CYTHON_USE_SYS_MONITORING
  #define CYTHON_USE_SYS_MONITORING 0
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 0
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND (__PYX_LIMITED_VERSION_HEX >= 0x030A0000)
  #endif
  #undef CYTHON_USE_DICT_VERSIONS
  #define CYTHON_USE_DICT_VERSIONS 0
  #undef CYTHON_USE_EXC_INFO_STACK
  #define CYTHON_USE_EXC_INFO_STACK 0
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 0
  #endif
  #undef CYTHON_USE_FREELISTS
  #define CYTHON_USE_FREELISTS 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
  #define CYTHON_COMPILING_IN_LIMITED_API 0
  #define CYTHON_COMPILING_IN_GRAAL 0
  #ifdef Py_GIL_DISABLED
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 1
  #else
    #define CYTHON_COMPILING_IN_CPYTHON_FREETHREADING 0
  #endif
  #if PY_VERSION_HEX < 0x030A0000
    #undef CYTHON_USE_TYPE_SLOTS
    #define CYTHON_USE_TYPE_SLOTS 1
  #elif !defined(CYTHON_USE_TYPE_SLOTS)
    #define CYTHON_USE_TYPE_SLOTS 1
  #endif
  #ifndef CYTHON_USE_TYPE_SPECS
    #define CYTHON_USE_TYPE_SPECS 0
  #endif
  #ifndef CYTHON_USE_PYTYPE_LOOKUP
    #define CYTHON_USE_PYTYPE_LOOKUP 1
  #endif
  #ifndef CYTHON_USE_PYLONG_INTERNALS
    #define CYTHON_USE_PYLONG_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_PYLIST_INTERNALS
    #define CYTHON_USE_PYLIST_INTERNALS 0
  #elif !defined(CYTHON_USE_PYLIST_INTERNALS)
    #define CYTHON_USE_PYLIST_INTERNALS 1
  #endif
  #ifndef CYTHON_USE_UNICODE_INTERNALS
    #define CYTHON_USE_UNICODE_INTERNALS 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING || PY_VERSION_HEX >= 0x030B00A2
    #undef CYTHON_USE_UNICODE_WRITER
    #define CYTHON_USE_UNICODE_WRITER 0
  #elif !defined(CYTHON_USE_UNICODE_WRITER)
    #define CYTHON_USE_UNICODE_WRITER 1
  #endif
  #ifndef CYTHON_AVOID_BORROWED_REFS
    #define CYTHON_AVOID_BORROWED_REFS 0
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 1
  #elif !defined(CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS)
    #define CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS 0
  #endif
  #ifndef CYTHON_ASSUME_SAFE_MACROS
    #define CYTHON_ASSUME_SAFE_MACROS 1
  #endif
  #ifndef CYTHON_ASSUME_SAFE_SIZE
    #define CYTHON_ASSUME_SAFE_SIZE 1
  #endif
  #ifndef CYTHON_UNPACK_METHODS
    #define CYTHON_UNPACK_METHODS 1
  #endif
  #ifndef CYTHON_FAST_THREAD_STATE
    #define CYTHON_FAST_THREAD_STATE 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_FAST_GIL
    #define CYTHON_FAST_GIL 0
  #elif !defined(CYTHON_FAST_GIL)
    #define CYTHON_FAST_GIL (PY_VERSION_HEX < 0x030C00A6)
  #endif
  #ifndef CYTHON_METH_FASTCALL
    #define CYTHON_METH_FASTCALL 1
  #endif
  #ifndef CYTHON_FAST_PYCALL
    #define CYTHON_FAST_PYCALL 1
  #endif
  #ifndef CYTHON_PEP487_INIT_SUBCLASS
    #define CYTHON_PEP487_INIT_SUBCLASS 1
  #endif
  #ifndef CYTHON_PEP489_MULTI_PHASE_INIT
    #define CYTHON_PEP489_MULTI_PHASE_INIT 1
  #endif
  #ifndef CYTHON_USE_MODULE_STATE
    #define CYTHON_USE_MODULE_STATE 0
  #endif
  #ifndef CYTHON_USE_SYS_MONITORING
    #define CYTHON_USE_SYS_MONITORING (PY_VERSION_HEX >= 0x030d00B1)
  #endif
  #ifndef CYTHON_USE_TP_FINALIZE
    #define CYTHON_USE_TP_FINALIZE 1
  #endif
  #ifndef CYTHON_USE_AM_SEND
    #define CYTHON_USE_AM_SEND 1
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    #undef CYTHON_USE_DICT_VERSIONS
    #define CYTHON_USE_DICT_VERSIONS 0
  #elif !defined(CYTHON_USE_DICT_VERSIONS)
    #define CYTHON_USE_DICT_VERSIONS  (PY_VERSION_HEX < 0x030C00A5 && !CYTHON_USE_MODULE_STATE)
  #endif
  #ifndef CYTHON_USE_EXC_INFO_STACK
    #define CYTHON_USE_EXC_INFO_STACK 1
  #endif
  #ifndef CYTHON_UPDATE_DESCRIPTOR_DOC
    #define CYTHON_UPDATE_DESCRIPTOR_DOC 1
  #endif
  #ifndef CYTHON_USE_FREELISTS
    #define CYTHON_USE_FREELISTS (!CYTHON_COMPILING_IN_CPYTHON_FREETHREADING)
  #endif
#endif
#ifndef CYTHON_FAST_PYCCALL
#define CYTHON_FAST_PYCCALL  CYTHON_FAST_PYCALL
#endif
#ifndef CYTHON_VECTORCALL
#if CYTHON_COMPILING_IN_LIMITED_API
#define CYTHON_VECTORCALL  (__PYX_LIMITED_VERSION_HEX >= 0x030C0000)
#else
#define CYTHON_VECTORCALL  (CYTHON_FAST_PYCCALL && PY_VERSION_HEX >= 0x030800B1)
#endif
#endif
#define CYTHON_BACKPORT_VECTORCALL (CYTHON_METH_FASTCALL && PY_VERSION_HEX < 0x030800B1)
#if CYTHON_USE_PYLONG_INTERNALS
  #undef SHIFT
  #undef BASE
  #undef MASK
  #ifdef SIZEOF_VOID_P
    enum { __pyx_check_sizeof_voidp = 1 / (int)(SIZEOF_VOID_P == sizeof(void*)) };
  #endif
#endif
#ifndef CYTHON_LOCK_AND_GIL_DEADLOCK_AVOIDANCE_TIME
  #define CYTHON_LOCK_AND_GIL_DEADLOCK_AVOIDANCE_TIME 100
#endif
#ifndef __has_attribute
  #define __has_attribute(x) 0
#endif
#ifndef __has_cpp_attribute
  #define __has_cpp_attribute(x) 0
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifndef CYTHON_UNUSED
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(maybe_unused) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(maybe_unused)
        #define CYTHON_UNUSED [[maybe_unused]]
      #endif
    #endif
  #endif
#endif
#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_UNUSED_VAR
#  if defined(__cplusplus)
     template<class T> void CYTHON_UNUSED_VAR( const T& ) { }
#  else
#    define CYTHON_UNUSED_VAR(x) (void)(x)
#  endif
#endif
#ifndef CYTHON_MAYBE_UNUSED_VAR
  #define CYTHON_MAYBE_UNUSED_VAR(x) CYTHON_UNUSED_VAR(x)
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON && !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_USE_CPP_STD_MOVE
  #if defined(__cplusplus) && (\
    __cplusplus >= 201103L || (defined(_MSC_VER) && _MSC_VER >= 1600))
    #define CYTHON_USE_CPP_STD_MOVE 1
  #else
    #define CYTHON_USE_CPP_STD_MOVE 0
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)
#ifdef _MSC_VER
    #ifndef _MSC_STDINT_H_
        #if _MSC_VER < 1300
            typedef unsigned char     uint8_t;
            typedef unsigned short    uint16_t;
            typedef unsigned int      uint32_t;
        #else
            typedef unsigned __int8   uint8_t;
            typedef unsigned __int16  uint16_t;
            typedef unsigned __int32  uint32_t;
        #endif
    #endif
    #if _MSC_VER < 1300
        #ifdef _WIN64
            typedef unsigned long long  __pyx_uintptr_t;
        #else
            typedef unsigned int        __pyx_uintptr_t;
        #endif
    #else
        #ifdef _WIN64
            typedef unsigned __int64    __pyx_uintptr_t;
        #else
            typedef unsigned __int32    __pyx_uintptr_t;
        #endif
    #endif
#else
    #include <stdint.h>
    typedef uintptr_t  __pyx_uintptr_t;
#endif
#ifndef CYTHON_FALLTHROUGH
  #if defined(__cplusplus)
    /* for clang __has_cpp_attribute(fallthrough) is true even before C++17
     * but leads to warnings with -pedantic, since it is a C++17 feature */
    #if ((defined(_MSVC_LANG) && _MSVC_LANG >= 201703L) || __cplusplus >= 201703L)
      #if __has_cpp_attribute(fallthrough)
        #define CYTHON_FALLTHROUGH [[fallthrough]]
      #endif
    #endif
    #ifndef CYTHON_FALLTHROUGH
      #if __has_cpp_attribute(clang::fallthrough)
        #define CYTHON_FALLTHROUGH [[clang::fallthrough]]
      #elif __has_cpp_attribute(gnu::fallthrough)
        #define CYTHON_FALLTHROUGH [[gnu::fallthrough]]
      #endif
    #endif
  #endif
  #ifndef CYTHON_FALLTHROUGH
    #if __has_attribute(fallthrough)
      #define CYTHON_FALLTHROUGH __attribute__((fallthrough))
    #else
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
  #if defined(__clang__) && defined(__apple_build_version__)
    #if __apple_build_version__ < 7000000
      #undef  CYTHON_FALLTHROUGH
      #define CYTHON_FALLTHROUGH
    #endif
  #endif
#endif
#ifndef Py_UNREACHABLE
  #define Py_UNREACHABLE()  assert(0); abort()
#endif
#ifdef __cplusplus
  template <typename T>
  struct __PYX_IS_UNSIGNED_IMPL {static const bool value = T(0) < T(-1);};
  #define __PYX_IS_UNSIGNED(type) (__PYX_IS_UNSIGNED_IMPL<type>::value)
#else
  #define __PYX_IS_UNSIGNED(type) (((type)-1) > 0)
#endif
#if CYTHON_COMPILING_IN_PYPY == 1
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x030A0000)
#else
  #define __PYX_NEED_TP_PRINT_SLOT  (PY_VERSION_HEX >= 0x030800b4 && PY_VERSION_HEX < 0x03090000)
#endif
#define __PYX_REINTERPRET_FUNCION(func_pointer, other_pointer) ((func_pointer)(void(*)(void))(other_pointer))

/* CppInitCode */
#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #if defined(__clang__)
    #define CYTHON_INLINE __inline__ __attribute__ ((__unused__))
  #else
    #define CYTHON_INLINE inline
  #endif
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    T *operator&() { return ptr; }
    operator T&() { return *ptr; }
    template<typename U> bool operator ==(const U& other) const { return *ptr == other; }
    template<typename U> bool operator !=(const U& other) const { return *ptr != other; }
    template<typename U> bool operator==(const __Pyx_FakeReference<U>& other) const { return *ptr == *other.ptr; }
    template<typename U> bool operator!=(const __Pyx_FakeReference<U>& other) const { return *ptr != *other.ptr; }
  private:
    T *ptr;
};

/* PythonCompatibility */
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#define __Pyx_BUILTIN_MODULE_NAME "builtins"
#define __Pyx_DefaultClassType PyType_Type
#if CYTHON_COMPILING_IN_LIMITED_API
    #ifndef CO_OPTIMIZED
    static int CO_OPTIMIZED;
    #endif
    #ifndef CO_NEWLOCALS
    static int CO_NEWLOCALS;
    #endif
    #ifndef CO_VARARGS
    static int CO_VARARGS;
    #endif
    #ifndef CO_VARKEYWORDS
    static int CO_VARKEYWORDS;
    #endif
    #ifndef CO_ASYNC_GENERATOR
    static int CO_ASYNC_GENERATOR;
    #endif
    #ifndef CO_GENERATOR
    static int CO_GENERATOR;
    #endif
    #ifndef CO_COROUTINE
    static int CO_COROUTINE;
    #endif
#else
    #ifndef CO_COROUTINE
      #define CO_COROUTINE 0x80
    #endif
    #ifndef CO_ASYNC_GENERATOR
      #define CO_ASYNC_GENERATOR 0x200
    #endif
#endif
static int __Pyx_init_co_variables(void);
#if PY_VERSION_HEX >= 0x030900A4 || defined(Py_IS_TYPE)
  #define __Pyx_IS_TYPE(ob, type) Py_IS_TYPE(ob, type)
#else
  #define __Pyx_IS_TYPE(ob, type) (((const PyObject*)ob)->ob_type == (type))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_Is)
  #define __Pyx_Py_Is(x, y)  Py_Is(x, y)
#else
  #define __Pyx_Py_Is(x, y) ((x) == (y))
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsNone)
  #define __Pyx_Py_IsNone(ob) Py_IsNone(ob)
#else
  #define __Pyx_Py_IsNone(ob) __Pyx_Py_Is((ob), Py_None)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsTrue)
  #define __Pyx_Py_IsTrue(ob) Py_IsTrue(ob)
#else
  #define __Pyx_Py_IsTrue(ob) __Pyx_Py_Is((ob), Py_True)
#endif
#if PY_VERSION_HEX >= 0x030A00B1 || defined(Py_IsFalse)
  #define __Pyx_Py_IsFalse(ob) Py_IsFalse(ob)
#else
  #define __Pyx_Py_IsFalse(ob) __Pyx_Py_Is((ob), Py_False)
#endif
#define __Pyx_NoneAsNull(obj)  (__Pyx_Py_IsNone(obj) ? NULL : (obj))
#if PY_VERSION_HEX >= 0x030900F0 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyObject_GC_IsFinalized(o) PyObject_GC_IsFinalized(o)
#else
  #define __Pyx_PyObject_GC_IsFinalized(o) _PyGC_FINALIZED(o)
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#ifndef Py_TPFLAGS_SEQUENCE
  #define Py_TPFLAGS_SEQUENCE 0
#endif
#ifndef Py_TPFLAGS_MAPPING
  #define Py_TPFLAGS_MAPPING 0
#endif
#ifndef METH_STACKLESS
  #define METH_STACKLESS 0
#endif
#ifndef METH_FASTCALL
  #ifndef METH_FASTCALL
     #define METH_FASTCALL 0x80
  #endif
  typedef PyObject *(*__Pyx_PyCFunctionFast) (PyObject *self, PyObject *const *args, Py_ssize_t nargs);
  typedef PyObject *(*__Pyx_PyCFunctionFastWithKeywords) (PyObject *self, PyObject *const *args,
                                                          Py_ssize_t nargs, PyObject *kwnames);
#else
  #if PY_VERSION_HEX >= 0x030d00A4
  #  define __Pyx_PyCFunctionFast PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords PyCFunctionFastWithKeywords
  #else
  #  define __Pyx_PyCFunctionFast _PyCFunctionFast
  #  define __Pyx_PyCFunctionFastWithKeywords _PyCFunctionFastWithKeywords
  #endif
#endif
#if CYTHON_METH_FASTCALL
  #define __Pyx_METH_FASTCALL METH_FASTCALL
  #define __Pyx_PyCFunction_FastCall __Pyx_PyCFunctionFast
  #define __Pyx_PyCFunction_FastCallWithKeywords __Pyx_PyCFunctionFastWithKeywords
#else
  #define __Pyx_METH_FASTCALL METH_VARARGS
  #define __Pyx_PyCFunction_FastCall PyCFunction
  #define __Pyx_PyCFunction_FastCallWithKeywords PyCFunctionWithKeywords
#endif
#if CYTHON_VECTORCALL
  #define __pyx_vectorcallfunc vectorcallfunc
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  PY_VECTORCALL_ARGUMENTS_OFFSET
  #define __Pyx_PyVectorcall_NARGS(n)  PyVectorcall_NARGS((size_t)(n))
#elif CYTHON_BACKPORT_VECTORCALL
  typedef PyObject *(*__pyx_vectorcallfunc)(PyObject *callable, PyObject *const *args,
                                            size_t nargsf, PyObject *kwnames);
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  ((size_t)1 << (8 * sizeof(size_t) - 1))
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(((size_t)(n)) & ~__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET))
#else
  #define __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET  0
  #define __Pyx_PyVectorcall_NARGS(n)  ((Py_ssize_t)(n))
#endif
#if PY_VERSION_HEX >= 0x030900B1
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_CheckExact(func)
#else
#define __Pyx_PyCFunction_CheckExact(func)  PyCFunction_Check(func)
#endif
#define __Pyx_CyOrPyCFunction_Check(func)  PyCFunction_Check(func)
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  (((PyCFunctionObject*)(func))->m_ml->ml_meth)
#elif !CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyOrPyCFunction_GET_FUNCTION(func)  PyCFunction_GET_FUNCTION(func)
#endif
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_CyOrPyCFunction_GET_FLAGS(func)  (((PyCFunctionObject*)(func))->m_ml->ml_flags)
static CYTHON_INLINE PyObject* __Pyx_CyOrPyCFunction_GET_SELF(PyObject *func) {
    return (__Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_STATIC) ? NULL : ((PyCFunctionObject*)func)->m_self;
}
#endif
static CYTHON_INLINE int __Pyx__IsSameCFunction(PyObject *func, void (*cfunc)(void)) {
#if CYTHON_COMPILING_IN_LIMITED_API
    return PyCFunction_Check(func) && PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
#else
    return PyCFunction_Check(func) && PyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
#endif
}
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCFunction(func, cfunc)
#if __PYX_LIMITED_VERSION_HEX < 0x03090000
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  ((void)m, PyType_FromSpecWithBases(s, b))
  typedef PyObject *(*__Pyx_PyCMethod)(PyObject *, PyTypeObject *, PyObject *const *, size_t, PyObject *);
#else
  #define __Pyx_PyType_FromModuleAndSpec(m, s, b)  PyType_FromModuleAndSpec(m, s, b)
  #define __Pyx_PyCMethod  PyCMethod
#endif
#ifndef METH_METHOD
  #define METH_METHOD 0x200
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)
#elif CYTHON_COMPILING_IN_GRAAL
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno) _PyFrame_SetLineNumber((frame), (lineno))
#else
  #define __Pyx_PyCode_HasFreeVars(co)  (PyCode_GetNumFree(co) > 0)
  #define __Pyx_PyFrame_SetLineNumber(frame, lineno)  (frame)->f_lineno = (lineno)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyThreadState_Current PyThreadState_Get()
#elif !CYTHON_FAST_THREAD_STATE
  #define __Pyx_PyThreadState_Current PyThreadState_GET()
#elif PY_VERSION_HEX >= 0x030d00A1
  #define __Pyx_PyThreadState_Current PyThreadState_GetUnchecked()
#else
  #define __Pyx_PyThreadState_Current _PyThreadState_UncheckedGet()
#endif
#if CYTHON_USE_MODULE_STATE
static CYTHON_INLINE void *__Pyx__PyModule_GetState(PyObject *op)
{
    void *result;
    result = PyModule_GetState(op);
    if (!result)
        Py_FatalError("Couldn't find the module state");
    return result;
}
#define __Pyx_PyModule_GetState(o) (__pyx_mstatetype *)__Pyx__PyModule_GetState(o)
#else
#define __Pyx_PyModule_GetState(op) ((void)op,__pyx_mstate_global)
#endif
#define __Pyx_PyObject_GetSlot(obj, name, func_ctype)  __Pyx_PyType_GetSlot(Py_TYPE((PyObject *) obj), name, func_ctype)
#define __Pyx_PyObject_TryGetSlot(obj, name, func_ctype) __Pyx_PyType_TryGetSlot(Py_TYPE(obj), name, func_ctype)
#define __Pyx_PyObject_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#define __Pyx_PyObject_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSubSlot(Py_TYPE(obj), sub, name, func_ctype)
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((type)->name)
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype) __Pyx_PyType_GetSlot(type, name, func_ctype)
  #define __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype) (((type)->sub) ? ((type)->sub->name) : NULL)
  #define __Pyx_PyType_TryGetSubSlot(type, sub, name, func_ctype) __Pyx_PyType_GetSubSlot(type, sub, name, func_ctype)
#else
  #define __Pyx_PyType_GetSlot(type, name, func_ctype)  ((func_ctype) PyType_GetSlot((type), Py_##name))
  #define __Pyx_PyType_TryGetSlot(type, name, func_ctype)\
    ((__PYX_LIMITED_VERSION_HEX >= 0x030A0000 ||\
     (PyType_GetFlags(type) & Py_TPFLAGS_HEAPTYPE) || __Pyx_get_runtime_version() >= 0x030A0000) ?\
     __Pyx_PyType_GetSlot(type, name, func_ctype) : NULL)
  #define __Pyx_PyType_GetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_GetSlot(obj, name, func_ctype)
  #define __Pyx_PyType_TryGetSubSlot(obj, sub, name, func_ctype) __Pyx_PyType_TryGetSlot(obj, name, func_ctype)
#endif
#if CYTHON_COMPILING_IN_CPYTHON || defined(_PyDict_NewPresized)
#define __Pyx_PyDict_NewPresized(n)  ((n <= 8) ? PyDict_New() : _PyDict_NewPresized(n))
#else
#define __Pyx_PyDict_NewPresized(n)  PyDict_New()
#endif
#define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
#define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_UNICODE_INTERNALS
#define __Pyx_PyDict_GetItemStrWithError(dict, name)  _PyDict_GetItem_KnownHash(dict, name, ((PyASCIIObject *) name)->hash)
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStr(PyObject *dict, PyObject *name) {
    PyObject *res = __Pyx_PyDict_GetItemStrWithError(dict, name);
    if (res == NULL) PyErr_Clear();
    return res;
}
#elif !CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07020000
#define __Pyx_PyDict_GetItemStrWithError  PyDict_GetItemWithError
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#else
static CYTHON_INLINE PyObject * __Pyx_PyDict_GetItemStrWithError(PyObject *dict, PyObject *name) {
#if CYTHON_COMPILING_IN_PYPY
    return PyDict_GetItem(dict, name);
#else
    PyDictEntry *ep;
    PyDictObject *mp = (PyDictObject*) dict;
    long hash = ((PyStringObject *) name)->ob_shash;
    assert(hash != -1);
    ep = (mp->ma_lookup)(mp, name, hash);
    if (ep == NULL) {
        return NULL;
    }
    return ep->me_value;
#endif
}
#define __Pyx_PyDict_GetItemStr           PyDict_GetItem
#endif
#if CYTHON_USE_TYPE_SLOTS
  #define __Pyx_PyType_GetFlags(tp)   (((PyTypeObject *)tp)->tp_flags)
  #define __Pyx_PyType_HasFeature(type, feature)  ((__Pyx_PyType_GetFlags(type) & (feature)) != 0)
#else
  #define __Pyx_PyType_GetFlags(tp)   (PyType_GetFlags((PyTypeObject *)tp))
  #define __Pyx_PyType_HasFeature(type, feature)  PyType_HasFeature(type, feature)
#endif
#define __Pyx_PyObject_GetIterNextFunc(iterator)  __Pyx_PyObject_GetSlot(iterator, tp_iternext, iternextfunc)
#if CYTHON_USE_TYPE_SPECS && PY_VERSION_HEX >= 0x03080000
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  {\
    PyTypeObject *type = Py_TYPE((PyObject*)obj);\
    assert(__Pyx_PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE));\
    PyObject_GC_Del(obj);\
    Py_DECREF(type);\
}
#else
#define __Pyx_PyHeapTypeObject_GC_Del(obj)  PyObject_GC_Del(obj)
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_ReadChar(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   ((void)u, 1114111U)
  #define __Pyx_PyUnicode_KIND(u)         ((void)u, (0))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)u)
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)k, PyUnicode_ReadChar((PyObject*)(d), i))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GetLength(u))
#else
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_READY(op)       (0)
  #else
    #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                                0 : _PyUnicode_Ready((PyObject *)(op)))
  #endif
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_MAX_CHAR_VALUE(u)   PyUnicode_MAX_CHAR_VALUE(u)
  #define __Pyx_PyUnicode_KIND(u)         ((int)PyUnicode_KIND(u))
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_WRITE(k, d, i, ch)  PyUnicode_WRITE(k, d, i, (Py_UCS4) ch)
  #if PY_VERSION_HEX >= 0x030C0000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_LENGTH(u))
  #else
    #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x03090000
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : ((PyCompactUnicodeObject *)(u))->wstr_length))
    #else
    #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
    #endif
  #endif
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #if !defined(PyUnicode_DecodeUnicodeEscape)
    #define PyUnicode_DecodeUnicodeEscape(s, size, errors)  PyUnicode_Decode(s, size, "unicode_escape", errors)
  #endif
  #if !defined(PyUnicode_Contains)
    #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
  #endif
  #if !defined(PyByteArray_Check)
    #define PyByteArray_Check(obj)  PyObject_TypeCheck(obj, &PyByteArray_Type)
  #endif
  #if !defined(PyObject_Format)
    #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
  #endif
#endif
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None || (PyUnicode_Check(b) && !PyUnicode_CheckExact(b)))) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if CYTHON_COMPILING_IN_CPYTHON
  #define __Pyx_PySequence_ListKeepNew(obj)\
    (likely(PyList_CheckExact(obj) && Py_REFCNT(obj) == 1) ? __Pyx_NewRef(obj) : PySequence_List(obj))
#else
  #define __Pyx_PySequence_ListKeepNew(obj)  PySequence_List(obj)
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        __Pyx_IS_TYPE(obj, &PySet_Type)
#endif
#if PY_VERSION_HEX >= 0x030900A4
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_SET_REFCNT(obj, refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SET_SIZE(obj, size)
#else
  #define __Pyx_SET_REFCNT(obj, refcnt) Py_REFCNT(obj) = (refcnt)
  #define __Pyx_SET_SIZE(obj, size) Py_SIZE(obj) = (size)
#endif
#if CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
  #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    #define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)
  #elif CYTHON_COMPILING_IN_LIMITED_API || !CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_PyList_GetItemRef(o, i) (likely((i) >= 0) ? PySequence_GetItem(o, i) : (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
  #else
    #define __Pyx_PyList_GetItemRef(o, i) PySequence_ITEM(o, i)
  #endif
#elif CYTHON_COMPILING_IN_LIMITED_API || !CYTHON_ASSUME_SAFE_MACROS
  #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    #define __Pyx_PyList_GetItemRef(o, i) PyList_GetItemRef(o, i)
  #else
    #define __Pyx_PyList_GetItemRef(o, i) __Pyx_XNewRef(PyList_GetItem(o, i))
  #endif
#else
  #define __Pyx_PyList_GetItemRef(o, i) __Pyx_NewRef(PyList_GET_ITEM(o, i))
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_PyDict_GetItemRef(dict, key, result) PyDict_GetItemRef(dict, key, result)
#elif CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyObject_GetItem(dict, key);
  if (*result == NULL) {
    if (PyErr_ExceptionMatches(PyExc_KeyError)) {
      PyErr_Clear();
      return 0;
    }
    return -1;
  }
  return 1;
}
#else
static CYTHON_INLINE int __Pyx_PyDict_GetItemRef(PyObject *dict, PyObject *key, PyObject **result) {
  *result = PyDict_GetItemWithError(dict, key);
  if (*result == NULL) {
    return PyErr_Occurred() ? -1 : 0;
  }
  Py_INCREF(*result);
  return 1;
}
#endif
#if defined(CYTHON_DEBUG_VISIT_CONST) && CYTHON_DEBUG_VISIT_CONST
  #define __Pyx_VISIT_CONST(obj)  Py_VISIT(obj)
#else
  #define __Pyx_VISIT_CONST(obj)
#endif
#if CYTHON_ASSUME_SAFE_MACROS
  #define __Pyx_PySequence_ITEM(o, i) PySequence_ITEM(o, i)
  #define __Pyx_PySequence_SIZE(seq)  Py_SIZE(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) (PyTuple_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GET_ITEM(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) (PyList_SET_ITEM(o, i, v), (0))
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GET_ITEM(o, i)
#else
  #define __Pyx_PySequence_ITEM(o, i) PySequence_GetItem(o, i)
  #define __Pyx_PySequence_SIZE(seq)  PySequence_Size(seq)
  #define __Pyx_PyTuple_SET_ITEM(o, i, v) PyTuple_SetItem(o, i, v)
  #define __Pyx_PyTuple_GET_ITEM(o, i) PyTuple_GetItem(o, i)
  #define __Pyx_PyList_SET_ITEM(o, i, v) PyList_SetItem(o, i, v)
  #define __Pyx_PyList_GET_ITEM(o, i) PyList_GetItem(o, i)
#endif
#if CYTHON_ASSUME_SAFE_SIZE
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_GET_SIZE(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_GET_SIZE(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_GET_SIZE(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_GET_SIZE(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_GET_SIZE(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GET_LENGTH(o)
#else
  #define __Pyx_PyTuple_GET_SIZE(o) PyTuple_Size(o)
  #define __Pyx_PyList_GET_SIZE(o) PyList_Size(o)
  #define __Pyx_PySet_GET_SIZE(o) PySet_Size(o)
  #define __Pyx_PyBytes_GET_SIZE(o) PyBytes_Size(o)
  #define __Pyx_PyByteArray_GET_SIZE(o) PyByteArray_Size(o)
  #define __Pyx_PyUnicode_GET_LENGTH(o) PyUnicode_GetLength(o)
#endif
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
  #define __Pyx_PyImport_AddModuleRef(name) PyImport_AddModuleRef(name)
#else
  static CYTHON_INLINE PyObject *__Pyx_PyImport_AddModuleRef(const char *name) {
      PyObject *module = PyImport_AddModule(name);
      Py_XINCREF(module);
      return module;
  }
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_InternFromString)
  #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
#endif
#define __Pyx_PyLong_FromHash_t PyLong_FromSsize_t
#define __Pyx_PyLong_AsHash_t   __Pyx_PyIndex_AsSsize_t
#if __PYX_LIMITED_VERSION_HEX >= 0x030A0000
    #define __Pyx_PySendResult PySendResult
#else
    typedef enum {
        PYGEN_RETURN = 0,
        PYGEN_ERROR = -1,
        PYGEN_NEXT = 1,
    } __Pyx_PySendResult;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX < 0x030A00A3
  typedef __Pyx_PySendResult (*__Pyx_pyiter_sendfunc)(PyObject *iter, PyObject *value, PyObject **result);
#else
  #define __Pyx_pyiter_sendfunc sendfunc
#endif
#if !CYTHON_USE_AM_SEND
#define __PYX_HAS_PY_AM_SEND 0
#elif __PYX_LIMITED_VERSION_HEX >= 0x030A0000
#define __PYX_HAS_PY_AM_SEND 1
#else
#define __PYX_HAS_PY_AM_SEND 2  // our own backported implementation
#endif
#if __PYX_HAS_PY_AM_SEND < 2
    #define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#else
    typedef struct {
        unaryfunc am_await;
        unaryfunc am_aiter;
        unaryfunc am_anext;
        __Pyx_pyiter_sendfunc am_send;
    } __Pyx_PyAsyncMethodsStruct;
    #define __Pyx_SlotTpAsAsync(s) ((PyAsyncMethods*)(s))
#endif
#if CYTHON_USE_AM_SEND && PY_VERSION_HEX < 0x030A00F0
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (1UL << 21)
#else
    #define __Pyx_TPFLAGS_HAVE_AM_SEND (0)
#endif
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_PyInterpreterState_Get() PyInterpreterState_Get()
#else
#define __Pyx_PyInterpreterState_Get() PyThreadState_Get()->interp
#endif
#if CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030A0000
#ifdef __cplusplus
extern "C"
#endif
PyAPI_FUNC(void *) PyMem_Calloc(size_t nelem, size_t elsize);
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static int __Pyx_init_co_variable(PyObject *inspect, const char* name, int *write_to) {
    int value;
    PyObject *py_value = PyObject_GetAttrString(inspect, name);
    if (!py_value) return 0;
    value = (int) PyLong_AsLong(py_value);
    Py_DECREF(py_value);
    *write_to = value;
    return value != -1 || !PyErr_Occurred();
}
static int __Pyx_init_co_variables(void) {
    PyObject *inspect;
    int result;
    inspect = PyImport_ImportModule("inspect");
    result =
#if !defined(CO_OPTIMIZED)
        __Pyx_init_co_variable(inspect, "CO_OPTIMIZED", &CO_OPTIMIZED) &&
#endif
#if !defined(CO_NEWLOCALS)
        __Pyx_init_co_variable(inspect, "CO_NEWLOCALS", &CO_NEWLOCALS) &&
#endif
#if !defined(CO_VARARGS)
        __Pyx_init_co_variable(inspect, "CO_VARARGS", &CO_VARARGS) &&
#endif
#if !defined(CO_VARKEYWORDS)
        __Pyx_init_co_variable(inspect, "CO_VARKEYWORDS", &CO_VARKEYWORDS) &&
#endif
#if !defined(CO_ASYNC_GENERATOR)
        __Pyx_init_co_variable(inspect, "CO_ASYNC_GENERATOR", &CO_ASYNC_GENERATOR) &&
#endif
#if !defined(CO_GENERATOR)
        __Pyx_init_co_variable(inspect, "CO_GENERATOR", &CO_GENERATOR) &&
#endif
#if !defined(CO_COROUTINE)
        __Pyx_init_co_variable(inspect, "CO_COROUTINE", &CO_COROUTINE) &&
#endif
        1;
    Py_DECREF(inspect);
    return result ? 0 : -1;
}
#else
static int __Pyx_init_co_variables(void) {
    return 0;  // It's a limited API-only feature
}
#endif

/* MathInitCode */
#if defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS)
  #ifndef _USE_MATH_DEFINES
    #define _USE_MATH_DEFINES
  #endif
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#if defined(__CYGWIN__) && defined(_LDBL_EQ_DBL)
#define __Pyx_truncl trunc
#else
#define __Pyx_truncl truncl
#endif

#ifndef CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#define CYTHON_CLINE_IN_TRACEBACK_RUNTIME 0
#endif
#ifndef CYTHON_CLINE_IN_TRACEBACK
#define CYTHON_CLINE_IN_TRACEBACK CYTHON_CLINE_IN_TRACEBACK_RUNTIME
#endif
#if CYTHON_CLINE_IN_TRACEBACK
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; __pyx_clineno = __LINE__; (void) __pyx_clineno; }
#else
#define __PYX_MARK_ERR_POS(f_index, lineno)  { __pyx_filename = __pyx_f[f_index]; (void) __pyx_filename; __pyx_lineno = lineno; (void) __pyx_lineno; (void) __pyx_clineno; }
#endif
#define __PYX_ERR(f_index, lineno, Ln_error) \
    { __PYX_MARK_ERR_POS(f_index, lineno) goto Ln_error; }

#ifdef CYTHON_EXTERN_C
    #undef __PYX_EXTERN_C
    #define __PYX_EXTERN_C CYTHON_EXTERN_C
#elif defined(__PYX_EXTERN_C)
    #ifdef _MSC_VER
    #pragma message ("Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.")
    #else
    #warning Please do not define the '__PYX_EXTERN_C' macro externally. Use 'CYTHON_EXTERN_C' instead.
    #endif
#else
    #define __PYX_EXTERN_C extern "C++"
#endif

#define __PYX_HAVE__yirage__core
#define __PYX_HAVE_API__yirage__core
/* Early includes */
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <memory>
#include <string.h>
#include <string_view>
#include <string>
#include <vector>
#include "vector_types.h"
#include "yirage/type.h"
#include "yirage/layout.h"
#include "yirage/kernel/device_tensor.h"
#include "yirage/kernel/runtime.h"
#include "yirage/kernel/graph.h"
#include "yirage/threadblock/graph.h"
#include "yirage/search/search_c.h"
#include "yirage/transpiler/transpile.h"
#include "yirage/nki_transpiler/transpile.h"
#include "yirage/triton_transpiler/transpile.h"
#include "yirage/kernel/device_memory_manager.h"
#include <stdio.h>

    #if PY_MAJOR_VERSION >= 3
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj)
    #else
      #define __Pyx_PyFloat_FromString(obj)  PyFloat_FromString(obj, NULL)
    #endif
    
#include <stddef.h>

    #if PY_MAJOR_VERSION <= 2
    #define PyDict_GetItemWithError _PyDict_GetItemWithError
    #endif
    

    #if PY_VERSION_HEX < 0x030d0000
    static CYTHON_INLINE int __Pyx_PyWeakref_GetRef(PyObject *ref, PyObject **pobj)
    {
        PyObject *obj = PyWeakref_GetObject(ref);
        if (obj == NULL) {
            // SystemError if ref is NULL
            *pobj = NULL;
            return -1;
        }
        if (obj == Py_None) {
            *pobj = NULL;
            return 0;
        }
        Py_INCREF(obj);
        *pobj = obj;
        return 1;
    }
    #else
    #define __Pyx_PyWeakref_GetRef PyWeakref_GetRef
    #endif
    
#include "pythread.h"

    #if (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM < 0x07030600) && !defined(PyContextVar_Get)
    #define PyContextVar_Get(var, d, v)         ((d) ?             ((void)(var), Py_INCREF(d), (v)[0] = (d), 0) :             ((v)[0] = NULL, 0)         )
    #endif
    

    #if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API
    #ifdef _MSC_VER
    #pragma message ("This module uses CPython specific internals of 'array.array', which are not available in PyPy or the limited API.")
    #else
    #warning This module uses CPython specific internals of 'array.array', which are not available in PyPy or the limited API.
    #endif
    #endif
    
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#if defined(PYREX_WITHOUT_ASSERTIONS) && !defined(CYTHON_WITHOUT_ASSERTIONS)
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_UTF8 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE int __Pyx_is_valid_index(Py_ssize_t i, Py_ssize_t limit) {
    return (size_t) i < (size_t) limit;
}
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER)
    #define __Pyx_sst_abs(value) ((Py_ssize_t)_abs64(value))
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s);
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char*);
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AS_STRING(s))
    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AS_STRING(s)
#else
    #define __Pyx_PyBytes_AsWritableString(s)     ((char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableSString(s)    ((signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsWritableUString(s)    ((unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsString(s)     ((const char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsSString(s)    ((const signed char*) PyBytes_AsString(s))
    #define __Pyx_PyBytes_AsUString(s)    ((const unsigned char*) PyBytes_AsString(s))
    #define __Pyx_PyByteArray_AsString(s) PyByteArray_AsString(s)
#endif
#define __Pyx_PyObject_AsWritableString(s)    ((char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableSString(s)    ((signed char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsWritableUString(s)    ((unsigned char*)(__pyx_uintptr_t) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsSString(s)    ((const signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((const unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#define __Pyx_PyUnicode_FromOrdinal(o)       PyUnicode_FromOrdinal((int)o)
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
static CYTHON_INLINE PyObject *__Pyx_NewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_NewRef)
    return Py_NewRef(obj);
#else
    Py_INCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_XNewRef(PyObject *obj) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030a0000 || defined(Py_XNewRef)
    return Py_XNewRef(obj);
#else
    Py_XINCREF(obj);
    return obj;
#endif
}
static CYTHON_INLINE PyObject *__Pyx_Owned_Py_None(int b);
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b);
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x);
#define __Pyx_PySequence_Tuple(obj)\
    (likely(PyTuple_CheckExact(obj)) ? __Pyx_NewRef(obj) : PySequence_Tuple(obj))
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t);
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject*);
#if CYTHON_ASSUME_SAFE_MACROS
#define __Pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AS_DOUBLE(x)
#else
#define __Pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#define __Pyx_PyFloat_AS_DOUBLE(x) PyFloat_AsDouble(x)
#endif
#define __Pyx_PyFloat_AsFloat(x) ((float) __Pyx_PyFloat_AsDouble(x))
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#if CYTHON_USE_PYLONG_INTERNALS
  #if PY_VERSION_HEX >= 0x030C00A7
  #ifndef _PyLong_SIGN_MASK
    #define _PyLong_SIGN_MASK 3
  #endif
  #ifndef _PyLong_NON_SIZE_BITS
    #define _PyLong_NON_SIZE_BITS 3
  #endif
  #define __Pyx_PyLong_Sign(x)  (((PyLongObject*)x)->long_value.lv_tag & _PyLong_SIGN_MASK)
  #define __Pyx_PyLong_IsNeg(x)  ((__Pyx_PyLong_Sign(x) & 2) != 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (!__Pyx_PyLong_IsNeg(x))
  #define __Pyx_PyLong_IsZero(x)  (__Pyx_PyLong_Sign(x) & 1)
  #define __Pyx_PyLong_IsPos(x)  (__Pyx_PyLong_Sign(x) == 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  (__Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  ((Py_ssize_t) (((PyLongObject*)x)->long_value.lv_tag >> _PyLong_NON_SIZE_BITS))
  #define __Pyx_PyLong_SignedDigitCount(x)\
        ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * __Pyx_PyLong_DigitCount(x))
  #if defined(PyUnstable_Long_IsCompact) && defined(PyUnstable_Long_CompactValue)
    #define __Pyx_PyLong_IsCompact(x)     PyUnstable_Long_IsCompact((PyLongObject*) x)
    #define __Pyx_PyLong_CompactValue(x)  PyUnstable_Long_CompactValue((PyLongObject*) x)
  #else
    #define __Pyx_PyLong_IsCompact(x)     (((PyLongObject*)x)->long_value.lv_tag < (2 << _PyLong_NON_SIZE_BITS))
    #define __Pyx_PyLong_CompactValue(x)  ((1 - (Py_ssize_t) __Pyx_PyLong_Sign(x)) * (Py_ssize_t) __Pyx_PyLong_Digits(x)[0])
  #endif
  typedef Py_ssize_t  __Pyx_compact_pylong;
  typedef size_t  __Pyx_compact_upylong;
  #else
  #define __Pyx_PyLong_IsNeg(x)  (Py_SIZE(x) < 0)
  #define __Pyx_PyLong_IsNonNeg(x)  (Py_SIZE(x) >= 0)
  #define __Pyx_PyLong_IsZero(x)  (Py_SIZE(x) == 0)
  #define __Pyx_PyLong_IsPos(x)  (Py_SIZE(x) > 0)
  #define __Pyx_PyLong_CompactValueUnsigned(x)  ((Py_SIZE(x) == 0) ? 0 : __Pyx_PyLong_Digits(x)[0])
  #define __Pyx_PyLong_DigitCount(x)  __Pyx_sst_abs(Py_SIZE(x))
  #define __Pyx_PyLong_SignedDigitCount(x)  Py_SIZE(x)
  #define __Pyx_PyLong_IsCompact(x)  (Py_SIZE(x) == 0 || Py_SIZE(x) == 1 || Py_SIZE(x) == -1)
  #define __Pyx_PyLong_CompactValue(x)\
        ((Py_SIZE(x) == 0) ? (sdigit) 0 : ((Py_SIZE(x) < 0) ? -(sdigit)__Pyx_PyLong_Digits(x)[0] : (sdigit)__Pyx_PyLong_Digits(x)[0]))
  typedef sdigit  __Pyx_compact_pylong;
  typedef digit  __Pyx_compact_upylong;
  #endif
  #if PY_VERSION_HEX >= 0x030C00A5
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->long_value.ob_digit)
  #else
  #define __Pyx_PyLong_Digits(x)  (((PyLongObject*)x)->ob_digit)
  #endif
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#elif __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeASCII(c_str, size, NULL)
#else
  #define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */
/* PretendToInitialize */
#ifdef __cplusplus
#if __cplusplus > 201103L
#include <type_traits>
#endif
template <typename T>
static void __Pyx_pretend_to_initialize(T* ptr) {
#if __cplusplus > 201103L
    if ((std::is_trivially_default_constructible<T>::value))
#endif
        *ptr = T();
    (void)ptr;
}
#else
static CYTHON_INLINE void __Pyx_pretend_to_initialize(void* ptr) { (void)ptr; }
#endif


#if !CYTHON_USE_MODULE_STATE
static PyObject *__pyx_m = NULL;
#endif
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * const __pyx_cfilenm = __FILE__;
static const char *__pyx_filename;

/* #### Code section: filename_table ### */

static const char* const __pyx_f[] = {
  "yirage/_cython/core.pyx",
  "<stringsource>",
  "cpython/contextvars.pxd",
  "array.pxd",
  "cpython/type.pxd",
  "cpython/bool.pxd",
  "cpython/complex.pxd",
};
/* #### Code section: utility_code_proto_before_types ### */
/* Atomics.proto */
#include <pythread.h>
#ifndef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 1
#endif
#define __PYX_CYTHON_ATOMICS_ENABLED() CYTHON_ATOMICS
#define __PYX_GET_CYTHON_COMPILING_IN_CPYTHON_FREETHREADING() CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#define __pyx_atomic_int_type int
#define __pyx_nonatomic_int_type int
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__))
    #include <stdatomic.h>
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)))
    #include <atomic>
#endif
#if CYTHON_ATOMICS && (defined(__STDC_VERSION__) &&\
                        (__STDC_VERSION__ >= 201112L) &&\
                        !defined(__STDC_NO_ATOMICS__) &&\
                       ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type atomic_int
    #define __pyx_atomic_ptr_type atomic_uintptr_t
    #define __pyx_nonatomic_ptr_type uintptr_t
    #define __pyx_atomic_incr_relaxed(value) atomic_fetch_add_explicit(value, 1, memory_order_relaxed)
    #define __pyx_atomic_incr_acq_rel(value) atomic_fetch_add_explicit(value, 1, memory_order_acq_rel)
    #define __pyx_atomic_decr_acq_rel(value) atomic_fetch_sub_explicit(value, 1, memory_order_acq_rel)
    #define __pyx_atomic_sub(value, arg) atomic_fetch_sub(value, arg)
    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) atomic_compare_exchange_strong(value, expected, desired)
    #define __pyx_atomic_load(value) atomic_load(value)
    #define __pyx_atomic_store(value, new_value) atomic_store(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) atomic_load_explicit(value, memory_order_relaxed)
    #define __pyx_atomic_pointer_load_acquire(value) atomic_load_explicit(value, memory_order_acquire)
    #define __pyx_atomic_pointer_exchange(value, new_value) atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C atomics"
    #endif
#elif CYTHON_ATOMICS && (defined(__cplusplus) && (\
                    (__cplusplus >= 201103L) ||\
\
                    (defined(_MSC_VER) && _MSC_VER >= 1700)) &&\
                    ATOMIC_INT_LOCK_FREE == 2)
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type std::atomic_int
    #define __pyx_atomic_ptr_type std::atomic_uintptr_t
    #define __pyx_nonatomic_ptr_type uintptr_t
    #define __pyx_atomic_incr_relaxed(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_relaxed)
    #define __pyx_atomic_incr_acq_rel(value) std::atomic_fetch_add_explicit(value, 1, std::memory_order_acq_rel)
    #define __pyx_atomic_decr_acq_rel(value) std::atomic_fetch_sub_explicit(value, 1, std::memory_order_acq_rel)
    #define __pyx_atomic_sub(value, arg) std::atomic_fetch_sub(value, arg)
    #define __pyx_atomic_int_cmp_exchange(value, expected, desired) std::atomic_compare_exchange_strong(value, expected, desired)
    #define __pyx_atomic_load(value) std::atomic_load(value)
    #define __pyx_atomic_store(value, new_value) std::atomic_store(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) std::atomic_load_explicit(value, std::memory_order_relaxed)
    #define __pyx_atomic_pointer_load_acquire(value) std::atomic_load_explicit(value, std::memory_order_acquire)
    #define __pyx_atomic_pointer_exchange(value, new_value) std::atomic_exchange(value, (__pyx_nonatomic_ptr_type)new_value)
    #if defined(__PYX_DEBUG_ATOMICS) && defined(_MSC_VER)
        #pragma message ("Using standard C++ atomics")
    #elif defined(__PYX_DEBUG_ATOMICS)
        #warning "Using standard C++ atomics"
    #endif
#elif CYTHON_ATOMICS && (__GNUC__ >= 5 || (__GNUC__ == 4 &&\
                    (__GNUC_MINOR__ > 1 ||\
                    (__GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ >= 2))))
    #define __pyx_atomic_ptr_type void*
    #define __pyx_atomic_incr_relaxed(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_incr_acq_rel(value) __sync_fetch_and_add(value, 1)
    #define __pyx_atomic_decr_acq_rel(value) __sync_fetch_and_sub(value, 1)
    #define __pyx_atomic_sub(value, arg) __sync_fetch_and_sub(value, arg)
    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {
        __pyx_nonatomic_int_type old = __sync_val_compare_and_swap(value, *expected, desired);
        int result = old == *expected;
        *expected = old;
        return result;
    }
    #define __pyx_atomic_load(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_store(value, new_value) __sync_lock_test_and_set(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_pointer_load_acquire(value) __sync_fetch_and_add(value, 0)
    #define __pyx_atomic_pointer_exchange(value, new_value) __sync_lock_test_and_set(value, (__pyx_atomic_ptr_type)new_value)
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Using GNU atomics"
    #endif
#elif CYTHON_ATOMICS && defined(_MSC_VER)
    #include <intrin.h>
    #undef __pyx_atomic_int_type
    #define __pyx_atomic_int_type long
    #define __pyx_atomic_ptr_type void*
    #undef __pyx_nonatomic_int_type
    #define __pyx_nonatomic_int_type long
    #pragma intrinsic (_InterlockedExchangeAdd, _InterlockedExchange, _InterlockedCompareExchange, _InterlockedCompareExchangePointer, _InterlockedExchangePointer)
    #define __pyx_atomic_incr_relaxed(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_incr_acq_rel(value) _InterlockedExchangeAdd(value, 1)
    #define __pyx_atomic_decr_acq_rel(value) _InterlockedExchangeAdd(value, -1)
    #define __pyx_atomic_sub(value, arg) _InterlockedExchangeAdd(value, -arg)
    static CYTHON_INLINE int __pyx_atomic_int_cmp_exchange(__pyx_atomic_int_type* value, __pyx_nonatomic_int_type* expected, __pyx_nonatomic_int_type desired) {
        __pyx_nonatomic_int_type old = _InterlockedCompareExchange(value, desired, *expected);
        int result = old == *expected;
        *expected = old;
        return result;
    }
    #define __pyx_atomic_load(value) _InterlockedExchangeAdd(value, 0)
    #define __pyx_atomic_store(value, new_value) _InterlockedExchange(value, new_value)
    #define __pyx_atomic_pointer_load_relaxed(value) *(void * volatile *)value
    #define __pyx_atomic_pointer_load_acquire(value) _InterlockedCompareExchangePointer(value, 0, 0)
    #define __pyx_atomic_pointer_exchange(value, new_value) _InterlockedExchangePointer(value, (__pyx_atomic_ptr_type)new_value)
    #ifdef __PYX_DEBUG_ATOMICS
        #pragma message ("Using MSVC atomics")
    #endif
#else
    #undef CYTHON_ATOMICS
    #define CYTHON_ATOMICS 0
    #ifdef __PYX_DEBUG_ATOMICS
        #warning "Not using atomics"
    #endif
#endif
#if CYTHON_ATOMICS
    #define __pyx_add_acquisition_count(memview)\
             __pyx_atomic_incr_relaxed(__pyx_get_slice_count_pointer(memview))
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_atomic_decr_acq_rel(__pyx_get_slice_count_pointer(memview))
#else
    #define __pyx_add_acquisition_count(memview)\
            __pyx_add_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
    #define __pyx_sub_acquisition_count(memview)\
            __pyx_sub_acquisition_count_locked(__pyx_get_slice_count_pointer(memview), memview->lock)
#endif

/* IncludeStructmemberH.proto */
#include <structmember.h>

/* CriticalSections.proto */
#if !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
#define __Pyx_PyCriticalSection void*
#define __Pyx_PyCriticalSection2 void*
#define __Pyx_PyCriticalSection_Begin1(cs, arg) (void)cs
#define __Pyx_PyCriticalSection_Begin2(cs, arg1, arg2) (void)cs
#define __Pyx_PyCriticalSection_End1(cs)
#define __Pyx_PyCriticalSection_End2(cs)
#else
#define __Pyx_PyCriticalSection PyCriticalSection
#define __Pyx_PyCriticalSection2 PyCriticalSection2
#define __Pyx_PyCriticalSection_Begin1 PyCriticalSection_Begin
#define __Pyx_PyCriticalSection_Begin2 PyCriticalSection2_Begin
#define __Pyx_PyCriticalSection_End1 PyCriticalSection_End
#define __Pyx_PyCriticalSection_End2 PyCriticalSection2_End
#endif
#if PY_VERSION_HEX < 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_BEGIN_CRITICAL_SECTION(o) {
#define __Pyx_END_CRITICAL_SECTION() }
#else
#define __Pyx_BEGIN_CRITICAL_SECTION Py_BEGIN_CRITICAL_SECTION
#define __Pyx_END_CRITICAL_SECTION Py_END_CRITICAL_SECTION
#endif

/* #### Code section: numeric_typedefs ### */

/* "CCore.pxd":21
 * from libcpp cimport bool
 * 
 * ctypedef unsigned long int size_t             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "vector_types.h":
*/
typedef unsigned long __pyx_t_5CCore_size_t;
/* #### Code section: complex_type_declarations ### */
/* #### Code section: type_declarations ### */

/*--- Type declarations ---*/
#ifndef _ARRAYARRAY_H
struct arrayobject;
typedef struct arrayobject arrayobject;
#endif
struct __pyx_obj_6yirage_4core_DTensor;
struct __pyx_obj_6yirage_4core_STensor;
struct __pyx_obj_6yirage_4core_CyKNOperator;
struct __pyx_obj_6yirage_4core_CyKNCustomizedOp;
struct __pyx_obj_6yirage_4core_CyTBOperator;
struct __pyx_obj_6yirage_4core_CyTBInputOp;
struct __pyx_obj_6yirage_4core_CyTBOutputOp;
struct __pyx_obj_6yirage_4core_CyKNGraph;
struct __pyx_obj_6yirage_4core_CyTBGraph;
struct __pyx_opt_args_7cpython_11contextvars_get_value;
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default;

/* "cpython/contextvars.pxd":116
 * 
 * @_cython.c_compile_guard("!CYTHON_COMPILING_IN_LIMITED_API")
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
*/
struct __pyx_opt_args_7cpython_11contextvars_get_value {
  int __pyx_n;
  PyObject *default_value;
};

/* "cpython/contextvars.pxd":134
 * 
 * @_cython.c_compile_guard("!CYTHON_COMPILING_IN_LIMITED_API")
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
*/
struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default {
  int __pyx_n;
  PyObject *default_value;
};

/* "yirage/_cython/core.pyx":397
 *          return None
 * 
 * cdef class DTensor:             # <<<<<<<<<<<<<<
 *     cdef CppDTensor* c_ptr # Hold a Tensor instance
 * 
*/
struct __pyx_obj_6yirage_4core_DTensor {
  PyObject_HEAD
  struct __pyx_vtabstruct_6yirage_4core_DTensor *__pyx_vtab;
  struct yirage::kernel::DTensor *c_ptr;
};


/* "yirage/_cython/core.pyx":450
 *             return None
 * 
 * cdef class STensor:             # <<<<<<<<<<<<<<
 *     cdef CppSTensor* c_ptr # Hold a CppSTensor instance
 * 
*/
struct __pyx_obj_6yirage_4core_STensor {
  PyObject_HEAD
  struct __pyx_vtabstruct_6yirage_4core_STensor *__pyx_vtab;
  yirage::threadblock::STensor *c_ptr;
};


/* "yirage/_cython/core.pyx":500
 *             return None
 * 
 * cdef class CyKNOperator:             # <<<<<<<<<<<<<<
 *     cdef CppKNOperator* c_ptr # Hold a CppKNOperator instance
 * 
*/
struct __pyx_obj_6yirage_4core_CyKNOperator {
  PyObject_HEAD
  struct __pyx_vtabstruct_6yirage_4core_CyKNOperator *__pyx_vtab;
  yirage::kernel::KNOperator *c_ptr;
};


/* "yirage/_cython/core.pyx":539
 *         self._set_operator(op)
 * 
 * cdef class CyKNCustomizedOp(CyKNOperator):             # <<<<<<<<<<<<<<
 *     cdef CppKNCustomizedOp* c_customized_ptr
 * 
*/
struct __pyx_obj_6yirage_4core_CyKNCustomizedOp {
  struct __pyx_obj_6yirage_4core_CyKNOperator __pyx_base;
  yirage::kernel::KNCustomizedOp *c_customized_ptr;
};


/* "yirage/_cython/core.pyx":558
 *         return cybgraph
 * 
 * cdef class CyTBOperator:             # <<<<<<<<<<<<<<
 *     cdef CppTBOperator* c_ptr # Hold a CppTBOperator instance
 * 
*/
struct __pyx_obj_6yirage_4core_CyTBOperator {
  PyObject_HEAD
  struct __pyx_vtabstruct_6yirage_4core_CyTBOperator *__pyx_vtab;
  yirage::threadblock::TBOperator *c_ptr;
};


/* "yirage/_cython/core.pyx":597
 *         self._set_operator(op)
 * 
 * cdef class CyTBInputOp(CyTBOperator):             # <<<<<<<<<<<<<<
 *     cdef CppTBInputOp* c_input_ptr
 * 
*/
struct __pyx_obj_6yirage_4core_CyTBInputOp {
  struct __pyx_obj_6yirage_4core_CyTBOperator __pyx_base;
  yirage::threadblock::TBInputOp *c_input_ptr;
};


/* "yirage/_cython/core.pyx":633
 *                 return self.c_input_ptr.get_dtensor_guid()
 * 
 * cdef class CyTBOutputOp(CyTBOperator):             # <<<<<<<<<<<<<<
 *     cdef CppTBOutputOp* c_output_ptr
 * 
*/
struct __pyx_obj_6yirage_4core_CyTBOutputOp {
  struct __pyx_obj_6yirage_4core_CyTBOperator __pyx_base;
  yirage::threadblock::TBOutputOp *c_output_ptr;
};


/* "yirage/_cython/core.pyx":669
 *                 return self.c_output_ptr.get_dtensor_guid()
 * 
 * cdef class CyKNGraph:             # <<<<<<<<<<<<<<
 *     cdef CppKNGraph *p_kgraph #Hold a CppKNGraph instance
 * 
*/
struct __pyx_obj_6yirage_4core_CyKNGraph {
  PyObject_HEAD
  yirage::kernel::Graph *p_kgraph;
};


/* "yirage/_cython/core.pyx":969
 * 
 * 
 * cdef class CyTBGraph:             # <<<<<<<<<<<<<<
 *     cdef CppTBGraph *p_bgraph #Hold a CppTBGraph instance
 * 
*/
struct __pyx_obj_6yirage_4core_CyTBGraph {
  PyObject_HEAD
  yirage::threadblock::Graph *p_bgraph;
};



/* "yirage/_cython/core.pyx":397
 *          return None
 * 
 * cdef class DTensor:             # <<<<<<<<<<<<<<
 *     cdef CppDTensor* c_ptr # Hold a Tensor instance
 * 
*/

struct __pyx_vtabstruct_6yirage_4core_DTensor {
  PyObject *(*_set_tensor)(struct __pyx_obj_6yirage_4core_DTensor *, PyObject *);
};
static struct __pyx_vtabstruct_6yirage_4core_DTensor *__pyx_vtabptr_6yirage_4core_DTensor;
static CYTHON_INLINE PyObject *__pyx_f_6yirage_4core_7DTensor__set_tensor(struct __pyx_obj_6yirage_4core_DTensor *, PyObject *);


/* "yirage/_cython/core.pyx":450
 *             return None
 * 
 * cdef class STensor:             # <<<<<<<<<<<<<<
 *     cdef CppSTensor* c_ptr # Hold a CppSTensor instance
 * 
*/

struct __pyx_vtabstruct_6yirage_4core_STensor {
  PyObject *(*_set_tensor)(struct __pyx_obj_6yirage_4core_STensor *, PyObject *);
};
static struct __pyx_vtabstruct_6yirage_4core_STensor *__pyx_vtabptr_6yirage_4core_STensor;
static CYTHON_INLINE PyObject *__pyx_f_6yirage_4core_7STensor__set_tensor(struct __pyx_obj_6yirage_4core_STensor *, PyObject *);


/* "yirage/_cython/core.pyx":500
 *             return None
 * 
 * cdef class CyKNOperator:             # <<<<<<<<<<<<<<
 *     cdef CppKNOperator* c_ptr # Hold a CppKNOperator instance
 * 
*/

struct __pyx_vtabstruct_6yirage_4core_CyKNOperator {
  PyObject *(*_set_operator)(struct __pyx_obj_6yirage_4core_CyKNOperator *, PyObject *);
};
static struct __pyx_vtabstruct_6yirage_4core_CyKNOperator *__pyx_vtabptr_6yirage_4core_CyKNOperator;
static CYTHON_INLINE PyObject *__pyx_f_6yirage_4core_12CyKNOperator__set_operator(struct __pyx_obj_6yirage_4core_CyKNOperator *, PyObject *);


/* "yirage/_cython/core.pyx":539
 *         self._set_operator(op)
 * 
 * cdef class CyKNCustomizedOp(CyKNOperator):             # <<<<<<<<<<<<<<
 *     cdef CppKNCustomizedOp* c_customized_ptr
 * 
*/

struct __pyx_vtabstruct_6yirage_4core_CyKNCustomizedOp {
  struct __pyx_vtabstruct_6yirage_4core_CyKNOperator __pyx_base;
};
static struct __pyx_vtabstruct_6yirage_4core_CyKNCustomizedOp *__pyx_vtabptr_6yirage_4core_CyKNCustomizedOp;


/* "yirage/_cython/core.pyx":558
 *         return cybgraph
 * 
 * cdef class CyTBOperator:             # <<<<<<<<<<<<<<
 *     cdef CppTBOperator* c_ptr # Hold a CppTBOperator instance
 * 
*/

struct __pyx_vtabstruct_6yirage_4core_CyTBOperator {
  PyObject *(*_set_operator)(struct __pyx_obj_6yirage_4core_CyTBOperator *, PyObject *);
};
static struct __pyx_vtabstruct_6yirage_4core_CyTBOperator *__pyx_vtabptr_6yirage_4core_CyTBOperator;
static CYTHON_INLINE PyObject *__pyx_f_6yirage_4core_12CyTBOperator__set_operator(struct __pyx_obj_6yirage_4core_CyTBOperator *, PyObject *);


/* "yirage/_cython/core.pyx":597
 *         self._set_operator(op)
 * 
 * cdef class CyTBInputOp(CyTBOperator):             # <<<<<<<<<<<<<<
 *     cdef CppTBInputOp* c_input_ptr
 * 
*/

struct __pyx_vtabstruct_6yirage_4core_CyTBInputOp {
  struct __pyx_vtabstruct_6yirage_4core_CyTBOperator __pyx_base;
};
static struct __pyx_vtabstruct_6yirage_4core_CyTBInputOp *__pyx_vtabptr_6yirage_4core_CyTBInputOp;


/* "yirage/_cython/core.pyx":633
 *                 return self.c_input_ptr.get_dtensor_guid()
 * 
 * cdef class CyTBOutputOp(CyTBOperator):             # <<<<<<<<<<<<<<
 *     cdef CppTBOutputOp* c_output_ptr
 * 
*/

struct __pyx_vtabstruct_6yirage_4core_CyTBOutputOp {
  struct __pyx_vtabstruct_6yirage_4core_CyTBOperator __pyx_base;
};
static struct __pyx_vtabstruct_6yirage_4core_CyTBOutputOp *__pyx_vtabptr_6yirage_4core_CyTBOutputOp;
/* #### Code section: utility_code_proto ### */

/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, Py_ssize_t);
    void (*DECREF)(void*, PyObject*, Py_ssize_t);
    void (*GOTREF)(void*, PyObject*, Py_ssize_t);
    void (*GIVEREF)(void*, PyObject*, Py_ssize_t);
    void* (*SetupContext)(const char*, Py_ssize_t, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), (__LINE__), (__FILE__));\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContextNogil() {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __Pyx_RefNannyFinishContext();\
              PyGILState_Release(__pyx_gilstate_save);\
          }
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), (__LINE__))
  #define __Pyx_XINCREF(r)  do { if((r) == NULL); else {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) == NULL); else {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) == NULL); else {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) == NULL); else {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContextNogil()
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_Py_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; Py_XDECREF(tmp);\
    } while (0)
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyErrExceptionMatches.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* PyThreadStateGet.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = __Pyx_PyThreadState_Current;
#if PY_VERSION_HEX >= 0x030C00A6
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->current_exception != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->current_exception ? (PyObject*) Py_TYPE(__pyx_tstate->current_exception) : (PyObject*) NULL)
#else
#define __Pyx_PyErr_Occurred()  (__pyx_tstate->curexc_type != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  (__pyx_tstate->curexc_type)
#endif
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#define __Pyx_PyErr_Occurred()  (PyErr_Occurred() != NULL)
#define __Pyx_PyErr_CurrentExceptionType()  PyErr_Occurred()
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_FAST_THREAD_STATE
#define __Pyx_PyErr_Clear() __Pyx_ErrRestore(NULL, NULL, NULL)
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A6
#define __Pyx_PyErr_SetNone(exc) (Py_INCREF(exc), __Pyx_ErrRestore((exc), NULL, NULL))
#else
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#endif
#else
#define __Pyx_PyErr_Clear() PyErr_Clear()
#define __Pyx_PyErr_SetNone(exc) PyErr_SetNone(exc)
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestoreInState(tstate, type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchInState(tstate, type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* PyObjectGetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name);
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* PyObjectGetAttrStrNoError.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name);

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* TupleAndListFromArray.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n);
#endif
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject* __Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n);
#endif

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* fastcall.proto */
#if CYTHON_AVOID_BORROWED_REFS
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_PySequence_ITEM(args, i)
#elif CYTHON_ASSUME_SAFE_MACROS
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_NewRef(__Pyx_PyTuple_GET_ITEM(args, i))
#else
    #define __Pyx_ArgRef_VARARGS(args, i) __Pyx_XNewRef(PyTuple_GetItem(args, i))
#endif
#define __Pyx_NumKwargs_VARARGS(kwds) PyDict_Size(kwds)
#define __Pyx_KwValues_VARARGS(args, nargs) NULL
#define __Pyx_GetKwValue_VARARGS(kw, kwvalues, s) __Pyx_PyDict_GetItemStrWithError(kw, s)
#define __Pyx_KwargsAsDict_VARARGS(kw, kwvalues) PyDict_Copy(kw)
#if CYTHON_METH_FASTCALL
    #define __Pyx_ArgRef_FASTCALL(args, i) __Pyx_NewRef(args[i])
    #define __Pyx_NumKwargs_FASTCALL(kwds) __Pyx_PyTuple_GET_SIZE(kwds)
    #define __Pyx_KwValues_FASTCALL(args, nargs) ((args) + (nargs))
    static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s);
  #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
    CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues);
  #else
    #define __Pyx_KwargsAsDict_FASTCALL(kw, kwvalues) _PyStack_AsDict(kwvalues, kw)
  #endif
#else
    #define __Pyx_ArgRef_FASTCALL __Pyx_ArgRef_VARARGS
    #define __Pyx_NumKwargs_FASTCALL __Pyx_NumKwargs_VARARGS
    #define __Pyx_KwValues_FASTCALL __Pyx_KwValues_VARARGS
    #define __Pyx_GetKwValue_FASTCALL __Pyx_GetKwValue_VARARGS
    #define __Pyx_KwargsAsDict_FASTCALL __Pyx_KwargsAsDict_VARARGS
#endif
#define __Pyx_ArgsSlice_VARARGS(args, start, stop) PyTuple_GetSlice(args, start, stop)
#if CYTHON_METH_FASTCALL || (CYTHON_COMPILING_IN_CPYTHON && CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) __Pyx_PyTuple_FromArray(args + start, stop - start)
#else
#define __Pyx_ArgsSlice_FASTCALL(args, start, stop) PyTuple_GetSlice(args, start, stop)
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static CYTHON_INLINE int __Pyx_ParseKeywords(
    PyObject *kwds, PyObject *const *kwvalues, PyObject ** const argnames[],
    PyObject *kwds2, PyObject *values[],
    Py_ssize_t num_pos_args, Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs
);

/* CallCFunction.proto */
#define __Pyx_CallCFunction(cfunc, self, args)\
    ((PyCFunction)(void(*)(void))(cfunc)->func)(self, args)
#define __Pyx_CallCFunctionWithKeywords(cfunc, self, args, kwargs)\
    ((PyCFunctionWithKeywords)(void(*)(void))(cfunc)->func)(self, args, kwargs)
#define __Pyx_CallCFunctionFast(cfunc, self, args, nargs)\
    ((__Pyx_PyCFunctionFast)(void(*)(void))(PyCFunction)(cfunc)->func)(self, args, nargs)
#define __Pyx_CallCFunctionFastWithKeywords(cfunc, self, args, nargs, kwnames)\
    ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))(PyCFunction)(cfunc)->func)(self, args, nargs, kwnames)

/* PyFunctionFastCall.proto */
#if CYTHON_FAST_PYCALL
#if !CYTHON_VECTORCALL
#define __Pyx_PyFunction_FastCall(func, args, nargs)\
    __Pyx_PyFunction_FastCallDict((func), (args), (nargs), NULL)
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject *const *args, Py_ssize_t nargs, PyObject *kwargs);
#endif
#define __Pyx_BUILD_ASSERT_EXPR(cond)\
    (sizeof(char [1 - 2*!(cond)]) - 1)
#ifndef Py_MEMBER_SIZE
#define Py_MEMBER_SIZE(type, member) sizeof(((type *)0)->member)
#endif
#if !CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03080000
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()
  #define __Pyx_PyFrame_GetLocalsplus(frame)  ((frame)->f_localsplus)
#else
  static size_t __pyx_pyframe_localsplus_offset = 0;
  #include "frameobject.h"
  #define __Pxy_PyFrame_Initialize_Offsets()\
    ((void)__Pyx_BUILD_ASSERT_EXPR(sizeof(PyFrameObject) == offsetof(PyFrameObject, f_localsplus) + Py_MEMBER_SIZE(PyFrameObject, f_localsplus)),\
     (void)(__pyx_pyframe_localsplus_offset = ((size_t)PyFrame_Type.tp_basicsize) - Py_MEMBER_SIZE(PyFrameObject, f_localsplus)))
  #define __Pyx_PyFrame_GetLocalsplus(frame)\
    (assert(__pyx_pyframe_localsplus_offset), (PyObject **)(((char *)(frame)) + __pyx_pyframe_localsplus_offset))
#endif
#endif
#endif

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectFastCall.proto */
#define __Pyx_PyObject_FastCall(func, args, nargs)  __Pyx_PyObject_FastCallDict(func, args, (size_t)(nargs), NULL)
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject * const*args, size_t nargs, PyObject *kwargs);

/* UnpackUnboundCMethod.proto */
typedef struct {
    PyObject *type;
    PyObject **method_name;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && CYTHON_ATOMICS
    __pyx_atomic_int_type initialized;
#endif
    PyCFunction func;
    PyObject *method;
    int flag;
} __Pyx_CachedCFunction;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
static CYTHON_INLINE int __Pyx_CachedCFunction_GetAndSetInitializing(__Pyx_CachedCFunction *cfunc) {
#if !CYTHON_ATOMICS
    return 1;
#else
    __pyx_nonatomic_int_type expected = 0;
    if (__pyx_atomic_int_cmp_exchange(&cfunc->initialized, &expected, 1)) {
        return 0;
    }
    return expected;
#endif
}
static CYTHON_INLINE void __Pyx_CachedCFunction_SetFinishedInitializing(__Pyx_CachedCFunction *cfunc) {
#if CYTHON_ATOMICS
    __pyx_atomic_store(&cfunc->initialized, 2);
#endif
}
#else
#define __Pyx_CachedCFunction_GetAndSetInitializing(cfunc) 2
#define __Pyx_CachedCFunction_SetFinishedInitializing(cfunc)
#endif

/* CallUnboundCMethod2.proto */
CYTHON_UNUSED
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2);
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2);
#else
#define __Pyx_CallUnboundCMethod2(cfunc, self, arg1, arg2)  __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2)
#endif

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectDelAttr.proto */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030d0000
#define __Pyx_PyObject_DelAttr(o, n) PyObject_SetAttr(o, n, NULL)
#else
#define __Pyx_PyObject_DelAttr(o, n) PyObject_DelAttr(o, n)
#endif

/* PyObjectSetAttrStr.proto */
#if CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o, n, NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value);
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   __Pyx_PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* AssertionsEnabled.proto */
#if CYTHON_COMPILING_IN_LIMITED_API  ||  (CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030C0000)
  static int __pyx_assertions_enabled_flag;
  #define __pyx_assertions_enabled() (__pyx_assertions_enabled_flag)
  static int __Pyx_init_assertions_enabled(void) {
    PyObject *builtins, *debug, *debug_str;
    int flag;
    builtins = PyEval_GetBuiltins();
    if (!builtins) goto bad;
    debug_str = PyUnicode_FromStringAndSize("__debug__", 9);
    if (!debug_str) goto bad;
    debug = PyObject_GetItem(builtins, debug_str);
    Py_DECREF(debug_str);
    if (!debug) goto bad;
    flag = PyObject_IsTrue(debug);
    Py_DECREF(debug);
    if (flag == -1) goto bad;
    __pyx_assertions_enabled_flag = flag;
    return 0;
  bad:
    __pyx_assertions_enabled_flag = 1;
    return -1;
  }
#else
  #define __Pyx_init_assertions_enabled()  (0)
  #define __pyx_assertions_enabled()  (!Py_OptimizeFlag)
#endif

/* PyDictVersioning.proto */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
#define __PYX_DICT_VERSION_INIT  ((PY_UINT64_T) -1)
#define __PYX_GET_DICT_VERSION(dict)  (((PyDictObject*)(dict))->ma_version_tag)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)\
    (version_var) = __PYX_GET_DICT_VERSION(dict);\
    (cache_var) = (value);
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP) {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    if (likely(__PYX_GET_DICT_VERSION(DICT) == __pyx_dict_version)) {\
        (VAR) = __pyx_dict_cached_value;\
    } else {\
        (VAR) = __pyx_dict_cached_value = (LOOKUP);\
        __pyx_dict_version = __PYX_GET_DICT_VERSION(DICT);\
    }\
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj);
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj);
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version);
#else
#define __PYX_GET_DICT_VERSION(dict)  (0)
#define __PYX_UPDATE_DICT_CACHE(dict, value, cache_var, version_var)
#define __PYX_PY_DICT_LOOKUP_IF_MODIFIED(VAR, DICT, LOOKUP)  (VAR) = (LOOKUP);
#endif

/* GetModuleGlobalName.proto */
#if CYTHON_USE_DICT_VERSIONS
#define __Pyx_GetModuleGlobalName(var, name)  do {\
    static PY_UINT64_T __pyx_dict_version = 0;\
    static PyObject *__pyx_dict_cached_value = NULL;\
    (var) = (likely(__pyx_dict_version == __PYX_GET_DICT_VERSION(__pyx_mstate_global->__pyx_d))) ?\
        (likely(__pyx_dict_cached_value) ? __Pyx_NewRef(__pyx_dict_cached_value) : __Pyx_GetBuiltinName(name)) :\
        __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  do {\
    PY_UINT64_T __pyx_dict_version;\
    PyObject *__pyx_dict_cached_value;\
    (var) = __Pyx__GetModuleGlobalName(name, &__pyx_dict_version, &__pyx_dict_cached_value);\
} while(0)
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value);
#else
#define __Pyx_GetModuleGlobalName(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
#define __Pyx_GetModuleGlobalNameUncached(var, name)  (var) = __Pyx__GetModuleGlobalName(name)
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name);
#endif

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* PyObjectFastCallMethod.proto */
#if CYTHON_VECTORCALL && PY_VERSION_HEX >= 0x03090000
#define __Pyx_PyObject_FastCallMethod(name, args, nargsf) PyObject_VectorcallMethod(name, args, nargsf, NULL)
#else
static PyObject *__Pyx_PyObject_FastCallMethod(PyObject *name, PyObject *const *args, size_t nargsf);
#endif

/* PyObject_Unicode.proto */
#define __Pyx_PyObject_Unicode(obj)\
    (likely(PyUnicode_CheckExact(obj)) ? __Pyx_NewRef(obj) : PyObject_Str(obj))

/* PyObjectFormatSimple.proto */
#if CYTHON_COMPILING_IN_PYPY
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#elif CYTHON_USE_TYPE_SLOTS
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        likely(PyLong_CheckExact(s)) ? PyLong_Type.tp_repr(s) :\
        likely(PyFloat_CheckExact(s)) ? PyFloat_Type.tp_repr(s) :\
        PyObject_Format(s, f))
#else
    #define __Pyx_PyObject_FormatSimple(s, f) (\
        likely(PyUnicode_CheckExact(s)) ? (Py_INCREF(s), s) :\
        PyObject_Format(s, f))
#endif

/* RejectKeywords.proto */
static void __Pyx_RejectKeywords(const char* function_name, PyObject *kwds);

/* ListAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectVectorCallKwBuilder.proto */
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#if CYTHON_VECTORCALL
#if PY_VERSION_HEX >= 0x03090000
#define __Pyx_Object_Vectorcall_CallFromBuilder PyObject_Vectorcall
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder _PyObject_Vectorcall
#endif
#define __Pyx_MakeVectorcallBuilderKwds(n) PyTuple_New(n)
static int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n);
static int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n);
#else
#define __Pyx_Object_Vectorcall_CallFromBuilder __Pyx_PyObject_FastCallDict
#define __Pyx_MakeVectorcallBuilderKwds(n) __Pyx_PyDict_NewPresized(n)
#define __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n) PyDict_SetItem(builder, key, value)
#define __Pyx_VectorcallBuilder_AddArgStr(key, value, builder, args, n) PyDict_SetItemString(builder, key, value)
#endif

/* ArgTypeTest.proto */
#define __Pyx_ArgTypeTest(obj, type, none_allowed, name, exact)\
    ((likely(__Pyx_IS_TYPE(obj, type) | (none_allowed && (obj == Py_None)))) ? 1 :\
        __Pyx__ArgTypeTest(obj, type, name, exact))
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact);

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck, has_gil)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* ListCompAppend.proto */
#if CYTHON_USE_PYLIST_INTERNALS && CYTHON_ASSUME_SAFE_MACROS
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        #if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000
        L->ob_item[len] = x;
        #else
        PyList_SET_ITEM(list, len, x);
        #endif
        __Pyx_SET_SIZE(list, len + 1);
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* MoveIfSupported.proto */
#if CYTHON_USE_CPP_STD_MOVE
  #include <utility>
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) std::move(x)
#else
  #define __PYX_STD_MOVE_IF_SUPPORTED(x) x
#endif

/* IncludeCppStringH.proto */
#include <string>

/* decode_c_string_utf16.proto */
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 0;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16LE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = -1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}
static CYTHON_INLINE PyObject *__Pyx_PyUnicode_DecodeUTF16BE(const char *s, Py_ssize_t size, const char *errors) {
    int byteorder = 1;
    return PyUnicode_DecodeUTF16(s, size, errors, &byteorder);
}

/* decode_c_bytes.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors));

/* decode_cpp_string.proto */
static CYTHON_INLINE PyObject* __Pyx_decode_cpp_string(
         std::string cppstring, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    return __Pyx_decode_c_bytes(
        cppstring.data(), cppstring.size(), start, stop, encoding, errors, decode_func);
}

/* RaiseKeywordRequired.proto */
static void __Pyx_RaiseKeywordRequired(const char* func_name, PyObject* kw_name);

/* SetPackagePathFromImportLib.proto */
#if !CYTHON_PEP489_MULTI_PHASE_INIT
static int __Pyx_SetPackagePathFromImportLib(PyObject *module_name);
#else
#define __Pyx_SetPackagePathFromImportLib(a) 0
#endif

/* LimitedApiGetTypeDict.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_GetTypeDict(PyTypeObject *tp);
#endif

/* SetItemOnTypeDict.proto */
static int __Pyx__SetItemOnTypeDict(PyTypeObject *tp, PyObject *k, PyObject *v);
#define __Pyx_SetItemOnTypeDict(tp, k, v) __Pyx__SetItemOnTypeDict((PyTypeObject*)tp, k, v)

/* FixUpExtensionType.proto */
static CYTHON_INLINE int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type);

/* PyObjectCallNoArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyObjectGetMethod.proto */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method);

/* PyObjectCallMethod0.proto */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name);

/* ValidateBasesTuple.proto */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases);
#endif

/* PyType_Ready.proto */
CYTHON_UNUSED static int __Pyx_PyType_Ready(PyTypeObject *t);

/* SetVTable.proto */
static int __Pyx_SetVtable(PyTypeObject* typeptr , void* vtable);

/* GetVTable.proto */
static void* __Pyx_GetVtable(PyTypeObject *type);

/* MergeVTables.proto */
static int __Pyx_MergeVtables(PyTypeObject *type);

/* DelItemOnTypeDict.proto */
static int __Pyx__DelItemOnTypeDict(PyTypeObject *tp, PyObject *k);
#define __Pyx_DelItemOnTypeDict(tp, k) __Pyx__DelItemOnTypeDict((PyTypeObject*)tp, k)

/* SetupReduce.proto */
static int __Pyx_setup_reduce(PyObject* type_obj);

/* TypeImport.proto */
#ifndef __PYX_HAVE_RT_ImportType_proto_3_1_3
#define __PYX_HAVE_RT_ImportType_proto_3_1_3
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L
#include <stdalign.h>
#endif
#if (defined (__STDC_VERSION__) && __STDC_VERSION__ >= 201112L) || __cplusplus >= 201103L
#define __PYX_GET_STRUCT_ALIGNMENT_3_1_3(s) alignof(s)
#else
#define __PYX_GET_STRUCT_ALIGNMENT_3_1_3(s) sizeof(void*)
#endif
enum __Pyx_ImportType_CheckSize_3_1_3 {
   __Pyx_ImportType_CheckSize_Error_3_1_3 = 0,
   __Pyx_ImportType_CheckSize_Warn_3_1_3 = 1,
   __Pyx_ImportType_CheckSize_Ignore_3_1_3 = 2
};
static PyTypeObject *__Pyx_ImportType_3_1_3(PyObject* module, const char *module_name, const char *class_name, size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_1_3 check_size);
#endif

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportDottedModule.proto */
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple);
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple);

/* ListPack.proto */
static PyObject *__Pyx_PyList_Pack(Py_ssize_t n, ...);

/* SetNameInClass.proto */
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030d0000
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? _PyDict_SetItem_KnownHash(ns, name, value, ((PyASCIIObject *) name)->hash) : PyObject_SetItem(ns, name, value))
#elif CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_SetNameInClass(ns, name, value)\
    (likely(PyDict_CheckExact(ns)) ? PyDict_SetItem(ns, name, value) : PyObject_SetItem(ns, name, value))
#else
#define __Pyx_SetNameInClass(ns, name, value)  PyObject_SetItem(ns, name, value)
#endif

/* FetchSharedCythonModule.proto */
static PyObject *__Pyx_FetchSharedCythonABIModule(void);

/* dict_setdefault.proto */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value, int is_safe_type);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonTypeFromSpec(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases);

/* CommonTypesMetaclass.proto */
static int __pyx_CommonTypesMetaclass_init(PyObject *module);
#define __Pyx_CommonTypesMetaclass_USED

/* CallTypeTraverse.proto */
#if !CYTHON_USE_TYPE_SPECS || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x03090000)
#define __Pyx_call_type_traverse(o, always_call, visit, arg) 0
#else
static int __Pyx_call_type_traverse(PyObject *o, int always_call, visitproc visit, void *arg);
#endif

/* PyMethodNew.proto */
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ);

/* PyVectorcallFastCallDict.proto */
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw);
#endif

/* CythonFunctionShared.proto */
#define __Pyx_CyFunction_USED
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CYFUNCTION_COROUTINE     0x08
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
  #define __Pyx_CyFunction_GetClassObj(f)\
      (((__pyx_CyFunctionObject *) (f))->func_classobj)
#else
  #define __Pyx_CyFunction_GetClassObj(f)\
      ((PyObject*) ((PyCMethodObject *) (f))->mm_class)
#endif
#define __Pyx_CyFunction_SetClassObj(f, classobj)\
    __Pyx__CyFunction_SetClassObj((__pyx_CyFunctionObject *) (f), (classobj))
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject_HEAD
    PyObject *func;
#elif PY_VERSION_HEX < 0x030900B1
    PyCFunctionObject func;
#else
    PyCMethodObject func;
#endif
#if CYTHON_BACKPORT_VECTORCALL ||\
        (CYTHON_COMPILING_IN_LIMITED_API && CYTHON_METH_FASTCALL)
    __pyx_vectorcallfunc func_vectorcall;
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    PyObject *func_classobj;
#endif
    PyObject *defaults;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
    PyObject *func_is_coroutine;
} __pyx_CyFunctionObject;
#undef __Pyx_CyOrPyCFunction_Check
#define __Pyx_CyFunction_Check(obj)  __Pyx_TypeCheck(obj, __pyx_mstate_global->__pyx_CyFunctionType)
#define __Pyx_CyOrPyCFunction_Check(obj)  __Pyx_TypeCheck2(obj, __pyx_mstate_global->__pyx_CyFunctionType, &PyCFunction_Type)
#define __Pyx_CyFunction_CheckExact(obj)  __Pyx_IS_TYPE(obj, __pyx_mstate_global->__pyx_CyFunctionType)
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void));
#undef __Pyx_IsSameCFunction
#define __Pyx_IsSameCFunction(func, cfunc)   __Pyx__IsSameCyOrCFunction(func, cfunc)
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject* op, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj);
static CYTHON_INLINE PyObject *__Pyx_CyFunction_InitDefaults(PyObject *func,
                                                         PyTypeObject *defaults_type);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(PyObject *module);
#if CYTHON_METH_FASTCALL
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames);
#if CYTHON_BACKPORT_VECTORCALL || CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_func_vectorcall(f) (((__pyx_CyFunctionObject*)f)->func_vectorcall)
#else
#define __Pyx_CyFunction_func_vectorcall(f) (((PyCFunctionObject*)f)->vectorcall)
#endif
#endif

/* CythonFunction.proto */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *closure,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* PyObjectCall2Args.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2);

/* PyObjectLookupSpecial.proto */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
#define __Pyx_PyObject_LookupSpecialNoError(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 0)
#define __Pyx_PyObject_LookupSpecial(obj, attr_name)  __Pyx__PyObject_LookupSpecial(obj, attr_name, 1)
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error);
#else
#define __Pyx_PyObject_LookupSpecialNoError(o,n) __Pyx_PyObject_GetAttrStrNoError(o,n)
#define __Pyx_PyObject_LookupSpecial(o,n) __Pyx_PyObject_GetAttrStr(o,n)
#endif

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* CLineInTraceback.proto */
#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line);
#else
#define __Pyx_CLineForTraceback(tstate, c_line)  (((CYTHON_CLINE_IN_TRACEBACK)) ? c_line : 0)
#endif

/* CodeObjectCache.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject __Pyx_CachedCodeObjectType;
#else
typedef PyCodeObject __Pyx_CachedCodeObjectType;
#endif
typedef struct {
    __Pyx_CachedCodeObjectType* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_int_type accessor_count;
  #endif
};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* ArrayAPI.proto */
#ifndef _ARRAYARRAY_H
#define _ARRAYARRAY_H
typedef struct arraydescr {
    int typecode;
    int itemsize;
    PyObject * (*getitem)(struct arrayobject *, Py_ssize_t);
    int (*setitem)(struct arrayobject *, Py_ssize_t, PyObject *);
    char *formats;
} arraydescr;
struct arrayobject {
    PyObject_HEAD
    Py_ssize_t ob_size;
    union {
        char *ob_item;
        float *as_floats;
        double *as_doubles;
        int *as_ints;
        unsigned int *as_uints;
        unsigned char *as_uchars;
        signed char *as_schars;
        char *as_chars;
        unsigned long *as_ulongs;
        long *as_longs;
        unsigned long long *as_ulonglongs;
        long long *as_longlongs;
        short *as_shorts;
        unsigned short *as_ushorts;
        #if PY_VERSION_HEX >= 0x030d0000
        Py_DEPRECATED(3.13)
        #endif
            wchar_t *as_pyunicodes;
        void *as_voidptr;
    } data;
    Py_ssize_t allocated;
    struct arraydescr *ob_descr;
    PyObject *weakreflist;
    int ob_exports;
};
#ifndef NO_NEWARRAY_INLINE
static CYTHON_INLINE PyObject * newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr) {
    arrayobject *op;
    size_t nbytes;
    if (size < 0) {
        PyErr_BadInternalCall();
        return NULL;
    }
    nbytes = size * descr->itemsize;
    if (nbytes / descr->itemsize != (size_t)size) {
        return PyErr_NoMemory();
    }
    op = (arrayobject *) type->tp_alloc(type, 0);
    if (op == NULL) {
        return NULL;
    }
    op->ob_descr = descr;
    op->allocated = size;
    op->weakreflist = NULL;
    __Pyx_SET_SIZE(op, size);
    if (size <= 0) {
        op->data.ob_item = NULL;
    }
    else {
        op->data.ob_item = PyMem_NEW(char, nbytes);
        if (op->data.ob_item == NULL) {
            Py_DECREF(op);
            return PyErr_NoMemory();
        }
    }
    return (PyObject *) op;
}
#else
PyObject* newarrayobject(PyTypeObject *type, Py_ssize_t size,
    struct arraydescr *descr);
#endif
static CYTHON_INLINE int resize(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    PyMem_Resize(items, char, (size_t)(n * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    __Pyx_SET_SIZE(self, n);
    self->allocated = n;
    return 0;
}
static CYTHON_INLINE int resize_smart(arrayobject *self, Py_ssize_t n) {
    void *items = (void*) self->data.ob_item;
    Py_ssize_t newsize;
    if (n < self->allocated && n*4 > self->allocated) {
        __Pyx_SET_SIZE(self, n);
        return 0;
    }
    newsize = n + (n / 2) + 1;
    if (newsize <= n) {
        PyErr_NoMemory();
        return -1;
    }
    PyMem_Resize(items, char, (size_t)(newsize * self->ob_descr->itemsize));
    if (items == NULL) {
        PyErr_NoMemory();
        return -1;
    }
    self->data.ob_item = (char*) items;
    __Pyx_SET_SIZE(self, n);
    self->allocated = newsize;
    return 0;
}
#endif

/* GCCDiagnostics.proto */
#if !defined(__INTEL_COMPILER) && defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 6))
#define __Pyx_HAS_GCC_DIAGNOSTIC
#endif

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::bad_typeid& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static PyObject* __pyx_convert__to_py_yirage_3a__3a_transpiler_3a__3a_OutputTensorDirective(yirage::transpiler::OutputTensorDirective s);
/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(enum yirage::type::DataType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_TBEpilogueType(enum yirage::type::TBEpilogueType value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_TBOperatorType(enum yirage::type::TBOperatorType value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyLong_As_unsigned_PY_LONG_LONG(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_KNOperatorType(enum yirage::type::KNOperatorType value);

/* CIntFromPy.proto */
static CYTHON_INLINE size_t __Pyx_PyLong_As_size_t(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum yirage::type::DataType __Pyx_PyLong_As_enum__yirage_3a__3a_type_3a__3a_DataType(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value);

/* CIntFromPy.proto */
static CYTHON_INLINE unsigned int __Pyx_PyLong_As_unsigned_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum yirage::type::TBEpilogueType __Pyx_PyLong_As_enum__yirage_3a__3a_type_3a__3a_TBEpilogueType(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE enum yirage::type::TBOperatorType __Pyx_PyLong_As_enum__yirage_3a__3a_type_3a__3a_TBOperatorType(PyObject *);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_unsigned_int(unsigned int value);

/* FormatTypeName.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
typedef PyObject *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%U"
#define __Pyx_DECREF_TypeName(obj) Py_XDECREF(obj)
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
#define __Pyx_PyType_GetFullyQualifiedName PyType_GetFullyQualifiedName
#else
static __Pyx_TypeName __Pyx_PyType_GetFullyQualifiedName(PyTypeObject* tp);
#endif
#else  // !LIMITED_API
typedef const char *__Pyx_TypeName;
#define __Pyx_FMT_TYPENAME "%.200s"
#define __Pyx_PyType_GetFullyQualifiedName(tp) ((tp)->tp_name)
#define __Pyx_DECREF_TypeName(obj)
#endif

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *);

/* FastTypeChecks.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_TypeCheck(obj, type) __Pyx_IsSubtype(Py_TYPE(obj), (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) __Pyx_IsAnySubtype2(Py_TYPE(obj), (PyTypeObject *)type1, (PyTypeObject *)type2)
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject *type);
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2);
#else
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#define __Pyx_TypeCheck2(obj, type1, type2) (PyObject_TypeCheck(obj, (PyTypeObject *)type1) || PyObject_TypeCheck(obj, (PyTypeObject *)type2))
#define __Pyx_PyErr_GivenExceptionMatches(err, type) PyErr_GivenExceptionMatches(err, type)
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *type1, PyObject *type2) {
    return PyErr_GivenExceptionMatches(err, type1) || PyErr_GivenExceptionMatches(err, type2);
}
#endif
#define __Pyx_PyErr_ExceptionMatches2(err1, err2)  __Pyx_PyErr_GivenExceptionMatches2(__Pyx_PyErr_CurrentExceptionType(), err1, err2)
#define __Pyx_PyException_Check(obj) __Pyx_TypeCheck(obj, PyExc_Exception)
#ifdef PyExceptionInstance_Check
  #define __Pyx_PyBaseException_Check(obj) PyExceptionInstance_Check(obj)
#else
  #define __Pyx_PyBaseException_Check(obj) __Pyx_TypeCheck(obj, PyExc_BaseException)
#endif

/* GetRuntimeVersion.proto */
static unsigned long __Pyx_get_runtime_version(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer);

/* MultiPhaseInitModuleState.proto */
#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE
static PyObject *__Pyx_State_FindModule(void*);
static int __Pyx_State_AddModule(PyObject* module, void*);
static int __Pyx_State_RemoveModule(void*);
#elif CYTHON_USE_MODULE_STATE
#define __Pyx_State_FindModule PyState_FindModule
#define __Pyx_State_AddModule PyState_AddModule
#define __Pyx_State_RemoveModule PyState_RemoveModule
#endif

/* #### Code section: module_declarations ### */
/* CythonABIVersion.proto */
#if CYTHON_COMPILING_IN_LIMITED_API
    #if CYTHON_METH_FASTCALL
        #define __PYX_FASTCALL_ABI_SUFFIX  "_fastcall"
    #else
        #define __PYX_FASTCALL_ABI_SUFFIX
    #endif
    #define __PYX_LIMITED_ABI_SUFFIX "limited" __PYX_FASTCALL_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX
#else
    #define __PYX_LIMITED_ABI_SUFFIX
#endif
#if __PYX_HAS_PY_AM_SEND == 1
    #define __PYX_AM_SEND_ABI_SUFFIX
#elif __PYX_HAS_PY_AM_SEND == 2
    #define __PYX_AM_SEND_ABI_SUFFIX "amsendbackport"
#else
    #define __PYX_AM_SEND_ABI_SUFFIX "noamsend"
#endif
#ifndef __PYX_MONITORING_ABI_SUFFIX
    #define __PYX_MONITORING_ABI_SUFFIX
#endif
#if CYTHON_USE_TP_FINALIZE
    #define __PYX_TP_FINALIZE_ABI_SUFFIX
#else
    #define __PYX_TP_FINALIZE_ABI_SUFFIX "nofinalize"
#endif
#if CYTHON_USE_FREELISTS || !defined(__Pyx_AsyncGen_USED)
    #define __PYX_FREELISTS_ABI_SUFFIX
#else
    #define __PYX_FREELISTS_ABI_SUFFIX "nofreelists"
#endif
#define CYTHON_ABI  __PYX_ABI_VERSION __PYX_LIMITED_ABI_SUFFIX __PYX_MONITORING_ABI_SUFFIX __PYX_TP_FINALIZE_ABI_SUFFIX __PYX_FREELISTS_ABI_SUFFIX __PYX_AM_SEND_ABI_SUFFIX
#define __PYX_ABI_MODULE_NAME "_cython_" CYTHON_ABI
#define __PYX_TYPE_MODULE_PREFIX __PYX_ABI_MODULE_NAME "."

#if !CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self); /* proto*/
#endif
#if !CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self); /* proto*/
#endif
static CYTHON_INLINE PyObject *__pyx_f_6yirage_4core_7DTensor__set_tensor(struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self, PyObject *__pyx_v_tensor); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_6yirage_4core_7STensor__set_tensor(struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self, PyObject *__pyx_v_tensor); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_6yirage_4core_12CyKNOperator__set_operator(struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_self, PyObject *__pyx_v_op); /* proto*/
static CYTHON_INLINE PyObject *__pyx_f_6yirage_4core_12CyTBOperator__set_operator(struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_self, PyObject *__pyx_v_op); /* proto*/

/* Module declarations from "libcpp" */

/* Module declarations from "libcpp.memory" */

/* Module declarations from "libc.string" */

/* Module declarations from "libcpp.string_view" */

/* Module declarations from "libcpp.string" */

/* Module declarations from "libcpp.vector" */

/* Module declarations from "CCore" */

/* Module declarations from "cpython.version" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.type" */

/* Module declarations from "libc.stdio" */

/* Module declarations from "cpython.object" */

/* Module declarations from "cpython.ref" */

/* Module declarations from "cpython.exc" */

/* Module declarations from "cpython.module" */

/* Module declarations from "cpython.mem" */

/* Module declarations from "cpython.tuple" */

/* Module declarations from "cpython.list" */

/* Module declarations from "cpython.sequence" */

/* Module declarations from "cpython.mapping" */

/* Module declarations from "cpython.iterator" */

/* Module declarations from "cpython.number" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.bool" */

/* Module declarations from "cpython.long" */

/* Module declarations from "cpython.float" */

/* Module declarations from "cython" */

/* Module declarations from "__builtin__" */

/* Module declarations from "cpython.complex" */

/* Module declarations from "libc.stddef" */

/* Module declarations from "cpython.unicode" */

/* Module declarations from "cpython.pyport" */

/* Module declarations from "cpython.dict" */

/* Module declarations from "cpython.instance" */

/* Module declarations from "cpython.function" */

/* Module declarations from "cpython.method" */

/* Module declarations from "cpython.weakref" */

/* Module declarations from "cpython.getargs" */

/* Module declarations from "cpython.pythread" */

/* Module declarations from "cpython.pystate" */

/* Module declarations from "cpython.set" */

/* Module declarations from "cpython.buffer" */

/* Module declarations from "cpython.bytes" */

/* Module declarations from "cpython.pycapsule" */

/* Module declarations from "cpython.contextvars" */

/* Module declarations from "cpython" */

/* Module declarations from "array" */

/* Module declarations from "cpython.array" */
static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *, char *, Py_ssize_t); /*proto*/

/* Module declarations from "yirage.core" */
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(std::vector<int>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_size_t(std::vector<size_t>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_yirage_3a__3a_transpiler_3a__3a_OutputTensorDirective(std::vector<yirage::transpiler::OutputTensorDirective>  const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(std::vector<std::vector<int> >  const &); /*proto*/
/* #### Code section: typeinfo ### */
/* #### Code section: before_global_var ### */
#define __Pyx_MODULE_NAME "yirage.core"
extern int __pyx_module_is_main_yirage__core;
int __pyx_module_is_main_yirage__core = 0;

/* Implementation of "yirage.core" */
/* #### Code section: global_var ### */
static PyObject *__pyx_builtin_AssertionError;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_print;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_MemoryError;
/* #### Code section: string_decls ### */
static const char __pyx_k_A[] = "A";
static const char __pyx_k_B[] = "B";
static const char __pyx_k_Q[] = "\200\001\330\004\n\210+\220Q";
static const char __pyx_k_i[] = "i";
static const char __pyx_k_j[] = "j";
static const char __pyx_k_t[] = "t";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k_z[] = "z";
static const char __pyx_k__2[] = "?";
static const char __pyx_k_eq[] = "__eq__";
static const char __pyx_k_gc[] = "gc";
static const char __pyx_k_ne[] = "__ne__";
static const char __pyx_k_np[] = "np";
static const char __pyx_k_op[] = "op";
static const char __pyx_k_t0[] = "t0";
static const char __pyx_k_t1[] = "t1";
static const char __pyx_k_acc[] = "acc";
static const char __pyx_k_add[] = "add";
static const char __pyx_k_ans[] = "ans";
static const char __pyx_k_cop[] = "cop";
static const char __pyx_k_dim[] = "dim";
static const char __pyx_k_div[] = "div";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_exp[] = "exp";
static const char __pyx_k_idx[] = "idx";
static const char __pyx_k_int[] = "int";
static const char __pyx_k_mul[] = "mul";
static const char __pyx_k_num[] = "num";
static const char __pyx_k_ops[] = "ops";
static const char __pyx_k_pop[] = "pop";
static const char __pyx_k_pow[] = "pow";
static const char __pyx_k_ptr[] = "ptr";
static const char __pyx_k_q_k[] = "\200\001\330\004\020\220\010\230\007\230q\240\001\330\004\022\220!\220;\230k\250\021";
static const char __pyx_k_rms[] = "rms";
static const char __pyx_k_str[] = "__str__";
static const char __pyx_k_sub[] = "sub";
static const char __pyx_k_sum[] = "sum";
static const char __pyx_k_A_t1[] = "\200A\330\010\017\210t\2201";
static const char __pyx_k_a_AQ[] = "\320\000\036\230a\330\004\034\230A\230Q";
static const char __pyx_k_bf16[] = "bf16";
static const char __pyx_k_cast[] = "cast";
static const char __pyx_k_code[] = "code";
static const char __pyx_k_dict[] = "dict";
static const char __pyx_k_dims[] = "dims";
static const char __pyx_k_dimx[] = "dimx";
static const char __pyx_k_fp16[] = "fp16";
static const char __pyx_k_fp32[] = "fp32";
static const char __pyx_k_fp64[] = "fp64";
static const char __pyx_k_func[] = "__func__";
static const char __pyx_k_gelu[] = "gelu";
static const char __pyx_k_guid[] = "guid";
static const char __pyx_k_hash[] = "__hash__";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_int1[] = "int1";
static const char __pyx_k_int8[] = "int8";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_mean[] = "mean";
static const char __pyx_k_name[] = "name";
static const char __pyx_k_relu[] = "relu";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_silu[] = "silu";
static const char __pyx_k_spec[] = "__spec__";
static const char __pyx_k_sqrt[] = "sqrt";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_type[] = "type";
static const char __pyx_k_A_t2T[] = "\200A\330\010\017\210t\2202\220T\230\021";
static const char __pyx_k_array[] = "array";
static const char __pyx_k_cdims[] = "cdims";
static const char __pyx_k_clamp[] = "clamp";
static const char __pyx_k_cname[] = "cname";
static const char __pyx_k_dtype[] = "dtype";
static const char __pyx_k_error[] = "error";
static const char __pyx_k_fmaps[] = "fmaps";
static const char __pyx_k_graph[] = "graph";
static const char __pyx_k_imaps[] = "imaps";
static const char __pyx_k_input[] = "input";
static const char __pyx_k_int16[] = "int16";
static const char __pyx_k_int32[] = "int32";
static const char __pyx_k_int64[] = "int64";
static const char __pyx_k_numpy[] = "numpy";
static const char __pyx_k_omaps[] = "omaps";
static const char __pyx_k_other[] = "other";
static const char __pyx_k_print[] = "print";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_torch[] = "torch";
static const char __pyx_k_uint8[] = "uint8";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_A_t6_A[] = "\200A\330\010\017\210t\2206\230\023\230A";
static const char __pyx_k_Cq_c_q[] = "\200\001\330\005\010\210\004\210C\210q\330\t\020\220\001\330\n\016\210c\220\021\330\t\020\220\001\340\t\020\220\007\220q\330\t\020\220\001";
static const char __pyx_k_bgraph[] = "bgraph";
static const char __pyx_k_c_type[] = "c_type";
static const char __pyx_k_cfmaps[] = "cfmaps";
static const char __pyx_k_cimaps[] = "cimaps";
static const char __pyx_k_comaps[] = "comaps";
static const char __pyx_k_concat[] = "concat";
static const char __pyx_k_cshape[] = "cshape";
static const char __pyx_k_ctypes[] = "ctypes";
static const char __pyx_k_enable[] = "enable";
static const char __pyx_k_errors[] = "errors";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_gpu_id[] = "gpu_id";
static const char __pyx_k_inputs[] = "inputs";
static const char __pyx_k_matmul[] = "matmul";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_name_2[] = "__name__";
static const char __pyx_k_optype[] = "optype";
static const char __pyx_k_output[] = "output";
static const char __pyx_k_params[] = "params";
static const char __pyx_k_reduce[] = "__reduce__";
static const char __pyx_k_result[] = "result";
static const char __pyx_k_return[] = "return";
static const char __pyx_k_scalar[] = "scalar";
static const char __pyx_k_search[] = "search";
static const char __pyx_k_square[] = "square";
static const char __pyx_k_tensor[] = "tensor";
static const char __pyx_k_uint16[] = "uint16";
static const char __pyx_k_uint32[] = "uint32";
static const char __pyx_k_uint64[] = "uint64";
static const char __pyx_k_A_t4waq[] = "\320\004\034\230A\330\010\017\210t\2204\220w\230a\230q";
static const char __pyx_k_A_t9_31[] = "\200A\330\010\017\210t\2209\320\0343\2601";
static const char __pyx_k_A_t9_4A[] = "\200A\330\010\017\210t\2209\320\0344\260A";
static const char __pyx_k_A_t9_7q[] = "\200A\330\010\017\210t\2209\320\0347\260q";
static const char __pyx_k_DTensor[] = "DTensor";
static const char __pyx_k_STensor[] = "STensor";
static const char __pyx_k_cconfig[] = "cconfig";
static const char __pyx_k_cinputs[] = "cinputs";
static const char __pyx_k_cparams[] = "cparams";
static const char __pyx_k_disable[] = "disable";
static const char __pyx_k_dtensor[] = "dtensor";
static const char __pyx_k_float16[] = "float16";
static const char __pyx_k_float32[] = "float32";
static const char __pyx_k_float64[] = "float64";
static const char __pyx_k_franges[] = "franges";
static const char __pyx_k_is_bf16[] = "is_bf16";
static const char __pyx_k_is_fp16[] = "is_fp16";
static const char __pyx_k_is_fp32[] = "is_fp32";
static const char __pyx_k_is_fp64[] = "is_fp64";
static const char __pyx_k_is_int1[] = "is_int1";
static const char __pyx_k_is_int8[] = "is_int8";
static const char __pyx_k_max_val[] = "max_val";
static const char __pyx_k_min_val[] = "min_val";
static const char __pyx_k_op_type[] = "op_type";
static const char __pyx_k_outputs[] = "outputs";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_stensor[] = "stensor";
static const char __pyx_k_strides[] = "strides";
static const char __pyx_k_verbose[] = "verbose";
static const char __pyx_k_FP_TYPES[] = "FP_TYPES";
static const char __pyx_k_H_e7_1_q[] = "\320\000H\310\001\340\004\025\220]\240!\340\004(\250\t\260\021\260+\270[\310\001\340\004\005\330\010\020\220\006\220e\2307\240!\2401\330\010\031\230\026\230q";
static const char __pyx_k_add_note[] = "add_note";
static const char __pyx_k_bfloat16[] = "bfloat16";
static const char __pyx_k_buf_size[] = "buf_size";
static const char __pyx_k_c_void_p[] = "c_void_p";
static const char __pyx_k_cfranges[] = "cfranges";
static const char __pyx_k_coutputs[] = "coutputs";
static const char __pyx_k_cstrides[] = "cstrides";
static const char __pyx_k_cverbose[] = "cverbose";
static const char __pyx_k_cybgraph[] = "cybgraph";
static const char __pyx_k_data_ptr[] = "data_ptr";
static const char __pyx_k_epilogue[] = "epilogue";
static const char __pyx_k_filename[] = "filename";
static const char __pyx_k_filepath[] = "filepath";
static const char __pyx_k_getstate[] = "__getstate__";
static const char __pyx_k_grid_dim[] = "grid_dim";
static const char __pyx_k_griddims[] = "griddims";
static const char __pyx_k_input_op[] = "input_op";
static const char __pyx_k_is_dtype[] = "is_dtype";
static const char __pyx_k_is_int16[] = "is_int16";
static const char __pyx_k_is_int32[] = "is_int32";
static const char __pyx_k_is_int64[] = "is_int64";
static const char __pyx_k_is_uint8[] = "is_uint8";
static const char __pyx_k_num_dims[] = "num_dims";
static const char __pyx_k_num_gpus[] = "num_gpus";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_rms_norm[] = "rms_norm";
static const char __pyx_k_set_name[] = "__set_name__";
static const char __pyx_k_setstate[] = "__setstate__";
static const char __pyx_k_type_str[] = "type_str";
static const char __pyx_k_CyKNGraph[] = "CyKNGraph";
static const char __pyx_k_CyTBGraph[] = "CyTBGraph";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_allreduce[] = "allreduce";
static const char __pyx_k_block_dim[] = "block_dim";
static const char __pyx_k_blockdims[] = "blockdims";
static const char __pyx_k_cfilename[] = "cfilename";
static const char __pyx_k_cfilepath[] = "cfilepath";
static const char __pyx_k_cgriddims[] = "cgriddims";
static const char __pyx_k_cuda_code[] = "cuda_code";
static const char __pyx_k_fused_dim[] = "fused_dim";
static const char __pyx_k_input_map[] = "input_map";
static const char __pyx_k_is_uint16[] = "is_uint16";
static const char __pyx_k_is_uint32[] = "is_uint32";
static const char __pyx_k_is_uint64[] = "is_uint64";
static const char __pyx_k_isenabled[] = "isenabled";
static const char __pyx_k_json_file[] = "json_file";
static const char __pyx_k_kn_add_op[] = "kn_add_op";
static const char __pyx_k_kn_div_op[] = "kn_div_op";
static const char __pyx_k_kn_exp_op[] = "kn_exp_op";
static const char __pyx_k_kn_log_op[] = "kn_log_op";
static const char __pyx_k_kn_mul_op[] = "kn_mul_op";
static const char __pyx_k_kn_pow_op[] = "kn_pow_op";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_my_gpu_id[] = "my_gpu_id";
static const char __pyx_k_new_input[] = "new_input";
static const char __pyx_k_operators[] = "operators";
static const char __pyx_k_output_op[] = "output_op";
static const char __pyx_k_profiling[] = "profiling";
static const char __pyx_k_pyx_state[] = "__pyx_state";
static const char __pyx_k_reduce_ex[] = "__reduce_ex__";
static const char __pyx_k_reduction[] = "reduction";
static const char __pyx_k_target_cc[] = "target_cc";
static const char __pyx_k_task_type[] = "task_type";
static const char __pyx_k_tb_add_op[] = "tb_add_op";
static const char __pyx_k_tb_div_op[] = "tb_div_op";
static const char __pyx_k_tb_exp_op[] = "tb_exp_op";
static const char __pyx_k_tb_log_op[] = "tb_log_op";
static const char __pyx_k_tb_mul_op[] = "tb_mul_op";
static const char __pyx_k_tb_pow_op[] = "tb_pow_op";
static const char __pyx_k_tb_sub_op[] = "tb_sub_op";
static const char __pyx_k_SINT_TYPES[] = "SINT_TYPES";
static const char __pyx_k_UINT_TYPES[] = "UINT_TYPES";
static const char __pyx_k_alloc_size[] = "alloc_size";
static const char __pyx_k_cblockdims[] = "cblockdims";
static const char __pyx_k_cnewgraphs[] = "cnewgraphs";
static const char __pyx_k_customized[] = "customized";
static const char __pyx_k_cy_to_json[] = "cy_to_json";
static const char __pyx_k_dtype___eq[] = "dtype.__eq__";
static const char __pyx_k_dtype___ne[] = "dtype.__ne__";
static const char __pyx_k_error_list[] = "error_list";
static const char __pyx_k_get_bgraph[] = "get_bgraph";
static const char __pyx_k_kn_gelu_op[] = "kn_gelu_op";
static const char __pyx_k_kn_relu_op[] = "kn_relu_op";
static const char __pyx_k_kn_silu_op[] = "kn_silu_op";
static const char __pyx_k_kn_sqrt_op[] = "kn_sqrt_op";
static const char __pyx_k_kn_unknown[] = "kn_unknown";
static const char __pyx_k_mul_scalar[] = "mul_scalar";
static const char __pyx_k_new_graphs[] = "new_graphs";
static const char __pyx_k_new_output[] = "new_output";
static const char __pyx_k_num_groups[] = "num_groups";
static const char __pyx_k_output_map[] = "output_map";
static const char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static const char __pyx_k_sum_todimx[] = "sum_todimx";
static const char __pyx_k_tb_gelu_op[] = "tb_gelu_op";
static const char __pyx_k_tb_relu_op[] = "tb_relu_op";
static const char __pyx_k_tb_silu_op[] = "tb_silu_op";
static const char __pyx_k_tb_sqrt_op[] = "tb_sqrt_op";
static const char __pyx_k_tb_unknown[] = "tb_unknown";
static const char __pyx_k_A_4z_1_t6_E[] = "\320\004\034\230A\330\010\013\2104\210z\230\021\230'\240\021\330\014\023\2201\330\010\017\210t\2206\230\023\230E\240\021";
static const char __pyx_k_CyTBInputOp[] = "CyTBInputOp";
static const char __pyx_k_DTensor_dim[] = "DTensor.dim";
static const char __pyx_k_MemoryError[] = "MemoryError";
static const char __pyx_k_STensor_dim[] = "STensor.dim";
static const char __pyx_k_c_input_map[] = "c_input_map";
static const char __pyx_k_dtype___str[] = "dtype.__str__";
static const char __pyx_k_forloop_dim[] = "forloop_dim";
static const char __pyx_k_input_graph[] = "input_graph";
static const char __pyx_k_kn_clamp_op[] = "kn_clamp_op";
static const char __pyx_k_kn_input_op[] = "kn_input_op";
static const char __pyx_k_mark_output[] = "mark_output";
static const char __pyx_k_num_outputs[] = "num_outputs";
static const char __pyx_k_tb_clamp_op[] = "tb_clamp_op";
static const char __pyx_k_tb_input_op[] = "tb_input_op";
static const char __pyx_k_yirage_core[] = "yirage.core";
static const char __pyx_k_A_y_5_Be_r_a[] = "\200A\330\010\017\210y\230\003\2305\240\014\250B\250e\260<\270r\300\025\300a";
static const char __pyx_k_CyKNOperator[] = "CyKNOperator";
static const char __pyx_k_CyTBOperator[] = "CyTBOperator";
static const char __pyx_k_CyTBOutputOp[] = "CyTBOutputOp";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_c_output_map[] = "c_output_map";
static const char __pyx_k_cy_from_json[] = "cy_from_json";
static const char __pyx_k_dtensor_cptr[] = "dtensor_cptr";
static const char __pyx_k_dtensor_guid[] = "dtensor_guid";
static const char __pyx_k_dtype___hash[] = "dtype.__hash__";
static const char __pyx_k_dtype___init[] = "dtype.__init__";
static const char __pyx_k_fuse_tensors[] = "fuse_tensors";
static const char __pyx_k_initializing[] = "_initializing";
static const char __pyx_k_is_coroutine[] = "_is_coroutine";
static const char __pyx_k_kn_matmul_op[] = "kn_matmul_op";
static const char __pyx_k_kn_output_op[] = "kn_output_op";
static const char __pyx_k_kn_square_op[] = "kn_square_op";
static const char __pyx_k_stringsource[] = "<stringsource>";
static const char __pyx_k_tb_matmul_op[] = "tb_matmul_op";
static const char __pyx_k_tb_output_op[] = "tb_output_op";
static const char __pyx_k_tb_square_op[] = "tb_square_op";
static const char __pyx_k_torch_tensor[] = "torch_tensor";
static const char __pyx_k_CyKNGraph_add[] = "CyKNGraph.add";
static const char __pyx_k_CyKNGraph_div[] = "CyKNGraph.div";
static const char __pyx_k_CyKNGraph_exp[] = "CyKNGraph.exp";
static const char __pyx_k_CyKNGraph_mul[] = "CyKNGraph.mul";
static const char __pyx_k_CyKNGraph_pow[] = "CyKNGraph.pow";
static const char __pyx_k_CyTBGraph_add[] = "CyTBGraph.add";
static const char __pyx_k_CyTBGraph_div[] = "CyTBGraph.div";
static const char __pyx_k_CyTBGraph_exp[] = "CyTBGraph.exp";
static const char __pyx_k_CyTBGraph_mul[] = "CyTBGraph.mul";
static const char __pyx_k_CyTBGraph_sub[] = "CyTBGraph.sub";
static const char __pyx_k_dtype_is_bf16[] = "dtype.is_bf16";
static const char __pyx_k_dtype_is_fp16[] = "dtype.is_fp16";
static const char __pyx_k_dtype_is_fp32[] = "dtype.is_fp32";
static const char __pyx_k_dtype_is_fp64[] = "dtype.is_fp64";
static const char __pyx_k_dtype_is_int1[] = "dtype.is_int1";
static const char __pyx_k_dtype_is_int8[] = "dtype.is_int8";
static const char __pyx_k_epilogue_type[] = "epilogue_type";
static const char __pyx_k_forloop_accum[] = "forloop_accum";
static const char __pyx_k_forloop_range[] = "forloop_range";
static const char __pyx_k_input_strides[] = "input_strides";
static const char __pyx_k_input_tensors[] = "input_tensors";
static const char __pyx_k_kn_chunk_0_op[] = "kn_chunk_0_op";
static const char __pyx_k_kn_chunk_1_op[] = "kn_chunk_1_op";
static const char __pyx_k_kn_chunk_2_op[] = "kn_chunk_2_op";
static const char __pyx_k_kn_sigmoid_op[] = "kn_sigmoid_op";
static const char __pyx_k_kn_split_0_op[] = "kn_split_0_op";
static const char __pyx_k_kn_split_1_op[] = "kn_split_1_op";
static const char __pyx_k_kn_split_2_op[] = "kn_split_2_op";
static const char __pyx_k_max_smem_size[] = "max_smem_size";
static const char __pyx_k_output_shapes[] = "output_shapes";
static const char __pyx_k_reduce_cython[] = "__reduce_cython__";
static const char __pyx_k_reduction_max[] = "reduction_max";
static const char __pyx_k_register_task[] = "register_task";
static const char __pyx_k_store_in_dmem[] = "store_in_dmem";
static const char __pyx_k_tb_sigmoid_op[] = "tb_sigmoid_op";
static const char __pyx_k_tb_split_0_op[] = "tb_split_0_op";
static const char __pyx_k_tb_split_1_op[] = "tb_split_1_op";
static const char __pyx_k_tb_split_2_op[] = "tb_split_2_op";
static const char __pyx_k_A_HA_uCuL_2U_Q[] = "\200A\330\010\014\210H\220A\330\010\017\210u\220C\220u\230L\250\002\250%\250|\2702\270U\300+\310Q";
static const char __pyx_k_A_d_3Gq_RS_z_z[] = "\200A\330\010&\240d\250)\3203G\300q\310\n\320RS\330\010\t\330\014\031\230\026\230z\250\027\260\001\260\021\330\014\031\230\026\230z\250\027\260\001\260\021";
static const char __pyx_k_AssertionError[] = "AssertionError";
static const char __pyx_k_CyKNGraph_gelu[] = "CyKNGraph.gelu";
static const char __pyx_k_CyKNGraph_relu[] = "CyKNGraph.relu";
static const char __pyx_k_CyKNGraph_silu[] = "CyKNGraph.silu";
static const char __pyx_k_CyKNGraph_sqrt[] = "CyKNGraph.sqrt";
static const char __pyx_k_CyTBGraph_gelu[] = "CyTBGraph.gelu";
static const char __pyx_k_CyTBGraph_relu[] = "CyTBGraph.relu";
static const char __pyx_k_CyTBGraph_silu[] = "CyTBGraph.silu";
static const char __pyx_k_CyTBGraph_sqrt[] = "CyTBGraph.sqrt";
static const char __pyx_k_cinput_strides[] = "cinput_strides";
static const char __pyx_k_default_config[] = "default_config";
static const char __pyx_k_dtype_is_dtype[] = "dtype.is_dtype";
static const char __pyx_k_dtype_is_int16[] = "dtype.is_int16";
static const char __pyx_k_dtype_is_int32[] = "dtype.is_int32";
static const char __pyx_k_dtype_is_int64[] = "dtype.is_int64";
static const char __pyx_k_dtype_is_uint8[] = "dtype.is_uint8";
static const char __pyx_k_get_num_inputs[] = "get_num_inputs";
static const char __pyx_k_kn_concat_0_op[] = "kn_concat_0_op";
static const char __pyx_k_kn_concat_1_op[] = "kn_concat_1_op";
static const char __pyx_k_kn_concat_2_op[] = "kn_concat_2_op";
static const char __pyx_k_kn_rms_norm_op[] = "kn_rms_norm_op";
static const char __pyx_k_output_tensors[] = "output_tensors";
static const char __pyx_k_py_byte_string[] = "py_byte_string";
static const char __pyx_k_tb_concat_0_op[] = "tb_concat_0_op";
static const char __pyx_k_tb_concat_1_op[] = "tb_concat_1_op";
static const char __pyx_k_tb_concat_2_op[] = "tb_concat_2_op";
static const char __pyx_k_tb_rms_norm_op[] = "tb_rms_norm_op";
static const char __pyx_k_torch_data_ptr[] = "torch_data_ptr";
static const char __pyx_k_y_1_q_Q_q_wa_q[] = "\200\001\330\004\007\200y\220\003\2201\330\010\017\210q\330\t\022\220#\220Q\330\010\017\210q\340\010\017\210w\220a\330\010\017\210q";
static const char __pyx_k_A_1AT_T_e1AQ_AQ[] = "\200A\330\010\t\330\014\030\230\001\230\021\330\014\023\2201\220A\220T\230\021\230#\230T\240\025\240e\2501\250A\250Q\330\014\024\220A\220Q";
static const char __pyx_k_A_D_fA_4vT_81_1[] = "\200A\330\010\014\210D\220\002\220$\220f\230A\330\014\023\2204\220v\230T\240\021\240!\340\014\023\2208\2301\330\014\023\2201";
static const char __pyx_k_A_fE_hfA_9AYa_q[] = "\200A\340\010\014\320\014\035\230[\250\001\250\021\250!\340\010\016\210f\220E\230\021\320\032.\250h\260f\270A\330\010\023\2209\230A\230Y\240a\330\010\017\210q";
static const char __pyx_k_A_y_vQ_q_A_I_Qa[] = "\200A\330\010\017\210y\230\007\230v\240Q\330\010\031\230\030\240\027\250\001\250\021\330\010\037\230q\330\010\024\220A\330\010\014\210I\320\025-\250Q\250a";
static const char __pyx_k_CyKNGraph_clamp[] = "CyKNGraph.clamp";
static const char __pyx_k_CyTBGraph_clamp[] = "CyTBGraph.clamp";
static const char __pyx_k_dtype_is_uint16[] = "dtype.is_uint16";
static const char __pyx_k_dtype_is_uint32[] = "dtype.is_uint32";
static const char __pyx_k_dtype_is_uint64[] = "dtype.is_uint64";
static const char __pyx_k_get_bgraph_info[] = "_get_bgraph_info";
static const char __pyx_k_get_num_outputs[] = "get_num_outputs";
static const char __pyx_k_kn_allreduce_op[] = "kn_allreduce_op";
static const char __pyx_k_num_warp_groups[] = "num_warp_groups";
static const char __pyx_k_pipeline_stages[] = "pipeline_stages";
static const char __pyx_k_q_1_F_q_E_q_9AQ[] = "\200\001\330\004\020\220\010\230\007\230q\240\001\330\004\n\320\n\032\230!\2301\330\004\014\210F\220%\220q\320\030,\250E\260\026\260q\330\004\013\2109\220A\220Q";
static const char __pyx_k_setstate_cython[] = "__setstate_cython__";
static const char __pyx_k_unknown_op_type[] = "unknown_op_type";
static const char __pyx_k_A_1_5_q_T_A_I_1F[] = "\200A\330\010\033\2301\330\010\013\2105\220\007\220q\330\014\035\230T\240\027\250\001\250\021\330\014\024\220A\330\010\014\210I\320\025+\2501\250F\260(\270!";
static const char __pyx_k_A_1_5_q_T_A_I_xq[] = "\200A\330\010\033\2301\330\010\013\2105\220\007\220q\330\014\035\230T\240\027\250\001\250\021\330\014\024\220A\330\010\014\210I\320\025(\250\001\250\026\250x\260q";
static const char __pyx_k_CyKNCustomizedOp[] = "CyKNCustomizedOp";
static const char __pyx_k_CyKNGraph_matmul[] = "CyKNGraph.matmul";
static const char __pyx_k_CyKNGraph_square[] = "CyKNGraph.square";
static const char __pyx_k_CyTBGraph_concat[] = "CyTBGraph.concat";
static const char __pyx_k_CyTBGraph_matmul[] = "CyTBGraph.matmul";
static const char __pyx_k_CyTBGraph_square[] = "CyTBGraph.square";
static const char __pyx_k_cur_output_shape[] = "cur_output_shape";
static const char __pyx_k_kn_customized_op[] = "kn_customized_op";
static const char __pyx_k_kn_mul_scalar_op[] = "kn_mul_scalar_op";
static const char __pyx_k_normalized_shape[] = "normalized_shape";
static const char __pyx_k_tb_customized_op[] = "tb_customized_op";
static const char __pyx_k_tb_mul_scalar_op[] = "tb_mul_scalar_op";
static const char __pyx_k_A_t9D_F_q_E_q_waq[] = "\200A\330\010\037\230t\2409\250D\260\001\260\021\260!\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_Unsupported_dtype[] = "Unsupported dtype: ";
static const char __pyx_k_forloop_accum_max[] = "forloop_accum_max";
static const char __pyx_k_kn_reduction_0_op[] = "kn_reduction_0_op";
static const char __pyx_k_kn_reduction_1_op[] = "kn_reduction_1_op";
static const char __pyx_k_kn_reduction_2_op[] = "kn_reduction_2_op";
static const char __pyx_k_kn_tensor_to_dict[] = "_kn_tensor_to_dict";
static const char __pyx_k_output_directives[] = "output_directives";
static const char __pyx_k_profiler_buf_size[] = "profiler_buf_size";
static const char __pyx_k_set_gpu_device_id[] = "set_gpu_device_id";
static const char __pyx_k_tb_reduction_0_op[] = "tb_reduction_0_op";
static const char __pyx_k_tb_reduction_1_op[] = "tb_reduction_1_op";
static const char __pyx_k_tb_reduction_2_op[] = "tb_reduction_2_op";
static const char __pyx_k_tb_tensor_to_dict[] = "_tb_tensor_to_dict";
static const char __pyx_k_transpiler_config[] = "transpiler_config";
static const char __pyx_k_A_t9Kq_F_q_E_q_waq[] = "\200A\330\010\037\230t\2409\250K\260q\270\001\270\030\300\021\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_CyKNGraph_rms_norm[] = "CyKNGraph.rms_norm";
static const char __pyx_k_CyTBGraph_rms_norm[] = "CyTBGraph.rms_norm";
static const char __pyx_k_asyncio_coroutines[] = "asyncio.coroutines";
static const char __pyx_k_attach_cuda_tensor[] = "attach_cuda_tensor";
static const char __pyx_k_cis_formal_verifed[] = "cis_formal_verifed";
static const char __pyx_k_cline_in_traceback[] = "cline_in_traceback";
static const char __pyx_k_cur_output_strides[] = "cur_output_strides";
static const char __pyx_k_get_input_dtensors[] = "get_input_dtensors";
static const char __pyx_k_get_input_stensors[] = "get_input_stensors";
static const char __pyx_k_is_formal_verified[] = "is_formal_verified";
static const char __pyx_k_max_num_new_graphs[] = "max_num_new_graphs";
static const char __pyx_k_A_t9D_1_F_q_E_q_waq[] = "\200A\330\010\037\230t\2409\250D\260\001\260\021\260(\270!\2701\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_A_t9D_a_F_q_E_q_waq[] = "\200A\330\010\037\230t\2409\250D\260\001\260\025\260a\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_A_t9E_1_F_q_E_q_waq[] = "\200A\330\010\037\230t\2409\250E\260\021\260!\2601\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_A_t9E_q_F_q_E_q_waq[] = "\200A\330\010\037\230t\2409\250E\260\021\260%\260q\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_A_t9F_5_F_q_E_q_waq[] = "\200A\330\010\037\230t\2409\250F\260!\2605\270\010\300\t\310\021\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_A_t9G1E_F_q_E_q_waq[] = "\200A\330\010\037\230t\2409\250G\2601\260E\270\021\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_A_t9Jaq_F_q_E_q_waq[] = "\200A\330\010\037\230t\2409\250J\260a\260q\270\010\300\001\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_A_t9_aq_F_q_E_q_waq[] = "\200A\330\010\037\230t\2409\320,>\270a\270q\300\001\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_CyKNGraph_new_input[] = "CyKNGraph.new_input";
static const char __pyx_k_CyKNGraph_reduction[] = "CyKNGraph.reduction";
static const char __pyx_k_CyTBGraph_new_input[] = "CyTBGraph.new_input";
static const char __pyx_k_CyTBGraph_reduction[] = "CyTBGraph.reduction";
static const char __pyx_k_Unsupported_dtype_2[] = "Unsupported dtype: {}";
static const char __pyx_k_attach_torch_tensor[] = "attach_torch_tensor";
static const char __pyx_k_disable_fingerprint[] = "disable_fingerprint";
static const char __pyx_k_generate_task_graph[] = "generate_task_graph";
static const char __pyx_k_get_graph_structure[] = "get_graph_structure";
static const char __pyx_k_get_output_dtensors[] = "get_output_dtensors";
static const char __pyx_k_get_output_stensors[] = "get_output_stensors";
static const char __pyx_k_kn_split_last_op_id[] = "kn_split_last_op_id";
static const char __pyx_k_previous_checkpoint[] = "previous_checkpoint";
static const char __pyx_k_tb_split_last_op_id[] = "tb_split_last_op_id";
static const char __pyx_k_A_t9G1AQ_F_q_E_q_waq[] = "\200A\330\010\037\230t\2409\250G\2601\260A\260Q\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_A_t9IQaq_F_q_E_q_waq[] = "\200A\330\010\037\230t\2409\250I\260Q\260a\260q\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_CyKNGraph_customized[] = "CyKNGraph.customized";
static const char __pyx_k_CyTBGraph_mul_scalar[] = "CyTBGraph.mul_scalar";
static const char __pyx_k_CyTBGraph_new_output[] = "CyTBGraph.new_output";
static const char __pyx_k_cprevious_checkpoint[] = "cprevious_checkpoint";
static const char __pyx_k_generate_nki_program[] = "generate_nki_program";
static const char __pyx_k_get_kn_operator_info[] = "_get_kn_operator_info";
static const char __pyx_k_get_tb_operator_info[] = "_get_tb_operator_info";
static const char __pyx_k_kn_concat_last_op_id[] = "kn_concat_last_op_id";
static const char __pyx_k_kn_split_first_op_id[] = "kn_split_first_op_id";
static const char __pyx_k_string_to_tbepilogue[] = "string_to_tbepilogue";
static const char __pyx_k_tb_concat_last_op_id[] = "tb_concat_last_op_id";
static const char __pyx_k_tb_split_first_op_id[] = "tb_split_first_op_id";
static const char __pyx_k_A_t9JauHE_F_q_E_q_waq[] = "\200A\330\010\037\230t\2409\250J\260a\260u\270H\300E\310\021\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_CyKNGraph_mark_output[] = "CyKNGraph.mark_output";
static const char __pyx_k_EQ_Ya_Q_1E_iv_QR_e7_1[] = "\320\000E\300Q\360\006\000\005\026\220]\240!\360\006\000\005&\240Y\250a\250{\270+\300Q\330\004\033\2301\230E\240\027\250\001\250\031\260$\260i\270v\300\\\320QR\340\004\005\330\010\020\220\006\220e\2307\240!\2401\330\010\022\220!";
static const char __pyx_k_attach_nvshmem_tensor[] = "attach_nvshmem_tensor";
static const char __pyx_k_enable_online_softmax[] = "enable_online_softmax";
static const char __pyx_k_forloop_accum_rescale[] = "forloop_accum_rescale";
static const char __pyx_k_generate_cuda_program[] = "generate_cuda_program";
static const char __pyx_k_kn_concat_first_op_id[] = "kn_concat_first_op_id";
static const char __pyx_k_tb_concat_first_op_id[] = "tb_concat_first_op_id";
static const char __pyx_k_tb_reduction_0_max_op[] = "tb_reduction_0_max_op";
static const char __pyx_k_tb_reduction_1_max_op[] = "tb_reduction_1_max_op";
static const char __pyx_k_tb_reduction_2_max_op[] = "tb_reduction_2_max_op";
static const char __pyx_k_A_d_1A_Q_E_aq_Q_2_fA_q[] = "\200A\340\010\016\210d\220&\320\030+\2501\250A\330\010\025\220Q\330\010\014\210E\220\025\220a\220q\330\014\022\220&\230\005\230Q\320\0362\260'\270\021\270$\270f\300A\330\014\022\220'\230\021\230'\240\021\240!\330\010\017\210q";
static const char __pyx_k_A_d_aq_Q_E_aq_Q_2_fA_q[] = "\200A\340\010\016\210d\220)\320\033.\250a\250q\330\010\025\220Q\330\010\014\210E\220\025\220a\220q\330\014\022\220&\230\005\230Q\320\0362\260'\270\021\270$\270f\300A\330\014\022\220'\230\021\230'\240\021\240!\330\010\017\210q";
static const char __pyx_k_A_t9F_1HIQ_F_q_E_q_waq[] = "\200A\330\010\037\230t\2409\250F\260!\2601\260H\270I\300Q\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_A_t9G1AXQa_F_q_E_q_waq[] = "\200A\330\010\037\230t\2409\250G\2601\260A\260X\270Q\270a\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_CyKNGraph_fuse_tensors[] = "CyKNGraph.fuse_tensors";
static const char __pyx_k_TODO_support_blockdims[] = "TODO: support blockdims";
static const char __pyx_k_convert_ctype_to_dtype[] = "convert_ctype_to_dtype";
static const char __pyx_k_convert_dtype_to_ctype[] = "convert_dtype_to_ctype";
static const char __pyx_k_string_to_accum_optype[] = "string_to_accum_optype";
static const char __pyx_k_A_q_t9N_1HA_F_q_E_q_waq[] = "\200A\330\010\021\320\021'\240q\250\001\330\010\037\230t\2409\250N\270!\2701\270H\300A\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_A_t9G1AXQha_F_q_E_q_waq[] = "\200A\330\010\037\230t\2409\250G\2601\260A\260X\270Q\270h\300a\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_CyKNGraph_register_task[] = "CyKNGraph.register_task";
static const char __pyx_k_CyTBGraph_forloop_accum[] = "CyTBGraph.forloop_accum";
static const char __pyx_k_CyTBGraph_reduction_max[] = "CyTBGraph.reduction_max";
static const char __pyx_k_DTensor___reduce_cython[] = "DTensor.__reduce_cython__";
static const char __pyx_k_STensor___reduce_cython[] = "STensor.__reduce_cython__";
static const char __pyx_k_generate_triton_program[] = "generate_triton_program";
static const char __pyx_k_tb_forloop_accum_max_op[] = "tb_forloop_accum_max_op";
static const char __pyx_k_tb_reduction_last_op_id[] = "tb_reduction_last_op_id";
static const char __pyx_k_yirage__cython_core_pyx[] = "yirage/_cython/core.pyx";
static const char __pyx_k_CyKNGraph_get_num_inputs[] = "CyKNGraph.get_num_inputs";
static const char __pyx_k_Error_index_out_of_range[] = "Error: index out of range";
static const char __pyx_k_Unsupported_accum_optype[] = "Unsupported accum optype";
static const char __pyx_k_filepath_cannot_be_empty[] = "filepath cannot be empty";
static const char __pyx_k_tb_concat_then_matmul_op[] = "tb_concat_then_matmul_op";
static const char __pyx_k_tb_forloop_accum_last_op[] = "tb_forloop_accum_last_op";
static const char __pyx_k_tb_reduction_first_op_id[] = "tb_reduction_first_op_id";
static const char __pyx_k_A_avU_6QR_Kq_a_V1_4AS_E_q[] = "\200A\330\010\016\320\016\036\230a\230v\240U\250!\320+@\300\002\300)\3106\320QR\330\010\021\220\023\220K\230q\330\010\t\330\014\030\230\006\230a\330\014\035\230V\2401\330\014\031\230\021\230$\320\0364\260A\260S\270\004\270E\300\026\300q";
static const char __pyx_k_CyKNGraph___reduce_cython[] = "CyKNGraph.__reduce_cython__";
static const char __pyx_k_CyKNGraph_get_num_outputs[] = "CyKNGraph.get_num_outputs";
static const char __pyx_k_CyTBGraph___reduce_cython[] = "CyTBGraph.__reduce_cython__";
static const char __pyx_k_DTensor___setstate_cython[] = "DTensor.__setstate_cython__";
static const char __pyx_k_STensor___setstate_cython[] = "STensor.__setstate_cython__";
static const char __pyx_k_tb_reduction_0_to_dimx_op[] = "tb_reduction_0_to_dimx_op";
static const char __pyx_k_tb_reduction_1_to_dimx_op[] = "tb_reduction_1_to_dimx_op";
static const char __pyx_k_tb_reduction_2_to_dimx_op[] = "tb_reduction_2_to_dimx_op";
static const char __pyx_k_CyKNGraph__get_bgraph_info[] = "CyKNGraph._get_bgraph_info";
static const char __pyx_k_get_owner_independent_hash[] = "get_owner_independent_hash";
static const char __pyx_k_t3a_q_S_q_S_q_S_q_S_q_wa_q[] = "\200\001\330\004\007\200t\2103\210a\330\010\017\210q\330\t\r\210S\220\001\330\010\017\210q\330\t\r\210S\220\001\330\010\017\210q\330\t\r\210S\220\001\330\010\017\210q\330\t\r\210S\220\001\330\010\017\210q\340\010\017\210w\220a\330\010\017\210q";
static const char __pyx_k_tb_forloop_accum_no_red_op[] = "tb_forloop_accum_no_red_op";
static const char __pyx_k_A_q_t9_B_1HAXUV_F_q_E_q_waq[] = "\200A\330\010\021\320\021/\250q\260\001\330\010\037\230t\2409\320,B\300!\3001\300H\310A\310X\320UV\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_CyKNCustomizedOp_get_bgraph[] = "CyKNCustomizedOp.get_bgraph";
static const char __pyx_k_CyKNGraph___setstate_cython[] = "CyKNGraph.__setstate_cython__";
static const char __pyx_k_CyTBGraph___setstate_cython[] = "CyTBGraph.__setstate_cython__";
static const char __pyx_k_CyTBGraph_forloop_accum_max[] = "CyTBGraph.forloop_accum_max";
static const char __pyx_k_CyTBInputOp___reduce_cython[] = "CyTBInputOp.__reduce_cython__";
static const char __pyx_k_convert_dtype_to_torch_type[] = "convert_dtype_to_torch_type";
static const char __pyx_k_convert_torch_type_to_dtype[] = "convert_torch_type_to_dtype";
static const char __pyx_k_get_kn_operator_type_string[] = "get_kn_operator_type_string";
static const char __pyx_k_get_tb_operator_type_string[] = "get_tb_operator_type_string";
static const char __pyx_k_uCq_q_c_q_c_q_c_q_c_q_c_q_q[] = "\200\001\330\004\007\200u\210C\210q\330\010\017\210q\330\t\016\210c\220\021\330\010\017\210q\330\t\016\210c\220\021\330\010\017\210q\330\t\016\210c\220\021\330\010\017\210q\330\t\016\210c\220\021\330\010\017\210q\330\t\016\210c\220\021\330\010\017\210q\340\010\017\210q";
static const char __pyx_k_CyKNGraph__kn_tensor_to_dict[] = "CyKNGraph._kn_tensor_to_dict";
static const char __pyx_k_CyKNGraph__tb_tensor_to_dict[] = "CyKNGraph._tb_tensor_to_dict";
static const char __pyx_k_CyKNGraph_attach_cuda_tensor[] = "CyKNGraph.attach_cuda_tensor";
static const char __pyx_k_CyKNGraph_get_input_dtensors[] = "CyKNGraph.get_input_dtensors";
static const char __pyx_k_CyKNOperator___reduce_cython[] = "CyKNOperator.__reduce_cython__";
static const char __pyx_k_CyTBOperator___reduce_cython[] = "CyTBOperator.__reduce_cython__";
static const char __pyx_k_CyTBOutputOp___reduce_cython[] = "CyTBOutputOp.__reduce_cython__";
static const char __pyx_k_s_s_Q_E_1A_E_1A_E_1A_AQ_I_m1[] = "\320\004\\\320\\]\330\010\017\210s\220!\220<\230s\240#\240Q\340\010\024\220E\230\032\2401\240A\330\010\024\220E\230\032\2401\240A\330\010\024\220E\230\032\2401\240A\330\010\030\320\030,\250A\250Q\330\010\014\210I\220[\240\001\240\027\250\010\260\016\270m\3101";
static const char __pyx_k_A_83a_G1A_G1Cq_U_3aq_gQa_I_81[] = "\200A\340\010\013\2108\2203\220a\330\014\024\220G\2301\230A\340\014\024\220G\2301\230C\230q\240\001\330\014\020\220\005\220U\230!\2303\230a\230q\330\020\030\230\001\230\025\230g\240Q\240a\330\010\014\210I\220\\\240\021\240!\2408\2501";
static const char __pyx_k_A_d_AQ_a_E_aq_Q_2_4vQ_7_7_1_q[] = "\200A\340\010\016\210d\220&\320\030,\250A\250Q\330\010\026\220a\330\010\014\210E\220\025\220a\220q\330\014\022\220&\230\005\230Q\320\0362\260(\270!\2704\270v\300Q\330\014\023\2207\230!\2307\240!\2401\330\010\017\210q";
static const char __pyx_k_CyKNGraph_attach_torch_tensor[] = "CyKNGraph.attach_torch_tensor";
static const char __pyx_k_CyKNGraph_generate_task_graph[] = "CyKNGraph.generate_task_graph";
static const char __pyx_k_CyKNGraph_get_graph_structure[] = "CyKNGraph.get_graph_structure";
static const char __pyx_k_CyTBInputOp___setstate_cython[] = "CyTBInputOp.__setstate_cython__";
static const char __pyx_k_input_map_must_be_of_length_3[] = "input_map must be of length 3";
static const char __pyx_k_A_1_uA_RVV_ffg_1_5_q_T_A_I_PPQ[] = "\200A\330\0101\260\026\260u\270A\270\\\310\031\320RV\320V\\\320\\f\320fg\330\010\033\2301\330\010\013\2105\220\007\220q\330\014\035\230T\240\027\250\001\250\021\330\014\024\220A\330\010\014\210I\320\025)\250\021\250&\260\010\270\010\320@P\320PQ";
static const char __pyx_k_CyKNOperator___setstate_cython[] = "CyKNOperator.__setstate_cython__";
static const char __pyx_k_CyTBOperator___setstate_cython[] = "CyTBOperator.__setstate_cython__";
static const char __pyx_k_CyTBOutputOp___setstate_cython[] = "CyTBOutputOp.__setstate_cython__";
static const char __pyx_k_a_s_c_A_5_5_5_87_7_t9Ja_R__mmn[] = "\320\004`\320`a\330\010\017\210s\220!\220;\230c\240\023\240A\340\010\023\2205\230\t\240\021\240!\330\010\023\2205\230\t\240\021\240!\330\010\023\2205\230\t\240\021\240!\330\010(\250\001\330\010\013\2108\2207\230!\330\014\033\2307\240!\330\010\037\230t\2409\250J\260a\260~\300]\320R_\320_m\320mn\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_output_map_must_be_of_length_3[] = "output_map must be of length 3";
static const char __pyx_k_string_to_accum_rescale_optype[] = "string_to_accum_rescale_optype";
static const char __pyx_k_t81_q_Zq_q_XQ_q_XQ_q_XQ_q_Ya_q[] = "\320\000\"\240!\330\004\007\200t\2108\2201\330\010\017\210q\330\t\r\210Z\220q\330\010\017\210q\330\t\r\210X\220Q\330\010\017\210q\330\t\r\210X\220Q\330\010\017\210q\330\t\r\210X\220Q\330\010\017\210q\330\t\r\210Y\220a\330\010\017\210q\330\t\r\210X\220Q\330\010\017\210q\340\010\016\210l\230!\2302\320\0354\260A";
static const char __pyx_k_tb_forloop_accum_red_ld_rms_op[] = "tb_forloop_accum_red_ld_rms_op";
static const char __pyx_k_tb_forloop_accum_red_ld_sum_op[] = "tb_forloop_accum_red_ld_sum_op";
static const char __pyx_k_uCuA_q_c_a_q_c_a_q_c_a_q_c_a_q[] = "\200\001\330\004\007\200u\210C\210u\220A\330\010\017\210q\330\t\016\210c\220\025\220a\330\010\017\210q\330\t\016\210c\220\025\220a\330\010\017\210q\330\t\016\210c\220\025\220a\330\010\017\210q\330\t\016\210c\220\025\220a\330\010\017\210q\330\t\016\210c\220\025\220a\330\010\017\210q\330\t\016\210c\220\025\220a\330\010\017\210q\340\010\016\210l\230!\2302\320\0354\260A";
static const char __pyx_k_xs_q_A_q_A_q_A_q_A_q_A_q_A_q_A[] = "\200\001\330\004\007\200x\210s\220!\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\340\010\017\320\017!\240\022\2403\240a\240q";
static const char __pyx_k_81_WAS_E_as_1_t1A_q_1A_E_as_1_A[] = "\320\004;\2708\3001\360\006\000\t\016\210W\220A\220S\230\001\230\021\330\010\014\210E\220\025\220a\220s\230!\2301\330\014\021\220\021\220%\220t\2301\230A\330\010\020\220\007\220q\230\003\2301\230A\330\010\014\210E\220\025\220a\220s\230!\2301\330\014\024\220A\220U\230'\240\021\240!\340\010\021\320\021'\240q\250\001\330\010\037\230t\2409\250N\270!\2707\300*\310H\320TU\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_A_1_WA_YgQa_A_waq_7_7_3aq_U_3aq[] = "\200A\330\010\033\2301\330\010\013\210:\220W\230A\330\014\035\230Y\240g\250Q\250a\330\014\024\220A\340\010\017\210w\220a\220q\330\010\013\2107\220'\230\021\330\014\023\2207\230!\2303\230a\230q\330\014\020\220\005\220U\230!\2303\230a\230q\330\020\027\220q\230\005\230V\2401\240A\330\010\014\210I\220^\2401\240G\2501";
static const char __pyx_k_A_A_d_1_E_as_q_Qa_is_1_WAT_7q_q[] = "\200A\330\010\024\220A\330\010\016\210d\220)\2301\330\010\014\210E\220\025\220a\220s\230%\230q\330\014\021\220\034\230Q\230a\330\014\016\210i\220s\230!\2301\330\014\025\220W\230A\230T\320!7\260q\270\001\330\010\017\210q";
static const char __pyx_k_A_r_Qd_5Qc_U_DWWX_at_6as_e2EYYZ[] = "\200A\330\010\t\330\014\027\220r\230\021\330\014\035\230Q\230d\320\"5\260Q\260c\270\024\270U\300\"\320DW\320WX\330\014\036\230a\230t\320#6\260a\260s\270$\270e\3002\320EY\320YZ\340\010\013\2108\2203\220b\230\001\330\014\027\220{\240!\2406\250\025\250a\320/D\300B\300i\310v\320UV\330\014\017\210q\220\017\230x\240q\330\014\017\210q\320\020!\240\030\250\021\330\014\017\210q\220\001\330\020\030\230\010\240\001\340\r\026\220c\230\022\2301\330\014\030\230\014\240A\240V\2505\260\001\3201F\300b\310\t\320QW\320WX\330\014\017\210q\320\020 \240\t\250\021\330\014\017\210q\320\020!\240\031\250!\330\014\017\210q\220\001\330\020\030\230\t\240\021\340\010\017\210q";
static const char __pyx_k_A_was_1_E_as_1_vQc_A_q_Q_AV1D_1[] = "\200A\340\010\017\210w\220a\220s\230!\2301\340\010\014\210E\220\025\220a\220s\230!\2301\330\014\017\210v\220Q\220c\230\023\230A\330\020\027\220q\230\005\230Q\340\020\030\230\004\230A\230V\2401\240D\250\003\2501\330\020\024\220F\230!\2301\330\020\027\220q\230\005\230Q\230a\340\010\026\220d\230)\240;\250a\250y\270\n\300&\310\001\330\010\026\220a\330\010\014\210E\220\025\220a\220q\330\014\022\220&\230\005\230Q\320\0362\260(\270!\2704\270v\300Q\330\014\023\2207\230!\2307\240!\2401\330\010\017\210q";
static const char __pyx_k_CyKNGraph__get_kn_operator_info[] = "CyKNGraph._get_kn_operator_info";
static const char __pyx_k_CyKNGraph__get_tb_operator_info[] = "CyKNGraph._get_tb_operator_info";
static const char __pyx_k_CyKNGraph_attach_nvshmem_tensor[] = "CyKNGraph.attach_nvshmem_tensor";
static const char __pyx_k_CyKNGraph_get_owner_independent[] = "CyKNGraph.get_owner_independent_hash";
static const char __pyx_k_CyKNOperator_get_input_dtensors[] = "CyKNOperator.get_input_dtensors";
static const char __pyx_k_CyTBGraph_forloop_accum_rescale[] = "CyTBGraph.forloop_accum_rescale";
static const char __pyx_k_CyTBOperator_get_input_stensors[] = "CyTBOperator.get_input_stensors";
static const char __pyx_k_DDWWj_k_A_A_X_X_k_k_n_n_o_vWA_g[] = "\320\000%\320%D\320DW\320Wj\360\000\000k\001A\002\360\000\000A\002X\002\360\000\000X\002k\002\360\000\000k\002@\003\360\000\000@\003n\003\360\000\000n\003o\003\360\006\000\005\013\210'\220\021\220!\330\004\007\200v\210W\220A\330\010\016\210g\220Q\220c\230\021\230!\330\010\014\210E\220\025\220a\220s\230!\2301\330\014\023\2204\220q\230\005\230Q\230d\240#\240W\250A\330\014\023\2203\220a\220u\230A\230T\240\023\240C\240q\330\014\022\220!\2202\220U\230%\230q\240\002\240!\2401\330\014\022\220!\2202\220U\230%\230q\240\002\240!\2401\330\014\022\220!\2202\220U\230%\230q\240\002\240!\2401\360\006\000\005\013\210'\220\021\220!\330\004\007\200v\210W\220A\330\010\016\210g\220Q\220c\230\021\230!\330\010\014\210E\220\025\220a\220s\230!\2301\330\014\023\2204\220q\230\005\230Q\230d\240#\240W\250A\330\014\023\2203\220a\220u\230A\230T\240\023\240C\240q\330\014\022\220!\2202\220U\230%\230q\240\002\240!\2401\330\014\022\220!\2202\220U\230%\230q\240\002\240!\2401\330\014\022\220!\2202\220U\230%\230q\240\002\240!\2401\360\006\000\005\016\210W\220A\220Q\330\004\007\200y\220\007\220q\330\010\021\220\027\230\001\230\023\230A\230Q\330\010\014\210E\220\025\220a\220s\230!\2301\330\014\023\2204\220q\230\010\240\001\240\024\240S\250\007\250q\330\014\023\2203\220a\220x\230q\240\004\240C\240s\250!\330\014\025\220Q\220b\230\005\230X\240Q\240b\250\001\250\021\330\014\025\220Q\220b\230\005\230X\240Q\240b\250\001\250\021\330\014\025\220Q\220b\230\005\230X\240Q\240b\250\001\250\021\340\004\013\210:\220S\230\006\230a\340\004\016\210g\220Q\220a\360\006\000\005\013\210'\220\021\220!\330\004\007\200v\210W\220A\330\010\016\210g\220Q\220c\230\021\230!\330\010\014\210E\220\025\220a\220s\230!\2301\330\014\022\220!\2205\230\005\230Q\230a\360\006\000\005\r\210G\2201\220A\330\004\007\200x\210w\220a\330\010\020\220\007\220q\230\003\2301\230A\330\010\014\210E\220\025\220a\220s\230!\2301\330\014\024\220A\220U\230'\240\021\240!\360\006\000\005\014\320\013\036\230c\240\021\360\006\000\005\020\210q\340\004&\240a\330\004""\007\320\007\033\2307\240!\330\010\031\320\031,\250G\2601\260A\330\010\037\230q\340\004\031\230\021\330\004\007\200\177\220g\230Q\330\010\031\230\036\240w\250a\250q\330\010\022\220!\340\004\031\230\021\330\004\n\210-\220q\230\013\240;\320.B\300,\310h\320V^\320^i\320iu\320u}\360\000\000~\001H\002\360\000\000H\002^\002\360\000\000^\002h\002\360\000\000h\002q\002\360\000\000q\002r\002\330\004\025\220Q\330\004\010\210\005\210U\220!\2201\330\010\016\210f\220E\230\021\320\032.\250j\270\001\270\024\270V\3001\330\010\022\220'\230\021\230)\2401\240A\340\004\013\2101";
static const char __pyx_k_Each_griddim_must_be_a_tuple_of[] = "Each griddim must be a tuple of 3 integers";
static const char __pyx_k_WWq_r_L_L_d_d_K_K_L_a_t2T_1_Q_Q[] = "\320\000W\320Wq\360\000\000r\001L\002\360\000\000L\002d\002\360\000\000d\002K\003\360\000\000K\003L\003\360\006\000\005\026\220]\240!\330\004\025\220]\240!\330\004\025\320\025.\250a\340\004\007\320\007\027\220t\2302\230T\320!1\260\024\260Q\330\010\031\320\031-\250Q\330\010\031\320\031-\320-=\270R\270q\330\010\031\320\031,\250A\360\010\000\005\023\220'\230\021\230#\230Q\230a\330\004\010\210\005\210U\220!\2203\220a\220q\330\010\026\220a\220r\230\027\240\001\240\023\240A\240]\260!\2601\330\010\014\210E\220\025\220a\220s\230!\230=\250\001\250\021\330\014\032\230!\2302\230Q\230e\240=\260\001\260\022\2601\260A\360\006\000\005#\240)\2501\250K\260{\320BU\320UV\360\006\000\005-\250A\360\006\000\005\t\210\005\210U\220!\2203\220a\220v\230Q\330\010\037\230q\330\010!\240\021\330\010\023\2203\220a\220v\320\035/\250q\260\002\260!\330\010\014\210E\220\025\220a\220q\330\014\034\230G\2401\240F\320*<\270A\270R\270v\300Q\300a\330\014\036\230g\240Q\240f\320,>\270a\270r\300\030\310\021\310!\330\010\031\230\027\240\001\330\014\032\230&\320 2\260!\2602\260Q\330\014\025\220Q\330\014\027\220q\360\006\000\005\006\330\010\020\220\006\220e\2307\240!\2401\330\010\024\220F\230!\330\010\031\230\026\230q\330\010\035\230V\2401\330\010\035\230Q";
static const char __pyx_k_q_t81_uA_Zq_uA_XQ_uA_XQ_uA_XQ_u[] = "\320\000'\240q\330\004\007\200t\2108\2201\330\010\017\210u\220A\330\t\r\210Z\220q\330\010\017\210u\220A\330\t\r\210X\220Q\330\010\017\210u\220A\330\t\r\210X\220Q\330\010\017\210u\220A\330\t\r\210X\220Q\330\010\017\210u\220A\330\t\r\210Y\220a\330\010\017\210u\220A\330\t\r\210X\220Q\330\010\017\210u\220A\340\010\017\210w\320\026-\250W\260A\260Q";
static const char __pyx_k_tb_forloop_accum_no_red_rescale[] = "tb_forloop_accum_no_red_rescale_op";
static const char __pyx_k_tb_forloop_accum_red_ld_mean_op[] = "tb_forloop_accum_red_ld_mean_op";
static const char __pyx_k_A_2Yc_2Q_9_T_bH_4_3d_rI_q_2Q_9_T[] = "\200A\330\010\013\2102\210Y\220c\230\021\330\014\r\330\020\033\2302\230Q\330\020!\240\021\240$\320&9\270\021\270#\270T\300\025\300b\320H[\320[\\\330\020\"\240!\2404\320':\270!\2703\270d\300%\300r\320I]\320]^\330\020\032\230$\320\036/\250q\260\001\360\006\000\r\016\330\020\033\2302\230Q\330\020!\240\021\240$\320&9\270\021\270#\270T\300\025\300b\320H[\320[\\\330\020\"\240!\2404\320':\270!\2703\270d\300%\300r\320I]\320]^";
static const char __pyx_k_A_d_aq_RS_a_1_E_aq_7_81A_q_Qa_uA[] = "\200A\360\006\000\t\017\210d\220)\320\033>\270a\270q\300\010\310\n\320RS\330\010\026\220a\330\010\023\2201\330\010\014\210E\220\025\220a\220q\330\014\023\2207\230!\2308\2401\240A\330\014\020\220\007\220q\230\005\230Q\230a\330\010\017\210u\220A\220W\230E\240\021\240!";
static const char __pyx_k_A_gQc_E_as_1_5_t9IQe81_F_q_E_q_w[] = "\200A\340\010\016\210g\220Q\220c\230\021\230!\330\010\014\210E\220\025\220a\220s\230!\2301\330\014\022\220!\2205\320\030(\250\001\250\021\330\010\037\230t\2409\250I\260Q\260e\2708\3001\330\010\014\210F\220%\220q\320\030,\250E\260\026\260q\330\010\017\210w\220a\220q";
static const char __pyx_k_A_t9N_1HA_V5_S_V1_V5_S_V1_wauG1A[] = "\200A\330\010'\240t\2509\260N\300!\3001\300H\310A\330\010\r\210V\2205\230\001\320\031-\250S\260\001\260\024\260V\2701\330\010\r\210V\2205\230\001\320\031-\250S\260\001\260\024\260V\2701\330\010\017\210w\220a\220u\230G\2401\240A";
static const char __pyx_k_A_was_1_E_as_1_4q_at3a_aq_1E_1_5[] = "\200A\340\010\017\210w\220a\220s\230!\2301\340\010\014\210E\220\025\220a\220s\230!\2301\330\014\023\2204\220q\230\006\230a\230t\2403\240a\330\014\020\220\006\220a\220q\330\014\023\2201\220E\230\021\230!\330\010\033\2301\330\010\013\2105\220\007\220q\330\014\035\230T\240\027\250\001\250\021\330\014\024\220A\330\010\037\230t\2409\250M\270\021\270)\300;\310l\320Z[\330\010\021\220\026\220u\230A\320\0351\260\025\260f\270A\330\010\017\210w\220a\220q";
static const char __pyx_k_CyKNCustomizedOp___reduce_cython[] = "CyKNCustomizedOp.__reduce_cython__";
static const char __pyx_k_CyKNCustomizedOp___setstate_cyth[] = "CyKNCustomizedOp.__setstate_cython__";
static const char __pyx_k_CyKNGraph_generate_triton_progra[] = "CyKNGraph.generate_triton_program";
static const char __pyx_k_CyKNGraph_get_input_dtensor_shap[] = "CyKNGraph.get_input_dtensor_shape_and_stride";
static const char __pyx_k_CyKNOperator_get_output_dtensors[] = "CyKNOperator.get_output_dtensors";
static const char __pyx_k_CyTBOperator_get_output_stensors[] = "CyTBOperator.get_output_stensors";
static const char __pyx_k_Each_imap_must_be_a_tuple_of_3_i[] = "Each imap must be a tuple of 3 integers";
static const char __pyx_k_Each_omap_must_be_a_tuple_of_3_i[] = "Each omap must be a tuple of 3 integers";
static const char __pyx_k_Error_tensor_is_None_in_num_dims[] = "Error: tensor is None in num_dims property";
static const char __pyx_k_Note_that_Cython_is_deliberately[] = "Note that Cython is deliberately stricter than PEP-484 and rejects subclasses of builtin types. If you need to pass subclasses then set the 'annotation_typing' directive to False.";
static const char __pyx_k_Unsupported_accum_rescale_optype[] = "Unsupported accum rescale optype";
static const char __pyx_k_Unsupported_threadblock_epilogue[] = "Unsupported threadblock epilogue";
static const char __pyx_k_bgraph_must_be_an_integer_or_cty[] = "bgraph must be an integer or ctypes.c_void_p, but got ";
static const char __pyx_k_block_dim_must_include_3_dimensi[] = "block_dim must include 3 dimensions";
static const char __pyx_k_get_input_dtensor_shape_and_stri[] = "get_input_dtensor_shape_and_stride";
static const char __pyx_k_grid_dim_block_dim_forloop_range[] = "grid_dim, block_dim, forloop_range, dimx must be provided";
static const char __pyx_k_grid_dim_must_include_3_dimensio[] = "grid_dim must include 3 dimensions";
static const char __pyx_k_no_default___reduce___due_to_non[] = "no default __reduce__ due to non-trivial __cinit__";
static const char __pyx_k_tb_forloop_accum_red_ld_sum_resc[] = "tb_forloop_accum_red_ld_sum_rescale_op";
static const char __pyx_k_tb_forloop_accum_redtox_ld_sum_o[] = "tb_forloop_accum_redtox_ld_sum_op";
static const char __pyx_k_xs_q_A_q_A_q_A_q_A_q_A_q_A_q_A_2[] = "\200\001\330\004\007\200x\210s\220!\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330""\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\330\t\021\220\023\220A\330\010\017\210q\340\010\017\320\017!\240\022\2403\240a\240q";
/* #### Code section: decls ### */
static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags); /* proto */
static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_2is_fp16(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_4is_bf16(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_6is_fp32(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_8is_fp64(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_10is_int1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_12is_int8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_14is_int16(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_16is_int32(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_18is_int64(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_20is_uint8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_22is_uint16(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_24is_uint32(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_26is_uint64(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_28__eq__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_30__ne__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_32__hash__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_34__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_5dtype_36is_dtype(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type_str); /* proto */
static PyObject *__pyx_pf_6yirage_4core_get_kn_operator_type_string(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_op_type); /* proto */
static PyObject *__pyx_pf_6yirage_4core_2get_tb_operator_type_string(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_op_type); /* proto */
static PyObject *__pyx_pf_6yirage_4core_4convert_dtype_to_ctype(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type); /* proto */
static PyObject *__pyx_pf_6yirage_4core_6convert_dtype_to_torch_type(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type); /* proto */
static PyObject *__pyx_pf_6yirage_4core_8convert_ctype_to_dtype(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type); /* proto */
static PyObject *__pyx_pf_6yirage_4core_10convert_torch_type_to_dtype(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type); /* proto */
static PyObject *__pyx_pf_6yirage_4core_12string_to_tbepilogue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_epilogue); /* proto */
static PyObject *__pyx_pf_6yirage_4core_14string_to_accum_optype(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_acc); /* proto */
static PyObject *__pyx_pf_6yirage_4core_16string_to_accum_rescale_optype(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_acc); /* proto */
static PyObject *__pyx_pf_6yirage_4core_7DTensor_4guid___get__(struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_7DTensor_6tensor___get__(struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self); /* proto */
static int __pyx_pf_6yirage_4core_7DTensor_6tensor_2__set__(struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6yirage_4core_7DTensor_8num_dims___get__(struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_7DTensor_5dtype___get__(struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self); /* proto */
static int __pyx_pf_6yirage_4core_7DTensor___cinit__(struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self, PyObject *__pyx_v_tensor); /* proto */
static PyObject *__pyx_pf_6yirage_4core_7DTensor_2dim(struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self, int __pyx_v_idx); /* proto */
static PyObject *__pyx_pf_6yirage_4core_7DTensor_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_7DTensor_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6yirage_4core_7STensor_4guid___get__(struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_7STensor_6tensor___get__(struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self); /* proto */
static int __pyx_pf_6yirage_4core_7STensor_6tensor_2__set__(struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6yirage_4core_7STensor_8num_dims___get__(struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_7STensor_5dtype___get__(struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self); /* proto */
static int __pyx_pf_6yirage_4core_7STensor___cinit__(struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self, PyObject *__pyx_v_tensor); /* proto */
static PyObject *__pyx_pf_6yirage_4core_7STensor_2dim(struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self, int __pyx_v_idx); /* proto */
static PyObject *__pyx_pf_6yirage_4core_7STensor_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_7STensor_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6yirage_4core_12CyKNOperator_get_input_dtensors(struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_12CyKNOperator_2get_output_dtensors(struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_12CyKNOperator_7op_type___get__(struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_self); /* proto */
static int __pyx_pf_6yirage_4core_12CyKNOperator_4__cinit__(struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_self, PyObject *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_6yirage_4core_12CyKNOperator_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_12CyKNOperator_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6yirage_4core_16CyKNCustomizedOp___cinit__(struct __pyx_obj_6yirage_4core_CyKNCustomizedOp *__pyx_v_self, PyObject *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_6yirage_4core_16CyKNCustomizedOp_2get_bgraph(struct __pyx_obj_6yirage_4core_CyKNCustomizedOp *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_16CyKNCustomizedOp_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyKNCustomizedOp *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_16CyKNCustomizedOp_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyKNCustomizedOp *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6yirage_4core_12CyTBOperator_get_input_stensors(struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_12CyTBOperator_2get_output_stensors(struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_12CyTBOperator_7op_type___get__(struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_self); /* proto */
static int __pyx_pf_6yirage_4core_12CyTBOperator_4__cinit__(struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_self, PyObject *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_6yirage_4core_12CyTBOperator_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_12CyTBOperator_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6yirage_4core_11CyTBInputOp___cinit__(struct __pyx_obj_6yirage_4core_CyTBInputOp *__pyx_v_self, PyObject *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_6yirage_4core_11CyTBInputOp_9input_map___get__(struct __pyx_obj_6yirage_4core_CyTBInputOp *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_11CyTBInputOp_11forloop_dim___get__(struct __pyx_obj_6yirage_4core_CyTBInputOp *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_11CyTBInputOp_12dtensor_guid___get__(struct __pyx_obj_6yirage_4core_CyTBInputOp *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_11CyTBInputOp_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBInputOp *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_11CyTBInputOp_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBInputOp *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6yirage_4core_12CyTBOutputOp___cinit__(struct __pyx_obj_6yirage_4core_CyTBOutputOp *__pyx_v_self, PyObject *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_6yirage_4core_12CyTBOutputOp_10output_map___get__(struct __pyx_obj_6yirage_4core_CyTBOutputOp *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_12CyTBOutputOp_11forloop_dim___get__(struct __pyx_obj_6yirage_4core_CyTBOutputOp *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_12CyTBOutputOp_12dtensor_guid___get__(struct __pyx_obj_6yirage_4core_CyTBOutputOp *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_12CyTBOutputOp_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBOutputOp *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_12CyTBOutputOp_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBOutputOp *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6yirage_4core_9CyKNGraph___cinit__(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, PyObject *__pyx_v_graph, bool __pyx_v_disable_fingerprint); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_2new_input(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, PyObject *__pyx_v_dims, PyObject *__pyx_v_strides, PyObject *__pyx_v_dtype); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_4mark_output(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A, PyObject *__pyx_v_strides); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_6matmul(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_B); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_8reduction(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input, int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_10rms_norm(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input, PyObject *__pyx_v_normalized_shape); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_12exp(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_14silu(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_16gelu(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_18relu(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_20clamp(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input, float __pyx_v_min_val, float __pyx_v_max_val); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_22sqrt(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_24square(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_26add(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_B); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_28mul(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_B); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_30div(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_B); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_32pow(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_B); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_34customized(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, PyObject *__pyx_v_inputs, struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_bgraph); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_36generate_triton_program(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, PyObject *__pyx_v_filepath); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_38get_input_dtensors(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_40get_owner_independent_hash(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_42_kn_tensor_to_dict(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_44_tb_tensor_to_dict(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_t); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_46_get_tb_operator_info(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_48_get_bgraph_info(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_50_get_kn_operator_info(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_op); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_52get_graph_structure(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_54get_num_inputs(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_56get_num_outputs(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_58get_input_dtensor_shape_and_stride(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_60attach_torch_tensor(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_tensor, PyObject *__pyx_v_torch_tensor, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_62attach_cuda_tensor(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_tensor, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_64attach_nvshmem_tensor(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_tensor, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_66fuse_tensors(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, PyObject *__pyx_v_inputs, int __pyx_v_fused_dim, int __pyx_v_num_groups, PyObject *__pyx_v_name); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_68register_task(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_bgraph, PyObject *__pyx_v_task_type, PyObject *__pyx_v_params); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_70generate_task_graph(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, int __pyx_v_num_gpus, int __pyx_v_my_gpu_id); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_72__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_74__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static int __pyx_pf_6yirage_4core_9CyTBGraph___cinit__(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, PyObject *__pyx_v_grid_dim, PyObject *__pyx_v_block_dim, int __pyx_v_forloop_range, int __pyx_v_dimx, PyObject *__pyx_v_bgraph); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_2new_input(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_dtensor, PyObject *__pyx_v_input_map, int __pyx_v_forloop_dim, bool __pyx_v_store_in_dmem); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_4new_output(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_stensor, PyObject *__pyx_v_output_map, int __pyx_v_forloop_dim, PyObject *__pyx_v_epilogue); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_6matmul(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_8exp(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_10silu(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_12gelu(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_14relu(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_16clamp(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, float __pyx_v_min_val, float __pyx_v_max_val); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_18square(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_20sqrt(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_22mul_scalar(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, float __pyx_v_scalar); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_24add(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_26mul(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_28div(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_30sub(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_32reduction(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_34reduction_max(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_36rms_norm(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_38concat(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B, int __pyx_v_dim); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_40forloop_accum(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, PyObject *__pyx_v_acc); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_42forloop_accum_rescale(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B, PyObject *__pyx_v_acc); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_44forloop_accum_max(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_8grid_dim___get__(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_13forloop_range___get__(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_9operators___get__(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_46__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_48__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state); /* proto */
static PyObject *__pyx_pf_6yirage_4core_18search(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_input_graph, int __pyx_v_max_num_new_graphs, PyObject *__pyx_v_imaps, PyObject *__pyx_v_omaps, PyObject *__pyx_v_griddims, PyObject *__pyx_v_blockdims, PyObject *__pyx_v_fmaps, PyObject *__pyx_v_franges, PyObject *__pyx_v_previous_checkpoint, bool __pyx_v_verbose, PyObject *__pyx_v_default_config, bool __pyx_v_is_formal_verified); /* proto */
static PyObject *__pyx_pf_6yirage_4core_20generate_cuda_program(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_input_graph, int __pyx_v_target_cc, PyObject *__pyx_v_input_strides, int __pyx_v_num_warp_groups, int __pyx_v_pipeline_stages, bool __pyx_v_profiling, bool __pyx_v_enable_online_softmax); /* proto */
static PyObject *__pyx_pf_6yirage_4core_22generate_nki_program(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_input_graph, int __pyx_v_target_cc); /* proto */
static PyObject *__pyx_pf_6yirage_4core_24generate_triton_program(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_input_graph, int __pyx_v_target_cc); /* proto */
static PyObject *__pyx_pf_6yirage_4core_26set_gpu_device_id(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_gpu_id); /* proto */
static PyObject *__pyx_pf_6yirage_4core_28cy_to_json(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_input_graph, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_pf_6yirage_4core_30cy_from_json(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename); /* proto */
static PyObject *__pyx_tp_new_6yirage_4core_DTensor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6yirage_4core_STensor(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6yirage_4core_CyKNOperator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6yirage_4core_CyKNCustomizedOp(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6yirage_4core_CyTBOperator(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6yirage_4core_CyTBInputOp(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6yirage_4core_CyTBOutputOp(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6yirage_4core_CyKNGraph(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6yirage_4core_CyTBGraph(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
/* #### Code section: late_includes ### */
/* #### Code section: module_state ### */
/* SmallCodeConfig */
#ifndef CYTHON_SMALL_CODE
#if defined(__clang__)
    #define CYTHON_SMALL_CODE
#elif defined(__GNUC__) && (__GNUC__ > 4 || (__GNUC__ == 4 && __GNUC_MINOR__ >= 3))
    #define CYTHON_SMALL_CODE __attribute__((cold))
#else
    #define CYTHON_SMALL_CODE
#endif
#endif

typedef struct {
  PyObject *__pyx_d;
  PyObject *__pyx_b;
  PyObject *__pyx_cython_runtime;
  PyObject *__pyx_empty_tuple;
  PyObject *__pyx_empty_bytes;
  PyObject *__pyx_empty_unicode;
  #ifdef __Pyx_CyFunction_USED
  PyTypeObject *__pyx_CyFunctionType;
  #endif
  #ifdef __Pyx_FusedFunction_USED
  PyTypeObject *__pyx_FusedFunctionType;
  #endif
  #ifdef __Pyx_Generator_USED
  PyTypeObject *__pyx_GeneratorType;
  #endif
  #ifdef __Pyx_IterableCoroutine_USED
  PyTypeObject *__pyx_IterableCoroutineType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineAwaitType;
  #endif
  #ifdef __Pyx_Coroutine_USED
  PyTypeObject *__pyx_CoroutineType;
  #endif
  PyTypeObject *__pyx_ptype_7cpython_4type_type;
  PyTypeObject *__pyx_ptype_7cpython_4bool_bool;
  PyTypeObject *__pyx_ptype_7cpython_7complex_complex;
  PyTypeObject *__pyx_ptype_7cpython_5array_array;
  PyObject *__pyx_type_6yirage_4core_DTensor;
  PyObject *__pyx_type_6yirage_4core_STensor;
  PyObject *__pyx_type_6yirage_4core_CyKNOperator;
  PyObject *__pyx_type_6yirage_4core_CyKNCustomizedOp;
  PyObject *__pyx_type_6yirage_4core_CyTBOperator;
  PyObject *__pyx_type_6yirage_4core_CyTBInputOp;
  PyObject *__pyx_type_6yirage_4core_CyTBOutputOp;
  PyObject *__pyx_type_6yirage_4core_CyKNGraph;
  PyObject *__pyx_type_6yirage_4core_CyTBGraph;
  PyTypeObject *__pyx_ptype_6yirage_4core_DTensor;
  PyTypeObject *__pyx_ptype_6yirage_4core_STensor;
  PyTypeObject *__pyx_ptype_6yirage_4core_CyKNOperator;
  PyTypeObject *__pyx_ptype_6yirage_4core_CyKNCustomizedOp;
  PyTypeObject *__pyx_ptype_6yirage_4core_CyTBOperator;
  PyTypeObject *__pyx_ptype_6yirage_4core_CyTBInputOp;
  PyTypeObject *__pyx_ptype_6yirage_4core_CyTBOutputOp;
  PyTypeObject *__pyx_ptype_6yirage_4core_CyKNGraph;
  PyTypeObject *__pyx_ptype_6yirage_4core_CyTBGraph;
  __Pyx_CachedCFunction __pyx_umethod_PyDict_Type_pop;
  PyObject *__pyx_k_;
  PyObject *__pyx_tuple[2];
  PyObject *__pyx_codeobj_tab[117];
  PyObject *__pyx_string_tab[515];
/* #### Code section: module_state_contents ### */
/* CommonTypesMetaclass.module_state_decls */
PyTypeObject *__pyx_CommonTypesMetaclassType;

/* CachedMethodType.module_state_decls */
#if CYTHON_COMPILING_IN_LIMITED_API
PyObject *__Pyx_CachedMethodType;
#endif

/* CodeObjectCache.module_state_decls */
struct __Pyx_CodeObjectCache __pyx_code_cache;

/* #### Code section: module_state_end ### */
} __pyx_mstatetype;

#if CYTHON_USE_MODULE_STATE
#ifdef __cplusplus
namespace {
extern struct PyModuleDef __pyx_moduledef;
} /* anonymous namespace */
#else
static struct PyModuleDef __pyx_moduledef;
#endif

#define __pyx_mstate_global (__Pyx_PyModule_GetState(__Pyx_State_FindModule(&__pyx_moduledef)))

#define __pyx_m (__Pyx_State_FindModule(&__pyx_moduledef))
#else
static __pyx_mstatetype __pyx_mstate_global_static =
#ifdef __cplusplus
    {};
#else
    {0};
#endif
static __pyx_mstatetype * const __pyx_mstate_global = &__pyx_mstate_global_static;
#endif
/* #### Code section: constant_name_defines ### */
#define __pyx_n_u_A __pyx_string_tab[0]
#define __pyx_n_u_AssertionError __pyx_string_tab[1]
#define __pyx_n_u_B __pyx_string_tab[2]
#define __pyx_n_u_CyKNCustomizedOp __pyx_string_tab[3]
#define __pyx_n_u_CyKNCustomizedOp___reduce_cython __pyx_string_tab[4]
#define __pyx_n_u_CyKNCustomizedOp___setstate_cyth __pyx_string_tab[5]
#define __pyx_n_u_CyKNCustomizedOp_get_bgraph __pyx_string_tab[6]
#define __pyx_n_u_CyKNGraph __pyx_string_tab[7]
#define __pyx_n_u_CyKNGraph___reduce_cython __pyx_string_tab[8]
#define __pyx_n_u_CyKNGraph___setstate_cython __pyx_string_tab[9]
#define __pyx_n_u_CyKNGraph__get_bgraph_info __pyx_string_tab[10]
#define __pyx_n_u_CyKNGraph__get_kn_operator_info __pyx_string_tab[11]
#define __pyx_n_u_CyKNGraph__get_tb_operator_info __pyx_string_tab[12]
#define __pyx_n_u_CyKNGraph__kn_tensor_to_dict __pyx_string_tab[13]
#define __pyx_n_u_CyKNGraph__tb_tensor_to_dict __pyx_string_tab[14]
#define __pyx_n_u_CyKNGraph_add __pyx_string_tab[15]
#define __pyx_n_u_CyKNGraph_attach_cuda_tensor __pyx_string_tab[16]
#define __pyx_n_u_CyKNGraph_attach_nvshmem_tensor __pyx_string_tab[17]
#define __pyx_n_u_CyKNGraph_attach_torch_tensor __pyx_string_tab[18]
#define __pyx_n_u_CyKNGraph_clamp __pyx_string_tab[19]
#define __pyx_n_u_CyKNGraph_customized __pyx_string_tab[20]
#define __pyx_n_u_CyKNGraph_div __pyx_string_tab[21]
#define __pyx_n_u_CyKNGraph_exp __pyx_string_tab[22]
#define __pyx_n_u_CyKNGraph_fuse_tensors __pyx_string_tab[23]
#define __pyx_n_u_CyKNGraph_gelu __pyx_string_tab[24]
#define __pyx_n_u_CyKNGraph_generate_task_graph __pyx_string_tab[25]
#define __pyx_n_u_CyKNGraph_generate_triton_progra __pyx_string_tab[26]
#define __pyx_n_u_CyKNGraph_get_graph_structure __pyx_string_tab[27]
#define __pyx_n_u_CyKNGraph_get_input_dtensor_shap __pyx_string_tab[28]
#define __pyx_n_u_CyKNGraph_get_input_dtensors __pyx_string_tab[29]
#define __pyx_n_u_CyKNGraph_get_num_inputs __pyx_string_tab[30]
#define __pyx_n_u_CyKNGraph_get_num_outputs __pyx_string_tab[31]
#define __pyx_n_u_CyKNGraph_get_owner_independent __pyx_string_tab[32]
#define __pyx_n_u_CyKNGraph_mark_output __pyx_string_tab[33]
#define __pyx_n_u_CyKNGraph_matmul __pyx_string_tab[34]
#define __pyx_n_u_CyKNGraph_mul __pyx_string_tab[35]
#define __pyx_n_u_CyKNGraph_new_input __pyx_string_tab[36]
#define __pyx_n_u_CyKNGraph_pow __pyx_string_tab[37]
#define __pyx_n_u_CyKNGraph_reduction __pyx_string_tab[38]
#define __pyx_n_u_CyKNGraph_register_task __pyx_string_tab[39]
#define __pyx_n_u_CyKNGraph_relu __pyx_string_tab[40]
#define __pyx_n_u_CyKNGraph_rms_norm __pyx_string_tab[41]
#define __pyx_n_u_CyKNGraph_silu __pyx_string_tab[42]
#define __pyx_n_u_CyKNGraph_sqrt __pyx_string_tab[43]
#define __pyx_n_u_CyKNGraph_square __pyx_string_tab[44]
#define __pyx_n_u_CyKNOperator __pyx_string_tab[45]
#define __pyx_n_u_CyKNOperator___reduce_cython __pyx_string_tab[46]
#define __pyx_n_u_CyKNOperator___setstate_cython __pyx_string_tab[47]
#define __pyx_n_u_CyKNOperator_get_input_dtensors __pyx_string_tab[48]
#define __pyx_n_u_CyKNOperator_get_output_dtensors __pyx_string_tab[49]
#define __pyx_n_u_CyTBGraph __pyx_string_tab[50]
#define __pyx_n_u_CyTBGraph___reduce_cython __pyx_string_tab[51]
#define __pyx_n_u_CyTBGraph___setstate_cython __pyx_string_tab[52]
#define __pyx_n_u_CyTBGraph_add __pyx_string_tab[53]
#define __pyx_n_u_CyTBGraph_clamp __pyx_string_tab[54]
#define __pyx_n_u_CyTBGraph_concat __pyx_string_tab[55]
#define __pyx_n_u_CyTBGraph_div __pyx_string_tab[56]
#define __pyx_n_u_CyTBGraph_exp __pyx_string_tab[57]
#define __pyx_n_u_CyTBGraph_forloop_accum __pyx_string_tab[58]
#define __pyx_n_u_CyTBGraph_forloop_accum_max __pyx_string_tab[59]
#define __pyx_n_u_CyTBGraph_forloop_accum_rescale __pyx_string_tab[60]
#define __pyx_n_u_CyTBGraph_gelu __pyx_string_tab[61]
#define __pyx_n_u_CyTBGraph_matmul __pyx_string_tab[62]
#define __pyx_n_u_CyTBGraph_mul __pyx_string_tab[63]
#define __pyx_n_u_CyTBGraph_mul_scalar __pyx_string_tab[64]
#define __pyx_n_u_CyTBGraph_new_input __pyx_string_tab[65]
#define __pyx_n_u_CyTBGraph_new_output __pyx_string_tab[66]
#define __pyx_n_u_CyTBGraph_reduction __pyx_string_tab[67]
#define __pyx_n_u_CyTBGraph_reduction_max __pyx_string_tab[68]
#define __pyx_n_u_CyTBGraph_relu __pyx_string_tab[69]
#define __pyx_n_u_CyTBGraph_rms_norm __pyx_string_tab[70]
#define __pyx_n_u_CyTBGraph_silu __pyx_string_tab[71]
#define __pyx_n_u_CyTBGraph_sqrt __pyx_string_tab[72]
#define __pyx_n_u_CyTBGraph_square __pyx_string_tab[73]
#define __pyx_n_u_CyTBGraph_sub __pyx_string_tab[74]
#define __pyx_n_u_CyTBInputOp __pyx_string_tab[75]
#define __pyx_n_u_CyTBInputOp___reduce_cython __pyx_string_tab[76]
#define __pyx_n_u_CyTBInputOp___setstate_cython __pyx_string_tab[77]
#define __pyx_n_u_CyTBOperator __pyx_string_tab[78]
#define __pyx_n_u_CyTBOperator___reduce_cython __pyx_string_tab[79]
#define __pyx_n_u_CyTBOperator___setstate_cython __pyx_string_tab[80]
#define __pyx_n_u_CyTBOperator_get_input_stensors __pyx_string_tab[81]
#define __pyx_n_u_CyTBOperator_get_output_stensors __pyx_string_tab[82]
#define __pyx_n_u_CyTBOutputOp __pyx_string_tab[83]
#define __pyx_n_u_CyTBOutputOp___reduce_cython __pyx_string_tab[84]
#define __pyx_n_u_CyTBOutputOp___setstate_cython __pyx_string_tab[85]
#define __pyx_n_u_DTensor __pyx_string_tab[86]
#define __pyx_n_u_DTensor___reduce_cython __pyx_string_tab[87]
#define __pyx_n_u_DTensor___setstate_cython __pyx_string_tab[88]
#define __pyx_n_u_DTensor_dim __pyx_string_tab[89]
#define __pyx_kp_u_Each_griddim_must_be_a_tuple_of __pyx_string_tab[90]
#define __pyx_kp_u_Each_imap_must_be_a_tuple_of_3_i __pyx_string_tab[91]
#define __pyx_kp_u_Each_omap_must_be_a_tuple_of_3_i __pyx_string_tab[92]
#define __pyx_kp_u_Error_index_out_of_range __pyx_string_tab[93]
#define __pyx_kp_u_Error_tensor_is_None_in_num_dims __pyx_string_tab[94]
#define __pyx_n_u_FP_TYPES __pyx_string_tab[95]
#define __pyx_n_u_MemoryError __pyx_string_tab[96]
#define __pyx_kp_u_Note_that_Cython_is_deliberately __pyx_string_tab[97]
#define __pyx_n_u_RuntimeError __pyx_string_tab[98]
#define __pyx_n_u_SINT_TYPES __pyx_string_tab[99]
#define __pyx_n_u_STensor __pyx_string_tab[100]
#define __pyx_n_u_STensor___reduce_cython __pyx_string_tab[101]
#define __pyx_n_u_STensor___setstate_cython __pyx_string_tab[102]
#define __pyx_n_u_STensor_dim __pyx_string_tab[103]
#define __pyx_kp_u_TODO_support_blockdims __pyx_string_tab[104]
#define __pyx_n_u_TypeError __pyx_string_tab[105]
#define __pyx_n_u_UINT_TYPES __pyx_string_tab[106]
#define __pyx_kp_u_Unsupported_accum_optype __pyx_string_tab[107]
#define __pyx_kp_u_Unsupported_accum_rescale_optype __pyx_string_tab[108]
#define __pyx_kp_u_Unsupported_dtype __pyx_string_tab[109]
#define __pyx_kp_u_Unsupported_dtype_2 __pyx_string_tab[110]
#define __pyx_kp_u_Unsupported_threadblock_epilogue __pyx_string_tab[111]
#define __pyx_kp_u__2 __pyx_string_tab[112]
#define __pyx_n_u_acc __pyx_string_tab[113]
#define __pyx_n_u_add __pyx_string_tab[114]
#define __pyx_kp_u_add_note __pyx_string_tab[115]
#define __pyx_n_u_alloc_size __pyx_string_tab[116]
#define __pyx_n_u_allreduce __pyx_string_tab[117]
#define __pyx_n_u_ans __pyx_string_tab[118]
#define __pyx_n_u_array __pyx_string_tab[119]
#define __pyx_n_u_asyncio_coroutines __pyx_string_tab[120]
#define __pyx_n_u_attach_cuda_tensor __pyx_string_tab[121]
#define __pyx_n_u_attach_nvshmem_tensor __pyx_string_tab[122]
#define __pyx_n_u_attach_torch_tensor __pyx_string_tab[123]
#define __pyx_n_u_bf16 __pyx_string_tab[124]
#define __pyx_n_u_bfloat16 __pyx_string_tab[125]
#define __pyx_n_u_bgraph __pyx_string_tab[126]
#define __pyx_kp_u_bgraph_must_be_an_integer_or_cty __pyx_string_tab[127]
#define __pyx_n_u_block_dim __pyx_string_tab[128]
#define __pyx_kp_u_block_dim_must_include_3_dimensi __pyx_string_tab[129]
#define __pyx_n_u_blockdims __pyx_string_tab[130]
#define __pyx_n_u_buf_size __pyx_string_tab[131]
#define __pyx_n_u_c_input_map __pyx_string_tab[132]
#define __pyx_n_u_c_output_map __pyx_string_tab[133]
#define __pyx_n_u_c_type __pyx_string_tab[134]
#define __pyx_n_u_c_void_p __pyx_string_tab[135]
#define __pyx_n_u_cast __pyx_string_tab[136]
#define __pyx_n_u_cblockdims __pyx_string_tab[137]
#define __pyx_n_u_cconfig __pyx_string_tab[138]
#define __pyx_n_u_cdims __pyx_string_tab[139]
#define __pyx_n_u_cfilename __pyx_string_tab[140]
#define __pyx_n_u_cfilepath __pyx_string_tab[141]
#define __pyx_n_u_cfmaps __pyx_string_tab[142]
#define __pyx_n_u_cfranges __pyx_string_tab[143]
#define __pyx_n_u_cgriddims __pyx_string_tab[144]
#define __pyx_n_u_cimaps __pyx_string_tab[145]
#define __pyx_n_u_cinput_strides __pyx_string_tab[146]
#define __pyx_n_u_cinputs __pyx_string_tab[147]
#define __pyx_n_u_cis_formal_verifed __pyx_string_tab[148]
#define __pyx_n_u_clamp __pyx_string_tab[149]
#define __pyx_n_u_cline_in_traceback __pyx_string_tab[150]
#define __pyx_n_u_cname __pyx_string_tab[151]
#define __pyx_n_u_cnewgraphs __pyx_string_tab[152]
#define __pyx_n_u_code __pyx_string_tab[153]
#define __pyx_n_u_comaps __pyx_string_tab[154]
#define __pyx_n_u_concat __pyx_string_tab[155]
#define __pyx_n_u_convert_ctype_to_dtype __pyx_string_tab[156]
#define __pyx_n_u_convert_dtype_to_ctype __pyx_string_tab[157]
#define __pyx_n_u_convert_dtype_to_torch_type __pyx_string_tab[158]
#define __pyx_n_u_convert_torch_type_to_dtype __pyx_string_tab[159]
#define __pyx_n_u_cop __pyx_string_tab[160]
#define __pyx_n_u_coutputs __pyx_string_tab[161]
#define __pyx_n_u_cparams __pyx_string_tab[162]
#define __pyx_n_u_cprevious_checkpoint __pyx_string_tab[163]
#define __pyx_n_u_cshape __pyx_string_tab[164]
#define __pyx_n_u_cstrides __pyx_string_tab[165]
#define __pyx_n_u_ctypes __pyx_string_tab[166]
#define __pyx_n_u_cuda_code __pyx_string_tab[167]
#define __pyx_n_u_cur_output_shape __pyx_string_tab[168]
#define __pyx_n_u_cur_output_strides __pyx_string_tab[169]
#define __pyx_n_u_customized __pyx_string_tab[170]
#define __pyx_n_u_cverbose __pyx_string_tab[171]
#define __pyx_n_u_cy_from_json __pyx_string_tab[172]
#define __pyx_n_u_cy_to_json __pyx_string_tab[173]
#define __pyx_n_u_cybgraph __pyx_string_tab[174]
#define __pyx_n_u_data_ptr __pyx_string_tab[175]
#define __pyx_n_u_default_config __pyx_string_tab[176]
#define __pyx_n_u_dict __pyx_string_tab[177]
#define __pyx_n_u_dim __pyx_string_tab[178]
#define __pyx_n_u_dims __pyx_string_tab[179]
#define __pyx_n_u_dimx __pyx_string_tab[180]
#define __pyx_kp_u_disable __pyx_string_tab[181]
#define __pyx_n_u_disable_fingerprint __pyx_string_tab[182]
#define __pyx_n_u_div __pyx_string_tab[183]
#define __pyx_n_u_doc __pyx_string_tab[184]
#define __pyx_n_u_dtensor __pyx_string_tab[185]
#define __pyx_n_u_dtensor_cptr __pyx_string_tab[186]
#define __pyx_n_u_dtensor_guid __pyx_string_tab[187]
#define __pyx_n_u_dtype __pyx_string_tab[188]
#define __pyx_n_u_dtype___eq __pyx_string_tab[189]
#define __pyx_n_u_dtype___hash __pyx_string_tab[190]
#define __pyx_n_u_dtype___init __pyx_string_tab[191]
#define __pyx_n_u_dtype___ne __pyx_string_tab[192]
#define __pyx_n_u_dtype___str __pyx_string_tab[193]
#define __pyx_n_u_dtype_is_bf16 __pyx_string_tab[194]
#define __pyx_n_u_dtype_is_dtype __pyx_string_tab[195]
#define __pyx_n_u_dtype_is_fp16 __pyx_string_tab[196]
#define __pyx_n_u_dtype_is_fp32 __pyx_string_tab[197]
#define __pyx_n_u_dtype_is_fp64 __pyx_string_tab[198]
#define __pyx_n_u_dtype_is_int1 __pyx_string_tab[199]
#define __pyx_n_u_dtype_is_int16 __pyx_string_tab[200]
#define __pyx_n_u_dtype_is_int32 __pyx_string_tab[201]
#define __pyx_n_u_dtype_is_int64 __pyx_string_tab[202]
#define __pyx_n_u_dtype_is_int8 __pyx_string_tab[203]
#define __pyx_n_u_dtype_is_uint16 __pyx_string_tab[204]
#define __pyx_n_u_dtype_is_uint32 __pyx_string_tab[205]
#define __pyx_n_u_dtype_is_uint64 __pyx_string_tab[206]
#define __pyx_n_u_dtype_is_uint8 __pyx_string_tab[207]
#define __pyx_kp_u_enable __pyx_string_tab[208]
#define __pyx_n_u_enable_online_softmax __pyx_string_tab[209]
#define __pyx_n_u_epilogue __pyx_string_tab[210]
#define __pyx_n_u_epilogue_type __pyx_string_tab[211]
#define __pyx_n_u_eq __pyx_string_tab[212]
#define __pyx_n_u_error __pyx_string_tab[213]
#define __pyx_n_u_error_list __pyx_string_tab[214]
#define __pyx_n_u_errors __pyx_string_tab[215]
#define __pyx_n_u_exp __pyx_string_tab[216]
#define __pyx_n_u_filename __pyx_string_tab[217]
#define __pyx_n_u_filepath __pyx_string_tab[218]
#define __pyx_kp_u_filepath_cannot_be_empty __pyx_string_tab[219]
#define __pyx_n_u_float16 __pyx_string_tab[220]
#define __pyx_n_u_float32 __pyx_string_tab[221]
#define __pyx_n_u_float64 __pyx_string_tab[222]
#define __pyx_n_u_fmaps __pyx_string_tab[223]
#define __pyx_n_u_forloop_accum __pyx_string_tab[224]
#define __pyx_n_u_forloop_accum_max __pyx_string_tab[225]
#define __pyx_n_u_forloop_accum_rescale __pyx_string_tab[226]
#define __pyx_n_u_forloop_dim __pyx_string_tab[227]
#define __pyx_n_u_forloop_range __pyx_string_tab[228]
#define __pyx_n_u_format __pyx_string_tab[229]
#define __pyx_n_u_fp16 __pyx_string_tab[230]
#define __pyx_n_u_fp32 __pyx_string_tab[231]
#define __pyx_n_u_fp64 __pyx_string_tab[232]
#define __pyx_n_u_franges __pyx_string_tab[233]
#define __pyx_n_u_func __pyx_string_tab[234]
#define __pyx_n_u_fuse_tensors __pyx_string_tab[235]
#define __pyx_n_u_fused_dim __pyx_string_tab[236]
#define __pyx_kp_u_gc __pyx_string_tab[237]
#define __pyx_n_u_gelu __pyx_string_tab[238]
#define __pyx_n_u_generate_cuda_program __pyx_string_tab[239]
#define __pyx_n_u_generate_nki_program __pyx_string_tab[240]
#define __pyx_n_u_generate_task_graph __pyx_string_tab[241]
#define __pyx_n_u_generate_triton_program __pyx_string_tab[242]
#define __pyx_n_u_get_bgraph __pyx_string_tab[243]
#define __pyx_n_u_get_bgraph_info __pyx_string_tab[244]
#define __pyx_n_u_get_graph_structure __pyx_string_tab[245]
#define __pyx_n_u_get_input_dtensor_shape_and_stri __pyx_string_tab[246]
#define __pyx_n_u_get_input_dtensors __pyx_string_tab[247]
#define __pyx_n_u_get_input_stensors __pyx_string_tab[248]
#define __pyx_n_u_get_kn_operator_info __pyx_string_tab[249]
#define __pyx_n_u_get_kn_operator_type_string __pyx_string_tab[250]
#define __pyx_n_u_get_num_inputs __pyx_string_tab[251]
#define __pyx_n_u_get_num_outputs __pyx_string_tab[252]
#define __pyx_n_u_get_output_dtensors __pyx_string_tab[253]
#define __pyx_n_u_get_output_stensors __pyx_string_tab[254]
#define __pyx_n_u_get_owner_independent_hash __pyx_string_tab[255]
#define __pyx_n_u_get_tb_operator_info __pyx_string_tab[256]
#define __pyx_n_u_get_tb_operator_type_string __pyx_string_tab[257]
#define __pyx_n_u_getstate __pyx_string_tab[258]
#define __pyx_n_u_gpu_id __pyx_string_tab[259]
#define __pyx_n_u_graph __pyx_string_tab[260]
#define __pyx_n_u_grid_dim __pyx_string_tab[261]
#define __pyx_kp_u_grid_dim_block_dim_forloop_range __pyx_string_tab[262]
#define __pyx_kp_u_grid_dim_must_include_3_dimensio __pyx_string_tab[263]
#define __pyx_n_u_griddims __pyx_string_tab[264]
#define __pyx_n_u_guid __pyx_string_tab[265]
#define __pyx_n_u_hash __pyx_string_tab[266]
#define __pyx_n_u_i __pyx_string_tab[267]
#define __pyx_n_u_idx __pyx_string_tab[268]
#define __pyx_n_u_imaps __pyx_string_tab[269]
#define __pyx_n_u_init __pyx_string_tab[270]
#define __pyx_n_u_initializing __pyx_string_tab[271]
#define __pyx_n_u_input __pyx_string_tab[272]
#define __pyx_n_u_input_graph __pyx_string_tab[273]
#define __pyx_n_u_input_map __pyx_string_tab[274]
#define __pyx_kp_u_input_map_must_be_of_length_3 __pyx_string_tab[275]
#define __pyx_n_u_input_op __pyx_string_tab[276]
#define __pyx_n_u_input_strides __pyx_string_tab[277]
#define __pyx_n_u_input_tensors __pyx_string_tab[278]
#define __pyx_n_u_inputs __pyx_string_tab[279]
#define __pyx_n_u_int __pyx_string_tab[280]
#define __pyx_n_u_int1 __pyx_string_tab[281]
#define __pyx_n_u_int16 __pyx_string_tab[282]
#define __pyx_n_u_int32 __pyx_string_tab[283]
#define __pyx_n_u_int64 __pyx_string_tab[284]
#define __pyx_n_u_int8 __pyx_string_tab[285]
#define __pyx_n_u_is_bf16 __pyx_string_tab[286]
#define __pyx_n_u_is_coroutine __pyx_string_tab[287]
#define __pyx_n_u_is_dtype __pyx_string_tab[288]
#define __pyx_n_u_is_formal_verified __pyx_string_tab[289]
#define __pyx_n_u_is_fp16 __pyx_string_tab[290]
#define __pyx_n_u_is_fp32 __pyx_string_tab[291]
#define __pyx_n_u_is_fp64 __pyx_string_tab[292]
#define __pyx_n_u_is_int1 __pyx_string_tab[293]
#define __pyx_n_u_is_int16 __pyx_string_tab[294]
#define __pyx_n_u_is_int32 __pyx_string_tab[295]
#define __pyx_n_u_is_int64 __pyx_string_tab[296]
#define __pyx_n_u_is_int8 __pyx_string_tab[297]
#define __pyx_n_u_is_uint16 __pyx_string_tab[298]
#define __pyx_n_u_is_uint32 __pyx_string_tab[299]
#define __pyx_n_u_is_uint64 __pyx_string_tab[300]
#define __pyx_n_u_is_uint8 __pyx_string_tab[301]
#define __pyx_kp_u_isenabled __pyx_string_tab[302]
#define __pyx_n_u_j __pyx_string_tab[303]
#define __pyx_n_u_json_file __pyx_string_tab[304]
#define __pyx_n_u_kn_add_op __pyx_string_tab[305]
#define __pyx_n_u_kn_allreduce_op __pyx_string_tab[306]
#define __pyx_n_u_kn_chunk_0_op __pyx_string_tab[307]
#define __pyx_n_u_kn_chunk_1_op __pyx_string_tab[308]
#define __pyx_n_u_kn_chunk_2_op __pyx_string_tab[309]
#define __pyx_n_u_kn_clamp_op __pyx_string_tab[310]
#define __pyx_n_u_kn_concat_0_op __pyx_string_tab[311]
#define __pyx_n_u_kn_concat_1_op __pyx_string_tab[312]
#define __pyx_n_u_kn_concat_2_op __pyx_string_tab[313]
#define __pyx_n_u_kn_concat_first_op_id __pyx_string_tab[314]
#define __pyx_n_u_kn_concat_last_op_id __pyx_string_tab[315]
#define __pyx_n_u_kn_customized_op __pyx_string_tab[316]
#define __pyx_n_u_kn_div_op __pyx_string_tab[317]
#define __pyx_n_u_kn_exp_op __pyx_string_tab[318]
#define __pyx_n_u_kn_gelu_op __pyx_string_tab[319]
#define __pyx_n_u_kn_input_op __pyx_string_tab[320]
#define __pyx_n_u_kn_log_op __pyx_string_tab[321]
#define __pyx_n_u_kn_matmul_op __pyx_string_tab[322]
#define __pyx_n_u_kn_mul_op __pyx_string_tab[323]
#define __pyx_n_u_kn_mul_scalar_op __pyx_string_tab[324]
#define __pyx_n_u_kn_output_op __pyx_string_tab[325]
#define __pyx_n_u_kn_pow_op __pyx_string_tab[326]
#define __pyx_n_u_kn_reduction_0_op __pyx_string_tab[327]
#define __pyx_n_u_kn_reduction_1_op __pyx_string_tab[328]
#define __pyx_n_u_kn_reduction_2_op __pyx_string_tab[329]
#define __pyx_n_u_kn_relu_op __pyx_string_tab[330]
#define __pyx_n_u_kn_rms_norm_op __pyx_string_tab[331]
#define __pyx_n_u_kn_sigmoid_op __pyx_string_tab[332]
#define __pyx_n_u_kn_silu_op __pyx_string_tab[333]
#define __pyx_n_u_kn_split_0_op __pyx_string_tab[334]
#define __pyx_n_u_kn_split_1_op __pyx_string_tab[335]
#define __pyx_n_u_kn_split_2_op __pyx_string_tab[336]
#define __pyx_n_u_kn_split_first_op_id __pyx_string_tab[337]
#define __pyx_n_u_kn_split_last_op_id __pyx_string_tab[338]
#define __pyx_n_u_kn_sqrt_op __pyx_string_tab[339]
#define __pyx_n_u_kn_square_op __pyx_string_tab[340]
#define __pyx_n_u_kn_tensor_to_dict __pyx_string_tab[341]
#define __pyx_n_u_kn_unknown __pyx_string_tab[342]
#define __pyx_n_u_main __pyx_string_tab[343]
#define __pyx_n_u_mark_output __pyx_string_tab[344]
#define __pyx_n_u_matmul __pyx_string_tab[345]
#define __pyx_n_u_max_num_new_graphs __pyx_string_tab[346]
#define __pyx_n_u_max_smem_size __pyx_string_tab[347]
#define __pyx_n_u_max_val __pyx_string_tab[348]
#define __pyx_n_u_mean __pyx_string_tab[349]
#define __pyx_n_u_metaclass __pyx_string_tab[350]
#define __pyx_n_u_min_val __pyx_string_tab[351]
#define __pyx_n_u_module __pyx_string_tab[352]
#define __pyx_n_u_mul __pyx_string_tab[353]
#define __pyx_n_u_mul_scalar __pyx_string_tab[354]
#define __pyx_n_u_my_gpu_id __pyx_string_tab[355]
#define __pyx_n_u_name __pyx_string_tab[356]
#define __pyx_n_u_name_2 __pyx_string_tab[357]
#define __pyx_n_u_ne __pyx_string_tab[358]
#define __pyx_n_u_new_graphs __pyx_string_tab[359]
#define __pyx_n_u_new_input __pyx_string_tab[360]
#define __pyx_n_u_new_output __pyx_string_tab[361]
#define __pyx_kp_u_no_default___reduce___due_to_non __pyx_string_tab[362]
#define __pyx_n_u_normalized_shape __pyx_string_tab[363]
#define __pyx_n_u_np __pyx_string_tab[364]
#define __pyx_n_u_num __pyx_string_tab[365]
#define __pyx_n_u_num_dims __pyx_string_tab[366]
#define __pyx_n_u_num_gpus __pyx_string_tab[367]
#define __pyx_n_u_num_groups __pyx_string_tab[368]
#define __pyx_n_u_num_outputs __pyx_string_tab[369]
#define __pyx_n_u_num_warp_groups __pyx_string_tab[370]
#define __pyx_n_u_numpy __pyx_string_tab[371]
#define __pyx_n_u_omaps __pyx_string_tab[372]
#define __pyx_n_u_op __pyx_string_tab[373]
#define __pyx_n_u_op_type __pyx_string_tab[374]
#define __pyx_n_u_operators __pyx_string_tab[375]
#define __pyx_n_u_ops __pyx_string_tab[376]
#define __pyx_n_u_optype __pyx_string_tab[377]
#define __pyx_n_u_other __pyx_string_tab[378]
#define __pyx_n_u_output __pyx_string_tab[379]
#define __pyx_n_u_output_directives __pyx_string_tab[380]
#define __pyx_n_u_output_map __pyx_string_tab[381]
#define __pyx_kp_u_output_map_must_be_of_length_3 __pyx_string_tab[382]
#define __pyx_n_u_output_op __pyx_string_tab[383]
#define __pyx_n_u_output_shapes __pyx_string_tab[384]
#define __pyx_n_u_output_tensors __pyx_string_tab[385]
#define __pyx_n_u_outputs __pyx_string_tab[386]
#define __pyx_n_u_params __pyx_string_tab[387]
#define __pyx_n_u_pipeline_stages __pyx_string_tab[388]
#define __pyx_n_u_pop __pyx_string_tab[389]
#define __pyx_n_u_pow __pyx_string_tab[390]
#define __pyx_n_u_prepare __pyx_string_tab[391]
#define __pyx_n_u_previous_checkpoint __pyx_string_tab[392]
#define __pyx_n_u_print __pyx_string_tab[393]
#define __pyx_n_u_profiler_buf_size __pyx_string_tab[394]
#define __pyx_n_u_profiling __pyx_string_tab[395]
#define __pyx_n_u_ptr __pyx_string_tab[396]
#define __pyx_n_u_py_byte_string __pyx_string_tab[397]
#define __pyx_n_u_pyx_state __pyx_string_tab[398]
#define __pyx_n_u_pyx_vtable __pyx_string_tab[399]
#define __pyx_n_u_qualname __pyx_string_tab[400]
#define __pyx_n_u_range __pyx_string_tab[401]
#define __pyx_n_u_reduce __pyx_string_tab[402]
#define __pyx_n_u_reduce_cython __pyx_string_tab[403]
#define __pyx_n_u_reduce_ex __pyx_string_tab[404]
#define __pyx_n_u_reduction __pyx_string_tab[405]
#define __pyx_n_u_reduction_max __pyx_string_tab[406]
#define __pyx_n_u_register_task __pyx_string_tab[407]
#define __pyx_n_u_relu __pyx_string_tab[408]
#define __pyx_n_u_result __pyx_string_tab[409]
#define __pyx_n_u_return __pyx_string_tab[410]
#define __pyx_n_u_rms __pyx_string_tab[411]
#define __pyx_n_u_rms_norm __pyx_string_tab[412]
#define __pyx_n_u_scalar __pyx_string_tab[413]
#define __pyx_n_u_search __pyx_string_tab[414]
#define __pyx_n_u_self __pyx_string_tab[415]
#define __pyx_n_u_set_gpu_device_id __pyx_string_tab[416]
#define __pyx_n_u_set_name __pyx_string_tab[417]
#define __pyx_n_u_setstate __pyx_string_tab[418]
#define __pyx_n_u_setstate_cython __pyx_string_tab[419]
#define __pyx_n_u_shape __pyx_string_tab[420]
#define __pyx_n_u_silu __pyx_string_tab[421]
#define __pyx_n_u_spec __pyx_string_tab[422]
#define __pyx_n_u_sqrt __pyx_string_tab[423]
#define __pyx_n_u_square __pyx_string_tab[424]
#define __pyx_n_u_stensor __pyx_string_tab[425]
#define __pyx_n_u_store_in_dmem __pyx_string_tab[426]
#define __pyx_n_u_str __pyx_string_tab[427]
#define __pyx_n_u_strides __pyx_string_tab[428]
#define __pyx_n_u_string_to_accum_optype __pyx_string_tab[429]
#define __pyx_n_u_string_to_accum_rescale_optype __pyx_string_tab[430]
#define __pyx_n_u_string_to_tbepilogue __pyx_string_tab[431]
#define __pyx_kp_u_stringsource __pyx_string_tab[432]
#define __pyx_n_u_sub __pyx_string_tab[433]
#define __pyx_n_u_sum __pyx_string_tab[434]
#define __pyx_n_u_sum_todimx __pyx_string_tab[435]
#define __pyx_n_u_t __pyx_string_tab[436]
#define __pyx_n_u_t0 __pyx_string_tab[437]
#define __pyx_n_u_t1 __pyx_string_tab[438]
#define __pyx_n_u_target_cc __pyx_string_tab[439]
#define __pyx_n_u_task_type __pyx_string_tab[440]
#define __pyx_n_u_tb_add_op __pyx_string_tab[441]
#define __pyx_n_u_tb_clamp_op __pyx_string_tab[442]
#define __pyx_n_u_tb_concat_0_op __pyx_string_tab[443]
#define __pyx_n_u_tb_concat_1_op __pyx_string_tab[444]
#define __pyx_n_u_tb_concat_2_op __pyx_string_tab[445]
#define __pyx_n_u_tb_concat_first_op_id __pyx_string_tab[446]
#define __pyx_n_u_tb_concat_last_op_id __pyx_string_tab[447]
#define __pyx_n_u_tb_concat_then_matmul_op __pyx_string_tab[448]
#define __pyx_n_u_tb_customized_op __pyx_string_tab[449]
#define __pyx_n_u_tb_div_op __pyx_string_tab[450]
#define __pyx_n_u_tb_exp_op __pyx_string_tab[451]
#define __pyx_n_u_tb_forloop_accum_last_op __pyx_string_tab[452]
#define __pyx_n_u_tb_forloop_accum_max_op __pyx_string_tab[453]
#define __pyx_n_u_tb_forloop_accum_no_red_op __pyx_string_tab[454]
#define __pyx_n_u_tb_forloop_accum_no_red_rescale __pyx_string_tab[455]
#define __pyx_n_u_tb_forloop_accum_red_ld_mean_op __pyx_string_tab[456]
#define __pyx_n_u_tb_forloop_accum_red_ld_rms_op __pyx_string_tab[457]
#define __pyx_n_u_tb_forloop_accum_red_ld_sum_op __pyx_string_tab[458]
#define __pyx_n_u_tb_forloop_accum_red_ld_sum_resc __pyx_string_tab[459]
#define __pyx_n_u_tb_forloop_accum_redtox_ld_sum_o __pyx_string_tab[460]
#define __pyx_n_u_tb_gelu_op __pyx_string_tab[461]
#define __pyx_n_u_tb_input_op __pyx_string_tab[462]
#define __pyx_n_u_tb_log_op __pyx_string_tab[463]
#define __pyx_n_u_tb_matmul_op __pyx_string_tab[464]
#define __pyx_n_u_tb_mul_op __pyx_string_tab[465]
#define __pyx_n_u_tb_mul_scalar_op __pyx_string_tab[466]
#define __pyx_n_u_tb_output_op __pyx_string_tab[467]
#define __pyx_n_u_tb_pow_op __pyx_string_tab[468]
#define __pyx_n_u_tb_reduction_0_max_op __pyx_string_tab[469]
#define __pyx_n_u_tb_reduction_0_op __pyx_string_tab[470]
#define __pyx_n_u_tb_reduction_0_to_dimx_op __pyx_string_tab[471]
#define __pyx_n_u_tb_reduction_1_max_op __pyx_string_tab[472]
#define __pyx_n_u_tb_reduction_1_op __pyx_string_tab[473]
#define __pyx_n_u_tb_reduction_1_to_dimx_op __pyx_string_tab[474]
#define __pyx_n_u_tb_reduction_2_max_op __pyx_string_tab[475]
#define __pyx_n_u_tb_reduction_2_op __pyx_string_tab[476]
#define __pyx_n_u_tb_reduction_2_to_dimx_op __pyx_string_tab[477]
#define __pyx_n_u_tb_reduction_first_op_id __pyx_string_tab[478]
#define __pyx_n_u_tb_reduction_last_op_id __pyx_string_tab[479]
#define __pyx_n_u_tb_relu_op __pyx_string_tab[480]
#define __pyx_n_u_tb_rms_norm_op __pyx_string_tab[481]
#define __pyx_n_u_tb_sigmoid_op __pyx_string_tab[482]
#define __pyx_n_u_tb_silu_op __pyx_string_tab[483]
#define __pyx_n_u_tb_split_0_op __pyx_string_tab[484]
#define __pyx_n_u_tb_split_1_op __pyx_string_tab[485]
#define __pyx_n_u_tb_split_2_op __pyx_string_tab[486]
#define __pyx_n_u_tb_split_first_op_id __pyx_string_tab[487]
#define __pyx_n_u_tb_split_last_op_id __pyx_string_tab[488]
#define __pyx_n_u_tb_sqrt_op __pyx_string_tab[489]
#define __pyx_n_u_tb_square_op __pyx_string_tab[490]
#define __pyx_n_u_tb_sub_op __pyx_string_tab[491]
#define __pyx_n_u_tb_tensor_to_dict __pyx_string_tab[492]
#define __pyx_n_u_tb_unknown __pyx_string_tab[493]
#define __pyx_n_u_tensor __pyx_string_tab[494]
#define __pyx_n_u_test __pyx_string_tab[495]
#define __pyx_n_u_torch __pyx_string_tab[496]
#define __pyx_n_u_torch_data_ptr __pyx_string_tab[497]
#define __pyx_n_u_torch_tensor __pyx_string_tab[498]
#define __pyx_n_u_transpiler_config __pyx_string_tab[499]
#define __pyx_n_u_type __pyx_string_tab[500]
#define __pyx_n_u_type_str __pyx_string_tab[501]
#define __pyx_n_u_uint16 __pyx_string_tab[502]
#define __pyx_n_u_uint32 __pyx_string_tab[503]
#define __pyx_n_u_uint64 __pyx_string_tab[504]
#define __pyx_n_u_uint8 __pyx_string_tab[505]
#define __pyx_n_u_unknown_op_type __pyx_string_tab[506]
#define __pyx_n_u_value __pyx_string_tab[507]
#define __pyx_n_u_verbose __pyx_string_tab[508]
#define __pyx_n_u_x __pyx_string_tab[509]
#define __pyx_n_u_y __pyx_string_tab[510]
#define __pyx_kp_u_yirage__cython_core_pyx __pyx_string_tab[511]
#define __pyx_n_u_yirage_core __pyx_string_tab[512]
#define __pyx_kp_u_yirage_core __pyx_string_tab[513]
#define __pyx_n_u_z __pyx_string_tab[514]
/* #### Code section: module_state_clear ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_clear(PyObject *m) {
  __pyx_mstatetype *clear_module_state = __Pyx_PyModule_GetState(m);
  if (!clear_module_state) return 0;
  Py_CLEAR(clear_module_state->__pyx_d);
  Py_CLEAR(clear_module_state->__pyx_b);
  Py_CLEAR(clear_module_state->__pyx_cython_runtime);
  Py_CLEAR(clear_module_state->__pyx_empty_tuple);
  Py_CLEAR(clear_module_state->__pyx_empty_bytes);
  Py_CLEAR(clear_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_CLEAR(clear_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_CLEAR(clear_module_state->__pyx_FusedFunctionType);
  #endif
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __Pyx_State_RemoveModule(NULL);
  #endif
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4type_type);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_CLEAR(clear_module_state->__pyx_ptype_7cpython_5array_array);
  Py_CLEAR(clear_module_state->__pyx_ptype_6yirage_4core_DTensor);
  Py_CLEAR(clear_module_state->__pyx_type_6yirage_4core_DTensor);
  Py_CLEAR(clear_module_state->__pyx_ptype_6yirage_4core_STensor);
  Py_CLEAR(clear_module_state->__pyx_type_6yirage_4core_STensor);
  Py_CLEAR(clear_module_state->__pyx_ptype_6yirage_4core_CyKNOperator);
  Py_CLEAR(clear_module_state->__pyx_type_6yirage_4core_CyKNOperator);
  Py_CLEAR(clear_module_state->__pyx_ptype_6yirage_4core_CyKNCustomizedOp);
  Py_CLEAR(clear_module_state->__pyx_type_6yirage_4core_CyKNCustomizedOp);
  Py_CLEAR(clear_module_state->__pyx_ptype_6yirage_4core_CyTBOperator);
  Py_CLEAR(clear_module_state->__pyx_type_6yirage_4core_CyTBOperator);
  Py_CLEAR(clear_module_state->__pyx_ptype_6yirage_4core_CyTBInputOp);
  Py_CLEAR(clear_module_state->__pyx_type_6yirage_4core_CyTBInputOp);
  Py_CLEAR(clear_module_state->__pyx_ptype_6yirage_4core_CyTBOutputOp);
  Py_CLEAR(clear_module_state->__pyx_type_6yirage_4core_CyTBOutputOp);
  Py_CLEAR(clear_module_state->__pyx_ptype_6yirage_4core_CyKNGraph);
  Py_CLEAR(clear_module_state->__pyx_type_6yirage_4core_CyKNGraph);
  Py_CLEAR(clear_module_state->__pyx_ptype_6yirage_4core_CyTBGraph);
  Py_CLEAR(clear_module_state->__pyx_type_6yirage_4core_CyTBGraph);
  Py_CLEAR(clear_module_state->__pyx_k_);
  for (int i=0; i<2; ++i) { Py_CLEAR(clear_module_state->__pyx_tuple[i]); }
  for (int i=0; i<117; ++i) { Py_CLEAR(clear_module_state->__pyx_codeobj_tab[i]); }
  for (int i=0; i<515; ++i) { Py_CLEAR(clear_module_state->__pyx_string_tab[i]); }
  return 0;
}
#endif
/* #### Code section: module_state_traverse ### */
#if CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __pyx_m_traverse(PyObject *m, visitproc visit, void *arg) {
  __pyx_mstatetype *traverse_module_state = __Pyx_PyModule_GetState(m);
  if (!traverse_module_state) return 0;
  Py_VISIT(traverse_module_state->__pyx_d);
  Py_VISIT(traverse_module_state->__pyx_b);
  Py_VISIT(traverse_module_state->__pyx_cython_runtime);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_tuple);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_bytes);
  __Pyx_VISIT_CONST(traverse_module_state->__pyx_empty_unicode);
  #ifdef __Pyx_CyFunction_USED
  Py_VISIT(traverse_module_state->__pyx_CyFunctionType);
  #endif
  #ifdef __Pyx_FusedFunction_USED
  Py_VISIT(traverse_module_state->__pyx_FusedFunctionType);
  #endif
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4type_type);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_4bool_bool);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_7complex_complex);
  Py_VISIT(traverse_module_state->__pyx_ptype_7cpython_5array_array);
  Py_VISIT(traverse_module_state->__pyx_ptype_6yirage_4core_DTensor);
  Py_VISIT(traverse_module_state->__pyx_type_6yirage_4core_DTensor);
  Py_VISIT(traverse_module_state->__pyx_ptype_6yirage_4core_STensor);
  Py_VISIT(traverse_module_state->__pyx_type_6yirage_4core_STensor);
  Py_VISIT(traverse_module_state->__pyx_ptype_6yirage_4core_CyKNOperator);
  Py_VISIT(traverse_module_state->__pyx_type_6yirage_4core_CyKNOperator);
  Py_VISIT(traverse_module_state->__pyx_ptype_6yirage_4core_CyKNCustomizedOp);
  Py_VISIT(traverse_module_state->__pyx_type_6yirage_4core_CyKNCustomizedOp);
  Py_VISIT(traverse_module_state->__pyx_ptype_6yirage_4core_CyTBOperator);
  Py_VISIT(traverse_module_state->__pyx_type_6yirage_4core_CyTBOperator);
  Py_VISIT(traverse_module_state->__pyx_ptype_6yirage_4core_CyTBInputOp);
  Py_VISIT(traverse_module_state->__pyx_type_6yirage_4core_CyTBInputOp);
  Py_VISIT(traverse_module_state->__pyx_ptype_6yirage_4core_CyTBOutputOp);
  Py_VISIT(traverse_module_state->__pyx_type_6yirage_4core_CyTBOutputOp);
  Py_VISIT(traverse_module_state->__pyx_ptype_6yirage_4core_CyKNGraph);
  Py_VISIT(traverse_module_state->__pyx_type_6yirage_4core_CyKNGraph);
  Py_VISIT(traverse_module_state->__pyx_ptype_6yirage_4core_CyTBGraph);
  Py_VISIT(traverse_module_state->__pyx_type_6yirage_4core_CyTBGraph);
  Py_VISIT(traverse_module_state->__pyx_k_);
  for (int i=0; i<2; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_tuple[i]); }
  for (int i=0; i<117; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_codeobj_tab[i]); }
  for (int i=0; i<515; ++i) { __Pyx_VISIT_CONST(traverse_module_state->__pyx_string_tab[i]); }
  return 0;
}
#endif
/* #### Code section: module_code ### */

/* "string.to_py":30
 *     cdef object __Pyx_PyObject_FromStringAndSize(const char*, size_t)
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef inline object __pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
*/

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":30
 *     cdef object __Pyx_PyObject_FromStringAndSize(const char*, size_t)
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef inline object __pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":36
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
*/

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":36
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(const char*, size_t)
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":42
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef inline object __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
*/

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":42
 *     cdef object __Pyx_PyBytes_FromStringAndSize(const char*, size_t)
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef inline object __pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":48
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
*/

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":48
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(const char*, size_t)
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string")             # <<<<<<<<<<<<<<
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_6libcpp_6string_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":76
 *     const Py_ssize_t PY_SSIZE_T_MAX
 * 
 * @cname("__pyx_convert_vector_to_py_int")             # <<<<<<<<<<<<<<
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
*/

static PyObject *__pyx_convert_vector_to_py_int(std::vector<int>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":79
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
*/
    PyErr_NoMemory(); __PYX_ERR(1, 79, __pyx_L1_error)

    /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  }

  /* "vector.to_py":80
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
*/
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":82
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
*/
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":87
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
*/
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":88
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)
*/
    __pyx_t_2 = __Pyx_PyLong_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":89
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
*/
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":90
 *         item = v[i]
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
*/
    __pyx_t_6 = __Pyx_PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 90, __pyx_L1_error)
  }

  /* "vector.to_py":92
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":76
 *     const Py_ssize_t PY_SSIZE_T_MAX
 * 
 * @cname("__pyx_convert_vector_to_py_int")             # <<<<<<<<<<<<<<
 * cdef object __pyx_convert_vector_to_py_int(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_size_t(std::vector<size_t>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_size_t", 0);

  /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_size_t")
 * cdef object __pyx_convert_vector_to_py_size_t(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":79
 * cdef object __pyx_convert_vector_to_py_size_t(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
*/
    PyErr_NoMemory(); __PYX_ERR(1, 79, __pyx_L1_error)

    /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_size_t")
 * cdef object __pyx_convert_vector_to_py_size_t(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  }

  /* "vector.to_py":80
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
*/
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":82
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
*/
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":87
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
*/
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":88
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)
*/
    __pyx_t_2 = __Pyx_PyLong_FromSize_t((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":89
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
*/
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":90
 *         item = v[i]
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
*/
    __pyx_t_6 = __Pyx_PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 90, __pyx_L1_error)
  }

  /* "vector.to_py":92
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":76
 *     const Py_ssize_t PY_SSIZE_T_MAX
 * 
 * @cname("__pyx_convert_vector_to_py_size_t")             # <<<<<<<<<<<<<<
 * cdef object __pyx_convert_vector_to_py_size_t(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_size_t", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_yirage_3a__3a_transpiler_3a__3a_OutputTensorDirective(std::vector<yirage::transpiler::OutputTensorDirective>  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_yirage_3a__3a_transpiler_3a__3a_OutputTensorDirective", 0);

  /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_yirage_3a__3a_transpiler_3a__3a_OutputTensorDirective")
 * cdef object __pyx_convert_vector_to_py_yirage_3a__3a_transpiler_3a__3a_OutputTensorDirective(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":79
 * cdef object __pyx_convert_vector_to_py_yirage_3a__3a_transpiler_3a__3a_OutputTensorDirective(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
*/
    PyErr_NoMemory(); __PYX_ERR(1, 79, __pyx_L1_error)

    /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_yirage_3a__3a_transpiler_3a__3a_OutputTensorDirective")
 * cdef object __pyx_convert_vector_to_py_yirage_3a__3a_transpiler_3a__3a_OutputTensorDirective(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  }

  /* "vector.to_py":80
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
*/
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":82
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
*/
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":87
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
*/
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":88
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)
*/
    __pyx_t_2 = __pyx_convert__to_py_yirage_3a__3a_transpiler_3a__3a_OutputTensorDirective((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":89
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
*/
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":90
 *         item = v[i]
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
*/
    __pyx_t_6 = __Pyx_PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 90, __pyx_L1_error)
  }

  /* "vector.to_py":92
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":76
 *     const Py_ssize_t PY_SSIZE_T_MAX
 * 
 * @cname("__pyx_convert_vector_to_py_yirage_3a__3a_transpiler_3a__3a_OutputTensorDirective")             # <<<<<<<<<<<<<<
 * cdef object __pyx_convert_vector_to_py_yirage_3a__3a_transpiler_3a__3a_OutputTensorDirective(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_yirage_3a__3a_transpiler_3a__3a_OutputTensorDirective", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(std::vector<std::vector<int> >  const &__pyx_v_v) {
  Py_ssize_t __pyx_v_v_size_signed;
  PyObject *__pyx_v_o = NULL;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_item = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___", 0);

  /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  __pyx_t_1 = (__pyx_v_v.size() > ((size_t)PY_SSIZE_T_MAX));
  if (unlikely(__pyx_t_1)) {

    /* "vector.to_py":79
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()             # <<<<<<<<<<<<<<
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
*/
    PyErr_NoMemory(); __PYX_ERR(1, 79, __pyx_L1_error)

    /* "vector.to_py":78
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:             # <<<<<<<<<<<<<<
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()
*/
  }

  /* "vector.to_py":80
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
 *         raise MemoryError()
 *     v_size_signed = <Py_ssize_t> v.size()             # <<<<<<<<<<<<<<
 * 
 *     o = PyList_New(v_size_signed)
*/
  __pyx_v_v_size_signed = ((Py_ssize_t)__pyx_v_v.size());

  /* "vector.to_py":82
 *     v_size_signed = <Py_ssize_t> v.size()
 * 
 *     o = PyList_New(v_size_signed)             # <<<<<<<<<<<<<<
 * 
 *     cdef Py_ssize_t i
*/
  __pyx_t_2 = PyList_New(__pyx_v_v_size_signed); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_o = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "vector.to_py":87
 *     cdef object item
 * 
 *     for i in range(v_size_signed):             # <<<<<<<<<<<<<<
 *         item = v[i]
 *         Py_INCREF(item)
*/
  __pyx_t_3 = __pyx_v_v_size_signed;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "vector.to_py":88
 * 
 *     for i in range(v_size_signed):
 *         item = v[i]             # <<<<<<<<<<<<<<
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)
*/
    __pyx_t_2 = __pyx_convert_vector_to_py_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "vector.to_py":89
 *     for i in range(v_size_signed):
 *         item = v[i]
 *         Py_INCREF(item)             # <<<<<<<<<<<<<<
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
*/
    Py_INCREF(__pyx_v_item);

    /* "vector.to_py":90
 *         item = v[i]
 *         Py_INCREF(item)
 *         __Pyx_PyList_SET_ITEM(o, i, item)             # <<<<<<<<<<<<<<
 * 
 *     return o
*/
    __pyx_t_6 = __Pyx_PyList_SET_ITEM(__pyx_v_o, __pyx_v_i, __pyx_v_item); if (unlikely(__pyx_t_6 == ((int)-1))) __PYX_ERR(1, 90, __pyx_L1_error)
  }

  /* "vector.to_py":92
 *         __Pyx_PyList_SET_ITEM(o, i, item)
 * 
 *     return o             # <<<<<<<<<<<<<<
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_o);
  __pyx_r = __pyx_v_o;
  goto __pyx_L0;

  /* "vector.to_py":76
 *     const Py_ssize_t PY_SSIZE_T_MAX
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___")             # <<<<<<<<<<<<<<
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(const vector[X]& v):
 *     if v.size() > <size_t> PY_SSIZE_T_MAX:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_o);
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "cpython/complex.pxd":20
 * 
 *         # unavailable in limited API
 *         @property             # <<<<<<<<<<<<<<
 *         @_cython.c_compile_guard("!CYTHON_COMPILING_IN_LIMITED_API")
 *         cdef inline double real(self) noexcept:
*/

#if !CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4real_real(PyComplexObject *__pyx_v_self) {
  double __pyx_r;

  /* "cpython/complex.pxd":23
 *         @_cython.c_compile_guard("!CYTHON_COMPILING_IN_LIMITED_API")
 *         cdef inline double real(self) noexcept:
 *             return self.cval.real             # <<<<<<<<<<<<<<
 * 
 *         # unavailable in limited API
*/
  __pyx_r = __pyx_v_self->cval.real;
  goto __pyx_L0;

  /* "cpython/complex.pxd":20
 * 
 *         # unavailable in limited API
 *         @property             # <<<<<<<<<<<<<<
 *         @_cython.c_compile_guard("!CYTHON_COMPILING_IN_LIMITED_API")
 *         cdef inline double real(self) noexcept:
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}
#endif /*!(#if !CYTHON_COMPILING_IN_LIMITED_API)*/

/* "cpython/complex.pxd":26
 * 
 *         # unavailable in limited API
 *         @property             # <<<<<<<<<<<<<<
 *         @_cython.c_compile_guard("!CYTHON_COMPILING_IN_LIMITED_API")
 *         cdef inline double imag(self) noexcept:
*/

#if !CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE double __pyx_f_7cpython_7complex_7complex_4imag_imag(PyComplexObject *__pyx_v_self) {
  double __pyx_r;

  /* "cpython/complex.pxd":29
 *         @_cython.c_compile_guard("!CYTHON_COMPILING_IN_LIMITED_API")
 *         cdef inline double imag(self) noexcept:
 *             return self.cval.imag             # <<<<<<<<<<<<<<
 * 
 *     # PyTypeObject PyComplex_Type
*/
  __pyx_r = __pyx_v_self->cval.imag;
  goto __pyx_L0;

  /* "cpython/complex.pxd":26
 * 
 *         # unavailable in limited API
 *         @property             # <<<<<<<<<<<<<<
 *         @_cython.c_compile_guard("!CYTHON_COMPILING_IN_LIMITED_API")
 *         cdef inline double imag(self) noexcept:
*/

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}
#endif /*!(#if !CYTHON_COMPILING_IN_LIMITED_API)*/

/* "cpython/contextvars.pxd":115
 * 
 * 
 * @_cython.c_compile_guard("!CYTHON_COMPILING_IN_LIMITED_API")             # <<<<<<<<<<<<<<
 * cdef inline object get_value(var, default_value=None):
 *     """Return a new reference to the value of the context variable,
*/

#if !CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value *__pyx_optional_args) {

  /* "cpython/contextvars.pxd":116
 * 
 * @_cython.c_compile_guard("!CYTHON_COMPILING_IN_LIMITED_API")
 * cdef inline object get_value(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the default value of the context variable,
*/
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":121
 *     or None if no such value or default was found.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:
*/
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":122
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)             # <<<<<<<<<<<<<<
 *     if value is NULL:
 *         # context variable does not have a default
*/
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, NULL, (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 122, __pyx_L1_error)

  /* "cpython/contextvars.pxd":123
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
*/
  __pyx_t_2 = (__pyx_v_value == NULL);
  if (__pyx_t_2) {

    /* "cpython/contextvars.pxd":125
 *     if value is NULL:
 *         # context variable does not have a default
 *         pyvalue = default_value             # <<<<<<<<<<<<<<
 *     else:
 *         # value or default value of context variable
*/
    __Pyx_INCREF(__pyx_v_default_value);
    __pyx_v_pyvalue = __pyx_v_default_value;

    /* "cpython/contextvars.pxd":123
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, NULL, &value)
 *     if value is NULL:             # <<<<<<<<<<<<<<
 *         # context variable does not have a default
 *         pyvalue = default_value
*/
    goto __pyx_L3;
  }

  /* "cpython/contextvars.pxd":128
 *     else:
 *         # value or default value of context variable
 *         pyvalue = <object>value             # <<<<<<<<<<<<<<
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
*/
  /*else*/ {
    __pyx_t_3 = ((PyObject *)__pyx_v_value);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_v_pyvalue = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "cpython/contextvars.pxd":129
 *         # value or default value of context variable
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
 * 
*/
    Py_XDECREF(__pyx_v_value);
  }
  __pyx_L3:;

  /* "cpython/contextvars.pxd":130
 *         pyvalue = <object>value
 *         Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
 * 
 * 
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":115
 * 
 * 
 * @_cython.c_compile_guard("!CYTHON_COMPILING_IN_LIMITED_API")             # <<<<<<<<<<<<<<
 * cdef inline object get_value(var, default_value=None):
 *     """Return a new reference to the value of the context variable,
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("cpython.contextvars.get_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if !CYTHON_COMPILING_IN_LIMITED_API)*/

/* "cpython/contextvars.pxd":133
 * 
 * 
 * @_cython.c_compile_guard("!CYTHON_COMPILING_IN_LIMITED_API")             # <<<<<<<<<<<<<<
 * cdef inline object get_value_no_default(var, default_value=None):
 *     """Return a new reference to the value of the context variable,
*/

#if !CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE PyObject *__pyx_f_7cpython_11contextvars_get_value_no_default(PyObject *__pyx_v_var, struct __pyx_opt_args_7cpython_11contextvars_get_value_no_default *__pyx_optional_args) {

  /* "cpython/contextvars.pxd":134
 * 
 * @_cython.c_compile_guard("!CYTHON_COMPILING_IN_LIMITED_API")
 * cdef inline object get_value_no_default(var, default_value=None):             # <<<<<<<<<<<<<<
 *     """Return a new reference to the value of the context variable,
 *     or the provided default value if no such value was found.
*/
  PyObject *__pyx_v_default_value = ((PyObject *)Py_None);
  PyObject *__pyx_v_value;
  PyObject *__pyx_v_pyvalue = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_value_no_default", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_default_value = __pyx_optional_args->default_value;
    }
  }

  /* "cpython/contextvars.pxd":140
 *     Ignores the default value of the context variable, if any.
 *     """
 *     cdef PyObject *value = NULL             # <<<<<<<<<<<<<<
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
*/
  __pyx_v_value = NULL;

  /* "cpython/contextvars.pxd":141
 *     """
 *     cdef PyObject *value = NULL
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)             # <<<<<<<<<<<<<<
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
*/
  __pyx_t_1 = PyContextVar_Get(__pyx_v_var, ((PyObject *)__pyx_v_default_value), (&__pyx_v_value)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(2, 141, __pyx_L1_error)

  /* "cpython/contextvars.pxd":143
 *     PyContextVar_Get(var, <PyObject*>default_value, &value)
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value             # <<<<<<<<<<<<<<
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue
*/
  __pyx_t_2 = ((PyObject *)__pyx_v_value);
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_pyvalue = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "cpython/contextvars.pxd":144
 *     # value of context variable or 'default_value'
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'             # <<<<<<<<<<<<<<
 *     return pyvalue
*/
  Py_XDECREF(__pyx_v_value);

  /* "cpython/contextvars.pxd":145
 *     pyvalue = <object>value
 *     Py_XDECREF(value)  # PyContextVar_Get() returned an owned reference as 'PyObject*'
 *     return pyvalue             # <<<<<<<<<<<<<<
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_pyvalue);
  __pyx_r = __pyx_v_pyvalue;
  goto __pyx_L0;

  /* "cpython/contextvars.pxd":133
 * 
 * 
 * @_cython.c_compile_guard("!CYTHON_COMPILING_IN_LIMITED_API")             # <<<<<<<<<<<<<<
 * cdef inline object get_value_no_default(var, default_value=None):
 *     """Return a new reference to the value of the context variable,
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("cpython.contextvars.get_value_no_default", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pyvalue);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
#endif /*!(#if !CYTHON_COMPILING_IN_LIMITED_API)*/

/* "array.pxd":104
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
*/

/* Python wrapper */
CYTHON_UNUSED static int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
CYTHON_UNUSED static int __pyx_pw_7cpython_5array_5array_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_7cpython_5array_5array___getbuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_7cpython_5array_5array___getbuffer__(arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info, CYTHON_UNUSED int __pyx_v_flags) {
  PyObject *__pyx_v_item_count = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  int __pyx_t_6;
  char __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  if (unlikely(__pyx_v_info == NULL)) {
    PyErr_SetString(PyExc_BufferError, "PyObject_GetBuffer: view==NULL argument is obsolete");
    return -1;
  }
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_GIVEREF(__pyx_v_info->obj);

  /* "array.pxd":109
 *             # In particular strided access is always provided regardless
 *             # of flags
 *             item_count = Py_SIZE(self)             # <<<<<<<<<<<<<<
 * 
 *             info.suboffsets = NULL
*/
  __pyx_t_1 = PyLong_FromSsize_t(Py_SIZE(((PyObject *)__pyx_v_self))); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_item_count = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "array.pxd":111
 *             item_count = Py_SIZE(self)
 * 
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
*/
  __pyx_v_info->suboffsets = NULL;

  /* "array.pxd":112
 * 
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars             # <<<<<<<<<<<<<<
 *             info.readonly = 0
 *             info.ndim = 1
*/
  __pyx_t_2 = __pyx_v_self->data.as_chars;
  __pyx_v_info->buf = __pyx_t_2;

  /* "array.pxd":113
 *             info.suboffsets = NULL
 *             info.buf = self.data.as_chars
 *             info.readonly = 0             # <<<<<<<<<<<<<<
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
*/
  __pyx_v_info->readonly = 0;

  /* "array.pxd":114
 *             info.buf = self.data.as_chars
 *             info.readonly = 0
 *             info.ndim = 1             # <<<<<<<<<<<<<<
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count
*/
  __pyx_v_info->ndim = 1;

  /* "array.pxd":115
 *             info.readonly = 0
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)             # <<<<<<<<<<<<<<
 *             info.len = info.itemsize * item_count
 * 
*/
  __pyx_t_3 = __pyx_v_self->ob_descr->itemsize;
  __pyx_v_info->itemsize = __pyx_t_3;

  /* "array.pxd":116
 *             info.ndim = 1
 *             info.itemsize = self.ob_descr.itemsize   # e.g. sizeof(float)
 *             info.len = info.itemsize * item_count             # <<<<<<<<<<<<<<
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
*/
  __pyx_t_1 = PyLong_FromSsize_t(__pyx_v_info->itemsize); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = PyNumber_Multiply(__pyx_t_1, __pyx_v_item_count); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_t_4); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 116, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_info->len = __pyx_t_5;

  /* "array.pxd":118
 *             info.len = info.itemsize * item_count
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)             # <<<<<<<<<<<<<<
 *             if not info.shape:
 *                 raise MemoryError()
*/
  __pyx_v_info->shape = ((Py_ssize_t *)PyObject_Malloc(((sizeof(Py_ssize_t)) + 2)));

  /* "array.pxd":119
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
*/
  __pyx_t_6 = (!(__pyx_v_info->shape != 0));
  if (unlikely(__pyx_t_6)) {

    /* "array.pxd":120
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:
 *                 raise MemoryError()             # <<<<<<<<<<<<<<
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize
*/
    PyErr_NoMemory(); __PYX_ERR(3, 120, __pyx_L1_error)

    /* "array.pxd":119
 * 
 *             info.shape = <Py_ssize_t*> PyObject_Malloc(sizeof(Py_ssize_t) + 2)
 *             if not info.shape:             # <<<<<<<<<<<<<<
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
*/
  }

  /* "array.pxd":121
 *             if not info.shape:
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing             # <<<<<<<<<<<<<<
 *             info.strides = &info.itemsize
 * 
*/
  __pyx_t_5 = __Pyx_PyIndex_AsSsize_t(__pyx_v_item_count); if (unlikely((__pyx_t_5 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(3, 121, __pyx_L1_error)
  (__pyx_v_info->shape[0]) = __pyx_t_5;

  /* "array.pxd":122
 *                 raise MemoryError()
 *             info.shape[0] = item_count      # constant regardless of resizing
 *             info.strides = &info.itemsize             # <<<<<<<<<<<<<<
 * 
 *             info.format = <char*> (info.shape + 1)
*/
  __pyx_v_info->strides = (&__pyx_v_info->itemsize);

  /* "array.pxd":124
 *             info.strides = &info.itemsize
 * 
 *             info.format = <char*> (info.shape + 1)             # <<<<<<<<<<<<<<
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
*/
  __pyx_v_info->format = ((char *)(__pyx_v_info->shape + 1));

  /* "array.pxd":125
 * 
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode             # <<<<<<<<<<<<<<
 *             info.format[1] = 0
 *             info.obj = self
*/
  __pyx_t_7 = __pyx_v_self->ob_descr->typecode;
  (__pyx_v_info->format[0]) = __pyx_t_7;

  /* "array.pxd":126
 *             info.format = <char*> (info.shape + 1)
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0             # <<<<<<<<<<<<<<
 *             info.obj = self
 * 
*/
  (__pyx_v_info->format[1]) = 0;

  /* "array.pxd":127
 *             info.format[0] = self.ob_descr.typecode
 *             info.format[1] = 0
 *             info.obj = self             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
*/
  __Pyx_INCREF((PyObject *)__pyx_v_self);
  __Pyx_GIVEREF((PyObject *)__pyx_v_self);
  __Pyx_GOTREF(__pyx_v_info->obj);
  __Pyx_DECREF(__pyx_v_info->obj);
  __pyx_v_info->obj = ((PyObject *)__pyx_v_self);

  /* "array.pxd":104
 *             __data_union data
 * 
 *         def __getbuffer__(self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fulfill the PEP.
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("cpython.array.array.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = 0;
  }
  __pyx_L2:;
  __Pyx_XDECREF(__pyx_v_item_count);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":129
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyObject_Free(info.shape)
 * 
*/

/* Python wrapper */
CYTHON_UNUSED static void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
CYTHON_UNUSED static void __pyx_pw_7cpython_5array_5array_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_pf_7cpython_5array_5array_2__releasebuffer__(((arrayobject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_7cpython_5array_5array_2__releasebuffer__(CYTHON_UNUSED arrayobject *__pyx_v_self, Py_buffer *__pyx_v_info) {

  /* "array.pxd":130
 * 
 *         def __releasebuffer__(self, Py_buffer* info):
 *             PyObject_Free(info.shape)             # <<<<<<<<<<<<<<
 * 
 *     array newarrayobject(PyTypeObject* type, Py_ssize_t size, arraydescr *descr)
*/
  PyObject_Free(__pyx_v_info->shape);

  /* "array.pxd":129
 *             info.obj = self
 * 
 *         def __releasebuffer__(self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             PyObject_Free(info.shape)
 * 
*/

  /* function exit code */
}

/* "array.pxd":141
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
*/

static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_clone(arrayobject *__pyx_v_template, Py_ssize_t __pyx_v_length, int __pyx_v_zero) {
  arrayobject *__pyx_v_op = 0;
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clone", 0);

  /* "array.pxd":145
 *     type will be same as template.
 *     if zero is true, new array will be initialized with zeroes."""
 *     cdef array op = newarrayobject(Py_TYPE(template), length, template.ob_descr)             # <<<<<<<<<<<<<<
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
*/
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_template)), __pyx_v_length, __pyx_v_template->ob_descr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_op = ((arrayobject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "array.pxd":146
 *     if zero is true, new array will be initialized with zeroes."""
 *     cdef array op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
*/
  if (__pyx_v_zero) {
  } else {
    __pyx_t_2 = __pyx_v_zero;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = (((PyObject *)__pyx_v_op) != Py_None);
  __pyx_t_2 = __pyx_t_3;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_2) {

    /* "array.pxd":147
 *     cdef array op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
*/
    (void)(memset(__pyx_v_op->data.as_chars, 0, (__pyx_v_length * __pyx_v_op->ob_descr->itemsize)));

    /* "array.pxd":146
 *     if zero is true, new array will be initialized with zeroes."""
 *     cdef array op = newarrayobject(Py_TYPE(template), length, template.ob_descr)
 *     if zero and op is not None:             # <<<<<<<<<<<<<<
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op
*/
  }

  /* "array.pxd":148
 *     if zero and op is not None:
 *         memset(op.data.as_chars, 0, length * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline array copy(array self):
*/
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_op);
  __pyx_r = __pyx_v_op;
  goto __pyx_L0;

  /* "array.pxd":141
 * 
 * 
 * cdef inline array clone(array template, Py_ssize_t length, bint zero):             # <<<<<<<<<<<<<<
 *     """ fast creation of a new array, given a template array.
 *     type will be same as template.
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.array.clone", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_op);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":150
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
*/

static CYTHON_INLINE arrayobject *__pyx_f_7cpython_5array_copy(arrayobject *__pyx_v_self) {
  arrayobject *__pyx_v_op = 0;
  arrayobject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "array.pxd":152
 * cdef inline array copy(array self):
 *     """ make a copy of an array. """
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)             # <<<<<<<<<<<<<<
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op
*/
  __pyx_t_1 = ((PyObject *)newarrayobject(Py_TYPE(((PyObject *)__pyx_v_self)), Py_SIZE(((PyObject *)__pyx_v_self)), __pyx_v_self->ob_descr)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 152, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_op = ((arrayobject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "array.pxd":153
 *     """ make a copy of an array. """
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)             # <<<<<<<<<<<<<<
 *     return op
 * 
*/
  (void)(memcpy(__pyx_v_op->data.as_chars, __pyx_v_self->data.as_chars, (Py_SIZE(((PyObject *)__pyx_v_op)) * __pyx_v_op->ob_descr->itemsize)));

  /* "array.pxd":154
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
 *     memcpy(op.data.as_chars, self.data.as_chars, Py_SIZE(op) * op.ob_descr.itemsize)
 *     return op             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:
*/
  __Pyx_XDECREF((PyObject *)__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_op);
  __pyx_r = __pyx_v_op;
  goto __pyx_L0;

  /* "array.pxd":150
 *     return op
 * 
 * cdef inline array copy(array self):             # <<<<<<<<<<<<<<
 *     """ make a copy of an array. """
 *     cdef array op = newarrayobject(Py_TYPE(self), Py_SIZE(self), self.ob_descr)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("cpython.array.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_op);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "array.pxd":156
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficient appending of new stuff of same type
 *     (e.g. of same array type)
*/

static CYTHON_INLINE int __pyx_f_7cpython_5array_extend_buffer(arrayobject *__pyx_v_self, char *__pyx_v_stuff, Py_ssize_t __pyx_v_n) {
  Py_ssize_t __pyx_v_itemsize;
  Py_ssize_t __pyx_v_origsize;
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "array.pxd":160
 *     (e.g. of same array type)
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
*/
  __pyx_t_1 = __pyx_v_self->ob_descr->itemsize;
  __pyx_v_itemsize = __pyx_t_1;

  /* "array.pxd":161
 *     n: number of elements (not number of bytes!) """
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)             # <<<<<<<<<<<<<<
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
*/
  __pyx_v_origsize = Py_SIZE(((PyObject *)__pyx_v_self));

  /* "array.pxd":162
 *     cdef Py_ssize_t itemsize = self.ob_descr.itemsize
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)             # <<<<<<<<<<<<<<
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0
*/
  __pyx_t_1 = resize_smart(__pyx_v_self, (__pyx_v_origsize + __pyx_v_n)); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(3, 162, __pyx_L1_error)

  /* "array.pxd":163
 *     cdef Py_ssize_t origsize = Py_SIZE(self)
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)             # <<<<<<<<<<<<<<
 *     return 0
 * 
*/
  (void)(memcpy((__pyx_v_self->data.as_chars + (__pyx_v_origsize * __pyx_v_itemsize)), __pyx_v_stuff, (__pyx_v_n * __pyx_v_itemsize)));

  /* "array.pxd":164
 *     resize_smart(self, origsize + n)
 *     memcpy(self.data.as_chars + origsize * itemsize, stuff, n * itemsize)
 *     return 0             # <<<<<<<<<<<<<<
 * 
 * cdef inline int extend(array self, array other) except -1:
*/
  __pyx_r = 0;
  goto __pyx_L0;

  /* "array.pxd":156
 *     return op
 * 
 * cdef inline int extend_buffer(array self, char* stuff, Py_ssize_t n) except -1:             # <<<<<<<<<<<<<<
 *     """ efficient appending of new stuff of same type
 *     (e.g. of same array type)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpython.array.extend_buffer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "array.pxd":166
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
*/

static CYTHON_INLINE int __pyx_f_7cpython_5array_extend(arrayobject *__pyx_v_self, arrayobject *__pyx_v_other) {
  int __pyx_r;
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;

  /* "array.pxd":168
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
*/
  __pyx_t_1 = (__pyx_v_self->ob_descr->typecode != __pyx_v_other->ob_descr->typecode);
  if (__pyx_t_1) {

    /* "array.pxd":169
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()             # <<<<<<<<<<<<<<
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
*/
    __pyx_t_2 = PyErr_BadArgument(); if (unlikely(__pyx_t_2 == ((int)0))) __PYX_ERR(3, 169, __pyx_L1_error)

    /* "array.pxd":168
 * cdef inline int extend(array self, array other) except -1:
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:             # <<<<<<<<<<<<<<
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
*/
  }

  /* "array.pxd":170
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
 *         PyErr_BadArgument()
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))             # <<<<<<<<<<<<<<
 * 
 * cdef inline void zero(array self) noexcept:
*/
  __pyx_t_2 = __pyx_f_7cpython_5array_extend_buffer(__pyx_v_self, __pyx_v_other->data.as_chars, Py_SIZE(((PyObject *)__pyx_v_other))); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(3, 170, __pyx_L1_error)
  __pyx_r = __pyx_t_2;
  goto __pyx_L0;

  /* "array.pxd":166
 *     return 0
 * 
 * cdef inline int extend(array self, array other) except -1:             # <<<<<<<<<<<<<<
 *     """ extend array with data from another array; types must match. """
 *     if self.ob_descr.typecode != other.ob_descr.typecode:
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("cpython.array.extend", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  return __pyx_r;
}

/* "array.pxd":172
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self) noexcept:             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
*/

static CYTHON_INLINE void __pyx_f_7cpython_5array_zero(arrayobject *__pyx_v_self) {

  /* "array.pxd":174
 * cdef inline void zero(array self) noexcept:
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)             # <<<<<<<<<<<<<<
*/
  (void)(memset(__pyx_v_self->data.as_chars, 0, (Py_SIZE(((PyObject *)__pyx_v_self)) * __pyx_v_self->ob_descr->itemsize)));

  /* "array.pxd":172
 *     return extend_buffer(self, other.data.as_chars, Py_SIZE(other))
 * 
 * cdef inline void zero(array self) noexcept:             # <<<<<<<<<<<<<<
 *     """ set all elements of array to zero. """
 *     memset(self.data.as_chars, 0, Py_SIZE(self) * self.ob_descr.itemsize)
*/

  /* function exit code */
}

/* "yirage/_cython/core.pyx":31
 *     FP_TYPES = ['fp16', 'bf16', 'fp32', 'fp64']
 * 
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *         assert name in dtype.SINT_TYPES + dtype.UINT_TYPES + dtype.FP_TYPES, name
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_1__init__ = {"__init__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_1__init__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_1__init__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,&__pyx_mstate_global->__pyx_n_u_name,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 31, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 31, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 31, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__init__", 0) < 0) __PYX_ERR(0, 31, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, i); __PYX_ERR(0, 31, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 31, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 31, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
    __pyx_v_name = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 31, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype___init__(__pyx_self, __pyx_v_self, __pyx_v_name);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "yirage/_cython/core.pyx":32
 * 
 *     def __init__(self, name):
 *         self.name = name             # <<<<<<<<<<<<<<
 *         assert name in dtype.SINT_TYPES + dtype.UINT_TYPES + dtype.FP_TYPES, name
 * 
*/
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name, __pyx_v_name) < 0) __PYX_ERR(0, 32, __pyx_L1_error)

  /* "yirage/_cython/core.pyx":33
 *     def __init__(self, name):
 *         self.name = name
 *         assert name in dtype.SINT_TYPES + dtype.UINT_TYPES + dtype.FP_TYPES, name             # <<<<<<<<<<<<<<
 * 
 *     def is_fp16(self):
*/
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_SINT_TYPES); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_UINT_TYPES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_FP_TYPES); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_name, __pyx_t_3, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 33, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_4)) {
      __pyx_t_3 = PyTuple_Pack(1, __pyx_v_name); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 33, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_t_3, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(0, 33, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 33, __pyx_L1_error)
  #endif

  /* "yirage/_cython/core.pyx":31
 *     FP_TYPES = ['fp16', 'bf16', 'fp32', 'fp64']
 * 
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *         assert name in dtype.SINT_TYPES + dtype.UINT_TYPES + dtype.FP_TYPES, name
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("yirage.core.dtype.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":35
 *         assert name in dtype.SINT_TYPES + dtype.UINT_TYPES + dtype.FP_TYPES, name
 * 
 *     def is_fp16(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'fp16'
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_3is_fp16(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_3is_fp16 = {"is_fp16", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_3is_fp16, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_3is_fp16(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_fp16 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 35, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 35, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_fp16", 0) < 0) __PYX_ERR(0, 35, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_fp16", 1, 1, 1, i); __PYX_ERR(0, 35, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 35, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_fp16", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 35, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.is_fp16", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_2is_fp16(__pyx_self, __pyx_v_self);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_2is_fp16(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_fp16", 0);

  /* "yirage/_cython/core.pyx":36
 * 
 *     def is_fp16(self):
 *         return self.name == 'fp16'             # <<<<<<<<<<<<<<
 * 
 *     def is_bf16(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_fp16, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":35
 *         assert name in dtype.SINT_TYPES + dtype.UINT_TYPES + dtype.FP_TYPES, name
 * 
 *     def is_fp16(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'fp16'
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.dtype.is_fp16", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":38
 *         return self.name == 'fp16'
 * 
 *     def is_bf16(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'bf16'
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_5is_bf16(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_5is_bf16 = {"is_bf16", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_5is_bf16, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_5is_bf16(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_bf16 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 38, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 38, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_bf16", 0) < 0) __PYX_ERR(0, 38, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_bf16", 1, 1, 1, i); __PYX_ERR(0, 38, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 38, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_bf16", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 38, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.is_bf16", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_4is_bf16(__pyx_self, __pyx_v_self);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_4is_bf16(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_bf16", 0);

  /* "yirage/_cython/core.pyx":39
 * 
 *     def is_bf16(self):
 *         return self.name == 'bf16'             # <<<<<<<<<<<<<<
 * 
 *     def is_fp32(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_bf16, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 39, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":38
 *         return self.name == 'fp16'
 * 
 *     def is_bf16(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'bf16'
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.dtype.is_bf16", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":41
 *         return self.name == 'bf16'
 * 
 *     def is_fp32(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'fp32'
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_7is_fp32(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_7is_fp32 = {"is_fp32", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_7is_fp32, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_7is_fp32(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_fp32 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 41, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 41, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_fp32", 0) < 0) __PYX_ERR(0, 41, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_fp32", 1, 1, 1, i); __PYX_ERR(0, 41, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 41, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_fp32", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 41, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.is_fp32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_6is_fp32(__pyx_self, __pyx_v_self);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_6is_fp32(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_fp32", 0);

  /* "yirage/_cython/core.pyx":42
 * 
 *     def is_fp32(self):
 *         return self.name == 'fp32'             # <<<<<<<<<<<<<<
 * 
 *     def is_fp64(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_fp32, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":41
 *         return self.name == 'bf16'
 * 
 *     def is_fp32(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'fp32'
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.dtype.is_fp32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":44
 *         return self.name == 'fp32'
 * 
 *     def is_fp64(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'fp64'
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_9is_fp64(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_9is_fp64 = {"is_fp64", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_9is_fp64, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_9is_fp64(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_fp64 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 44, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 44, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_fp64", 0) < 0) __PYX_ERR(0, 44, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_fp64", 1, 1, 1, i); __PYX_ERR(0, 44, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 44, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_fp64", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 44, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.is_fp64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_8is_fp64(__pyx_self, __pyx_v_self);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_8is_fp64(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_fp64", 0);

  /* "yirage/_cython/core.pyx":45
 * 
 *     def is_fp64(self):
 *         return self.name == 'fp64'             # <<<<<<<<<<<<<<
 * 
 *     def is_int1(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_fp64, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 45, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":44
 *         return self.name == 'fp32'
 * 
 *     def is_fp64(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'fp64'
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.dtype.is_fp64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":47
 *         return self.name == 'fp64'
 * 
 *     def is_int1(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'int1'
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_11is_int1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_11is_int1 = {"is_int1", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_11is_int1, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_11is_int1(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_int1 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 47, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 47, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_int1", 0) < 0) __PYX_ERR(0, 47, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_int1", 1, 1, 1, i); __PYX_ERR(0, 47, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 47, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_int1", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 47, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.is_int1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_10is_int1(__pyx_self, __pyx_v_self);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_10is_int1(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_int1", 0);

  /* "yirage/_cython/core.pyx":48
 * 
 *     def is_int1(self):
 *         return self.name == 'int1'             # <<<<<<<<<<<<<<
 * 
 *     def is_int8(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_int1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":47
 *         return self.name == 'fp64'
 * 
 *     def is_int1(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'int1'
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.dtype.is_int1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":50
 *         return self.name == 'int1'
 * 
 *     def is_int8(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'int8'
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_13is_int8(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_13is_int8 = {"is_int8", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_13is_int8, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_13is_int8(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_int8 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 50, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 50, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_int8", 0) < 0) __PYX_ERR(0, 50, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_int8", 1, 1, 1, i); __PYX_ERR(0, 50, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 50, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_int8", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 50, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.is_int8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_12is_int8(__pyx_self, __pyx_v_self);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_12is_int8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_int8", 0);

  /* "yirage/_cython/core.pyx":51
 * 
 *     def is_int8(self):
 *         return self.name == 'int8'             # <<<<<<<<<<<<<<
 * 
 *     def is_int16(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_int8, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":50
 *         return self.name == 'int1'
 * 
 *     def is_int8(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'int8'
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.dtype.is_int8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":53
 *         return self.name == 'int8'
 * 
 *     def is_int16(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'int16'
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_15is_int16(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_15is_int16 = {"is_int16", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_15is_int16, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_15is_int16(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_int16 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 53, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 53, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_int16", 0) < 0) __PYX_ERR(0, 53, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_int16", 1, 1, 1, i); __PYX_ERR(0, 53, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 53, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_int16", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 53, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.is_int16", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_14is_int16(__pyx_self, __pyx_v_self);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_14is_int16(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_int16", 0);

  /* "yirage/_cython/core.pyx":54
 * 
 *     def is_int16(self):
 *         return self.name == 'int16'             # <<<<<<<<<<<<<<
 * 
 *     def is_int32(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_int16, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":53
 *         return self.name == 'int8'
 * 
 *     def is_int16(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'int16'
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.dtype.is_int16", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":56
 *         return self.name == 'int16'
 * 
 *     def is_int32(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'int32'
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_17is_int32(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_17is_int32 = {"is_int32", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_17is_int32, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_17is_int32(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_int32 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 56, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 56, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_int32", 0) < 0) __PYX_ERR(0, 56, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_int32", 1, 1, 1, i); __PYX_ERR(0, 56, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 56, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_int32", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 56, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.is_int32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_16is_int32(__pyx_self, __pyx_v_self);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_16is_int32(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_int32", 0);

  /* "yirage/_cython/core.pyx":57
 * 
 *     def is_int32(self):
 *         return self.name == 'int32'             # <<<<<<<<<<<<<<
 * 
 *     def is_int64(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_int32, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 57, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":56
 *         return self.name == 'int16'
 * 
 *     def is_int32(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'int32'
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.dtype.is_int32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":59
 *         return self.name == 'int32'
 * 
 *     def is_int64(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'int64'
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_19is_int64(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_19is_int64 = {"is_int64", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_19is_int64, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_19is_int64(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_int64 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 59, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 59, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_int64", 0) < 0) __PYX_ERR(0, 59, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_int64", 1, 1, 1, i); __PYX_ERR(0, 59, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 59, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_int64", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 59, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.is_int64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_18is_int64(__pyx_self, __pyx_v_self);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_18is_int64(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_int64", 0);

  /* "yirage/_cython/core.pyx":60
 * 
 *     def is_int64(self):
 *         return self.name == 'int64'             # <<<<<<<<<<<<<<
 * 
 *     def is_uint8(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_int64, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":59
 *         return self.name == 'int32'
 * 
 *     def is_int64(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'int64'
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.dtype.is_int64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":62
 *         return self.name == 'int64'
 * 
 *     def is_uint8(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'uint8'
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_21is_uint8(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_21is_uint8 = {"is_uint8", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_21is_uint8, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_21is_uint8(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_uint8 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 62, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 62, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_uint8", 0) < 0) __PYX_ERR(0, 62, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_uint8", 1, 1, 1, i); __PYX_ERR(0, 62, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 62, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_uint8", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 62, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.is_uint8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_20is_uint8(__pyx_self, __pyx_v_self);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_20is_uint8(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_uint8", 0);

  /* "yirage/_cython/core.pyx":63
 * 
 *     def is_uint8(self):
 *         return self.name == 'uint8'             # <<<<<<<<<<<<<<
 * 
 *     def is_uint16(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_uint8, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 63, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":62
 *         return self.name == 'int64'
 * 
 *     def is_uint8(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'uint8'
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.dtype.is_uint8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":65
 *         return self.name == 'uint8'
 * 
 *     def is_uint16(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'uint16'
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_23is_uint16(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_23is_uint16 = {"is_uint16", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_23is_uint16, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_23is_uint16(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_uint16 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 65, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 65, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_uint16", 0) < 0) __PYX_ERR(0, 65, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_uint16", 1, 1, 1, i); __PYX_ERR(0, 65, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 65, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_uint16", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 65, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.is_uint16", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_22is_uint16(__pyx_self, __pyx_v_self);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_22is_uint16(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_uint16", 0);

  /* "yirage/_cython/core.pyx":66
 * 
 *     def is_uint16(self):
 *         return self.name == 'uint16'             # <<<<<<<<<<<<<<
 * 
 *     def is_uint32(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_uint16, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 66, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":65
 *         return self.name == 'uint8'
 * 
 *     def is_uint16(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'uint16'
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.dtype.is_uint16", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":68
 *         return self.name == 'uint16'
 * 
 *     def is_uint32(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'uint32'
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_25is_uint32(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_25is_uint32 = {"is_uint32", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_25is_uint32, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_25is_uint32(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_uint32 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 68, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 68, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_uint32", 0) < 0) __PYX_ERR(0, 68, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_uint32", 1, 1, 1, i); __PYX_ERR(0, 68, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 68, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_uint32", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 68, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.is_uint32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_24is_uint32(__pyx_self, __pyx_v_self);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_24is_uint32(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_uint32", 0);

  /* "yirage/_cython/core.pyx":69
 * 
 *     def is_uint32(self):
 *         return self.name == 'uint32'             # <<<<<<<<<<<<<<
 * 
 *     def is_uint64(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_uint32, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":68
 *         return self.name == 'uint16'
 * 
 *     def is_uint32(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'uint32'
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.dtype.is_uint32", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":71
 *         return self.name == 'uint32'
 * 
 *     def is_uint64(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'uint64'
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_27is_uint64(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_27is_uint64 = {"is_uint64", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_27is_uint64, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_27is_uint64(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_uint64 (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 71, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 71, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_uint64", 0) < 0) __PYX_ERR(0, 71, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_uint64", 1, 1, 1, i); __PYX_ERR(0, 71, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 71, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_uint64", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 71, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.is_uint64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_26is_uint64(__pyx_self, __pyx_v_self);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_26is_uint64(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_uint64", 0);

  /* "yirage/_cython/core.pyx":72
 * 
 *     def is_uint64(self):
 *         return self.name == 'uint64'             # <<<<<<<<<<<<<<
 * 
 *     def __eq__(self, other: dtype):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_uint64, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 72, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":71
 *         return self.name == 'uint32'
 * 
 *     def is_uint64(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'uint64'
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.dtype.is_uint64", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":74
 *         return self.name == 'uint64'
 * 
 *     def __eq__(self, other: dtype):             # <<<<<<<<<<<<<<
 *         if not isinstance(other, dtype):
 *             return False
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_29__eq__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_29__eq__ = {"__eq__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_29__eq__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_29__eq__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_other = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,&__pyx_mstate_global->__pyx_n_u_other,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 74, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 74, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 74, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__eq__", 0) < 0) __PYX_ERR(0, 74, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__eq__", 1, 2, 2, i); __PYX_ERR(0, 74, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 74, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 74, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
    __pyx_v_other = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__eq__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 74, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_28__eq__(__pyx_self, __pyx_v_self, __pyx_v_other);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_28__eq__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "yirage/_cython/core.pyx":75
 * 
 *     def __eq__(self, other: dtype):
 *         if not isinstance(other, dtype):             # <<<<<<<<<<<<<<
 *             return False
 *         return self.name == other.name
*/
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_IsInstance(__pyx_v_other, __pyx_t_1); if (unlikely(__pyx_t_2 == ((int)-1))) __PYX_ERR(0, 75, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (!__pyx_t_2);
  if (__pyx_t_3) {

    /* "yirage/_cython/core.pyx":76
 *     def __eq__(self, other: dtype):
 *         if not isinstance(other, dtype):
 *             return False             # <<<<<<<<<<<<<<
 *         return self.name == other.name
 * 
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_False);
    __pyx_r = Py_False;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":75
 * 
 *     def __eq__(self, other: dtype):
 *         if not isinstance(other, dtype):             # <<<<<<<<<<<<<<
 *             return False
 *         return self.name == other.name
*/
  }

  /* "yirage/_cython/core.pyx":77
 *         if not isinstance(other, dtype):
 *             return False
 *         return self.name == other.name             # <<<<<<<<<<<<<<
 * 
 *     def __ne__(self, other: dtype):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_other, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 77, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":74
 *         return self.name == 'uint64'
 * 
 *     def __eq__(self, other: dtype):             # <<<<<<<<<<<<<<
 *         if not isinstance(other, dtype):
 *             return False
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("yirage.core.dtype.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":79
 *         return self.name == other.name
 * 
 *     def __ne__(self, other: dtype):             # <<<<<<<<<<<<<<
 *         return not self.__eq__(other)
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_31__ne__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_31__ne__ = {"__ne__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_31__ne__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_31__ne__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_other = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__ne__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,&__pyx_mstate_global->__pyx_n_u_other,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 79, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 79, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 79, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__ne__", 0) < 0) __PYX_ERR(0, 79, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__ne__", 1, 2, 2, i); __PYX_ERR(0, 79, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 79, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 79, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
    __pyx_v_other = values[1];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__ne__", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 79, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.__ne__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_30__ne__(__pyx_self, __pyx_v_self, __pyx_v_other);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_30__ne__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__ne__", 0);

  /* "yirage/_cython/core.pyx":80
 * 
 *     def __ne__(self, other: dtype):
 *         return not self.__eq__(other)             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_v_self;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_other};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_eq, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyBool_FromLong((!__pyx_t_4)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":79
 *         return self.name == other.name
 * 
 *     def __ne__(self, other: dtype):             # <<<<<<<<<<<<<<
 *         return not self.__eq__(other)
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.dtype.__ne__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":82
 *         return not self.__eq__(other)
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return hash((self.name, ))
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_33__hash__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_33__hash__ = {"__hash__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_33__hash__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_33__hash__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 82, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 82, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__hash__", 0) < 0) __PYX_ERR(0, 82, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__hash__", 1, 1, 1, i); __PYX_ERR(0, 82, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 82, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__hash__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 82, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_32__hash__(__pyx_self, __pyx_v_self);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_32__hash__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_hash_t __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "yirage/_cython/core.pyx":83
 * 
 *     def __hash__(self):
 *         return hash((self.name, ))             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1) != (0)) __PYX_ERR(0, 83, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_Hash(__pyx_t_2); if (unlikely(__pyx_t_3 == ((Py_hash_t)-1))) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyLong_FromHash_t(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":82
 *         return not self.__eq__(other)
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return hash((self.name, ))
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.dtype.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":85
 *         return hash((self.name, ))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_35__str__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_35__str__ = {"__str__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_35__str__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_35__str__(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_self = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_self,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 85, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 85, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__str__", 0) < 0) __PYX_ERR(0, 85, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__str__", 1, 1, 1, i); __PYX_ERR(0, 85, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 85, __pyx_L3_error)
    }
    __pyx_v_self = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__str__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 85, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_34__str__(__pyx_self, __pyx_v_self);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_34__str__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "yirage/_cython/core.pyx":86
 * 
 *     def __str__(self):
 *         return self.name             # <<<<<<<<<<<<<<
 * 
 *     def is_dtype(type_str):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_mstate_global->__pyx_n_u_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":85
 *         return hash((self.name, ))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yirage.core.dtype.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":88
 *         return self.name
 * 
 *     def is_dtype(type_str):             # <<<<<<<<<<<<<<
 *         return type_str in dtype.SINT_TYPES + dtype.UINT_TYPES + dtype.FP_TYPES
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5dtype_37is_dtype(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5dtype_37is_dtype = {"is_dtype", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5dtype_37is_dtype, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5dtype_37is_dtype(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_type_str = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_dtype (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_type_str,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 88, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 88, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "is_dtype", 0) < 0) __PYX_ERR(0, 88, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("is_dtype", 1, 1, 1, i); __PYX_ERR(0, 88, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 88, __pyx_L3_error)
    }
    __pyx_v_type_str = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_dtype", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 88, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.dtype.is_dtype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_5dtype_36is_dtype(__pyx_self, __pyx_v_type_str);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_5dtype_36is_dtype(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type_str) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("is_dtype", 0);

  /* "yirage/_cython/core.pyx":89
 * 
 *     def is_dtype(type_str):
 *         return type_str in dtype.SINT_TYPES + dtype.UINT_TYPES + dtype.FP_TYPES             # <<<<<<<<<<<<<<
 * 
 * # data types
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_SINT_TYPES); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_UINT_TYPES); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_FP_TYPES); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyNumber_Add(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = (__Pyx_PySequence_ContainsTF(__pyx_v_type_str, __pyx_t_3, Py_EQ)); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyBool_FromLong(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":88
 *         return self.name
 * 
 *     def is_dtype(type_str):             # <<<<<<<<<<<<<<
 *         return type_str in dtype.SINT_TYPES + dtype.UINT_TYPES + dtype.FP_TYPES
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("yirage.core.dtype.is_dtype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":105
 * float64 = dtype('fp64')
 * 
 * def get_kn_operator_type_string(int op_type):             # <<<<<<<<<<<<<<
 *     if op_type == KN_UNKOWN:
 *         return "kn_unknown"
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_1get_kn_operator_type_string(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_1get_kn_operator_type_string = {"get_kn_operator_type_string", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_1get_kn_operator_type_string, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_1get_kn_operator_type_string(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_op_type;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_kn_operator_type_string (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_op_type,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 105, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 105, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "get_kn_operator_type_string", 0) < 0) __PYX_ERR(0, 105, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("get_kn_operator_type_string", 1, 1, 1, i); __PYX_ERR(0, 105, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 105, __pyx_L3_error)
    }
    __pyx_v_op_type = __Pyx_PyLong_As_int(values[0]); if (unlikely((__pyx_v_op_type == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 105, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_kn_operator_type_string", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 105, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.get_kn_operator_type_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_get_kn_operator_type_string(__pyx_self, __pyx_v_op_type);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_get_kn_operator_type_string(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_op_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_kn_operator_type_string", 0);

  /* "yirage/_cython/core.pyx":106
 * 
 * def get_kn_operator_type_string(int op_type):
 *     if op_type == KN_UNKOWN:             # <<<<<<<<<<<<<<
 *         return "kn_unknown"
 *     elif op_type == KN_INPUT_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_UNKOWN);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":107
 * def get_kn_operator_type_string(int op_type):
 *     if op_type == KN_UNKOWN:
 *         return "kn_unknown"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_INPUT_OP:
 *         return "kn_input_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_unknown);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_unknown;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":106
 * 
 * def get_kn_operator_type_string(int op_type):
 *     if op_type == KN_UNKOWN:             # <<<<<<<<<<<<<<
 *         return "kn_unknown"
 *     elif op_type == KN_INPUT_OP:
*/
  }

  /* "yirage/_cython/core.pyx":108
 *     if op_type == KN_UNKOWN:
 *         return "kn_unknown"
 *     elif op_type == KN_INPUT_OP:             # <<<<<<<<<<<<<<
 *         return "kn_input_op"
 *     elif op_type == KN_OUTPUT_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_INPUT_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":109
 *         return "kn_unknown"
 *     elif op_type == KN_INPUT_OP:
 *         return "kn_input_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_OUTPUT_OP:
 *         return "kn_output_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_input_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_input_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":108
 *     if op_type == KN_UNKOWN:
 *         return "kn_unknown"
 *     elif op_type == KN_INPUT_OP:             # <<<<<<<<<<<<<<
 *         return "kn_input_op"
 *     elif op_type == KN_OUTPUT_OP:
*/
  }

  /* "yirage/_cython/core.pyx":110
 *     elif op_type == KN_INPUT_OP:
 *         return "kn_input_op"
 *     elif op_type == KN_OUTPUT_OP:             # <<<<<<<<<<<<<<
 *         return "kn_output_op"
 *     elif op_type == KN_MATMUL_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_OUTPUT_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":111
 *         return "kn_input_op"
 *     elif op_type == KN_OUTPUT_OP:
 *         return "kn_output_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_MATMUL_OP:
 *         return "kn_matmul_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_output_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_output_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":110
 *     elif op_type == KN_INPUT_OP:
 *         return "kn_input_op"
 *     elif op_type == KN_OUTPUT_OP:             # <<<<<<<<<<<<<<
 *         return "kn_output_op"
 *     elif op_type == KN_MATMUL_OP:
*/
  }

  /* "yirage/_cython/core.pyx":112
 *     elif op_type == KN_OUTPUT_OP:
 *         return "kn_output_op"
 *     elif op_type == KN_MATMUL_OP:             # <<<<<<<<<<<<<<
 *         return "kn_matmul_op"
 *     elif op_type == KN_EXP_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_MATMUL_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":113
 *         return "kn_output_op"
 *     elif op_type == KN_MATMUL_OP:
 *         return "kn_matmul_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_EXP_OP:
 *         return "kn_exp_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_matmul_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_matmul_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":112
 *     elif op_type == KN_OUTPUT_OP:
 *         return "kn_output_op"
 *     elif op_type == KN_MATMUL_OP:             # <<<<<<<<<<<<<<
 *         return "kn_matmul_op"
 *     elif op_type == KN_EXP_OP:
*/
  }

  /* "yirage/_cython/core.pyx":114
 *     elif op_type == KN_MATMUL_OP:
 *         return "kn_matmul_op"
 *     elif op_type == KN_EXP_OP:             # <<<<<<<<<<<<<<
 *         return "kn_exp_op"
 *     elif op_type == KN_SQUARE_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_EXP_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":115
 *         return "kn_matmul_op"
 *     elif op_type == KN_EXP_OP:
 *         return "kn_exp_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_SQUARE_OP:
 *         return "kn_square_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_exp_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_exp_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":114
 *     elif op_type == KN_MATMUL_OP:
 *         return "kn_matmul_op"
 *     elif op_type == KN_EXP_OP:             # <<<<<<<<<<<<<<
 *         return "kn_exp_op"
 *     elif op_type == KN_SQUARE_OP:
*/
  }

  /* "yirage/_cython/core.pyx":116
 *     elif op_type == KN_EXP_OP:
 *         return "kn_exp_op"
 *     elif op_type == KN_SQUARE_OP:             # <<<<<<<<<<<<<<
 *         return "kn_square_op"
 *     elif op_type == KN_SQRT_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_SQUARE_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":117
 *         return "kn_exp_op"
 *     elif op_type == KN_SQUARE_OP:
 *         return "kn_square_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_SQRT_OP:
 *         return "kn_sqrt_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_square_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_square_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":116
 *     elif op_type == KN_EXP_OP:
 *         return "kn_exp_op"
 *     elif op_type == KN_SQUARE_OP:             # <<<<<<<<<<<<<<
 *         return "kn_square_op"
 *     elif op_type == KN_SQRT_OP:
*/
  }

  /* "yirage/_cython/core.pyx":118
 *     elif op_type == KN_SQUARE_OP:
 *         return "kn_square_op"
 *     elif op_type == KN_SQRT_OP:             # <<<<<<<<<<<<<<
 *         return "kn_sqrt_op"
 *     elif op_type == KN_MUL_SCALAR_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_SQRT_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":119
 *         return "kn_square_op"
 *     elif op_type == KN_SQRT_OP:
 *         return "kn_sqrt_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_MUL_SCALAR_OP:
 *         return "kn_mul_scalar_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_sqrt_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_sqrt_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":118
 *     elif op_type == KN_SQUARE_OP:
 *         return "kn_square_op"
 *     elif op_type == KN_SQRT_OP:             # <<<<<<<<<<<<<<
 *         return "kn_sqrt_op"
 *     elif op_type == KN_MUL_SCALAR_OP:
*/
  }

  /* "yirage/_cython/core.pyx":120
 *     elif op_type == KN_SQRT_OP:
 *         return "kn_sqrt_op"
 *     elif op_type == KN_MUL_SCALAR_OP:             # <<<<<<<<<<<<<<
 *         return "kn_mul_scalar_op"
 *     elif op_type == KN_SILU_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_MUL_SCALAR_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":121
 *         return "kn_sqrt_op"
 *     elif op_type == KN_MUL_SCALAR_OP:
 *         return "kn_mul_scalar_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_SILU_OP:
 *         return "kn_silu_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_mul_scalar_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_mul_scalar_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":120
 *     elif op_type == KN_SQRT_OP:
 *         return "kn_sqrt_op"
 *     elif op_type == KN_MUL_SCALAR_OP:             # <<<<<<<<<<<<<<
 *         return "kn_mul_scalar_op"
 *     elif op_type == KN_SILU_OP:
*/
  }

  /* "yirage/_cython/core.pyx":122
 *     elif op_type == KN_MUL_SCALAR_OP:
 *         return "kn_mul_scalar_op"
 *     elif op_type == KN_SILU_OP:             # <<<<<<<<<<<<<<
 *         return "kn_silu_op"
 *     elif op_type == KN_SIGMOID_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_SILU_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":123
 *         return "kn_mul_scalar_op"
 *     elif op_type == KN_SILU_OP:
 *         return "kn_silu_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_SIGMOID_OP:
 *         return "kn_sigmoid_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_silu_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_silu_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":122
 *     elif op_type == KN_MUL_SCALAR_OP:
 *         return "kn_mul_scalar_op"
 *     elif op_type == KN_SILU_OP:             # <<<<<<<<<<<<<<
 *         return "kn_silu_op"
 *     elif op_type == KN_SIGMOID_OP:
*/
  }

  /* "yirage/_cython/core.pyx":124
 *     elif op_type == KN_SILU_OP:
 *         return "kn_silu_op"
 *     elif op_type == KN_SIGMOID_OP:             # <<<<<<<<<<<<<<
 *         return "kn_sigmoid_op"
 *     elif op_type == KN_GELU_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_SIGMOID_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":125
 *         return "kn_silu_op"
 *     elif op_type == KN_SIGMOID_OP:
 *         return "kn_sigmoid_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_GELU_OP:
 *         return "kn_gelu_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_sigmoid_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_sigmoid_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":124
 *     elif op_type == KN_SILU_OP:
 *         return "kn_silu_op"
 *     elif op_type == KN_SIGMOID_OP:             # <<<<<<<<<<<<<<
 *         return "kn_sigmoid_op"
 *     elif op_type == KN_GELU_OP:
*/
  }

  /* "yirage/_cython/core.pyx":126
 *     elif op_type == KN_SIGMOID_OP:
 *         return "kn_sigmoid_op"
 *     elif op_type == KN_GELU_OP:             # <<<<<<<<<<<<<<
 *         return "kn_gelu_op"
 *     elif op_type == KN_RELU_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_GELU_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":127
 *         return "kn_sigmoid_op"
 *     elif op_type == KN_GELU_OP:
 *         return "kn_gelu_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_RELU_OP:
 *         return "kn_relu_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_gelu_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_gelu_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":126
 *     elif op_type == KN_SIGMOID_OP:
 *         return "kn_sigmoid_op"
 *     elif op_type == KN_GELU_OP:             # <<<<<<<<<<<<<<
 *         return "kn_gelu_op"
 *     elif op_type == KN_RELU_OP:
*/
  }

  /* "yirage/_cython/core.pyx":128
 *     elif op_type == KN_GELU_OP:
 *         return "kn_gelu_op"
 *     elif op_type == KN_RELU_OP:             # <<<<<<<<<<<<<<
 *         return "kn_relu_op"
 *     elif op_type == KN_CLAMP_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_RELU_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":129
 *         return "kn_gelu_op"
 *     elif op_type == KN_RELU_OP:
 *         return "kn_relu_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_CLAMP_OP:
 *         return "kn_clamp_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_relu_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_relu_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":128
 *     elif op_type == KN_GELU_OP:
 *         return "kn_gelu_op"
 *     elif op_type == KN_RELU_OP:             # <<<<<<<<<<<<<<
 *         return "kn_relu_op"
 *     elif op_type == KN_CLAMP_OP:
*/
  }

  /* "yirage/_cython/core.pyx":130
 *     elif op_type == KN_RELU_OP:
 *         return "kn_relu_op"
 *     elif op_type == KN_CLAMP_OP:             # <<<<<<<<<<<<<<
 *         return "kn_clamp_op"
 *     elif op_type == KN_LOG_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_CLAMP_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":131
 *         return "kn_relu_op"
 *     elif op_type == KN_CLAMP_OP:
 *         return "kn_clamp_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_LOG_OP:
 *         return "kn_log_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_clamp_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_clamp_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":130
 *     elif op_type == KN_RELU_OP:
 *         return "kn_relu_op"
 *     elif op_type == KN_CLAMP_OP:             # <<<<<<<<<<<<<<
 *         return "kn_clamp_op"
 *     elif op_type == KN_LOG_OP:
*/
  }

  /* "yirage/_cython/core.pyx":132
 *     elif op_type == KN_CLAMP_OP:
 *         return "kn_clamp_op"
 *     elif op_type == KN_LOG_OP:             # <<<<<<<<<<<<<<
 *         return "kn_log_op"
 *     elif op_type == KN_ADD_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_LOG_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":133
 *         return "kn_clamp_op"
 *     elif op_type == KN_LOG_OP:
 *         return "kn_log_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_ADD_OP:
 *         return "kn_add_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_log_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_log_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":132
 *     elif op_type == KN_CLAMP_OP:
 *         return "kn_clamp_op"
 *     elif op_type == KN_LOG_OP:             # <<<<<<<<<<<<<<
 *         return "kn_log_op"
 *     elif op_type == KN_ADD_OP:
*/
  }

  /* "yirage/_cython/core.pyx":134
 *     elif op_type == KN_LOG_OP:
 *         return "kn_log_op"
 *     elif op_type == KN_ADD_OP:             # <<<<<<<<<<<<<<
 *         return "kn_add_op"
 *     elif op_type == KN_MUL_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_ADD_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":135
 *         return "kn_log_op"
 *     elif op_type == KN_ADD_OP:
 *         return "kn_add_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_MUL_OP:
 *         return "kn_mul_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_add_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_add_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":134
 *     elif op_type == KN_LOG_OP:
 *         return "kn_log_op"
 *     elif op_type == KN_ADD_OP:             # <<<<<<<<<<<<<<
 *         return "kn_add_op"
 *     elif op_type == KN_MUL_OP:
*/
  }

  /* "yirage/_cython/core.pyx":136
 *     elif op_type == KN_ADD_OP:
 *         return "kn_add_op"
 *     elif op_type == KN_MUL_OP:             # <<<<<<<<<<<<<<
 *         return "kn_mul_op"
 *     elif op_type == KN_DIV_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_MUL_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":137
 *         return "kn_add_op"
 *     elif op_type == KN_MUL_OP:
 *         return "kn_mul_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_DIV_OP:
 *         return "kn_div_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_mul_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_mul_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":136
 *     elif op_type == KN_ADD_OP:
 *         return "kn_add_op"
 *     elif op_type == KN_MUL_OP:             # <<<<<<<<<<<<<<
 *         return "kn_mul_op"
 *     elif op_type == KN_DIV_OP:
*/
  }

  /* "yirage/_cython/core.pyx":138
 *     elif op_type == KN_MUL_OP:
 *         return "kn_mul_op"
 *     elif op_type == KN_DIV_OP:             # <<<<<<<<<<<<<<
 *         return "kn_div_op"
 *     elif op_type == KN_POW_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_DIV_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":139
 *         return "kn_mul_op"
 *     elif op_type == KN_DIV_OP:
 *         return "kn_div_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_POW_OP:
 *         return "kn_pow_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_div_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_div_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":138
 *     elif op_type == KN_MUL_OP:
 *         return "kn_mul_op"
 *     elif op_type == KN_DIV_OP:             # <<<<<<<<<<<<<<
 *         return "kn_div_op"
 *     elif op_type == KN_POW_OP:
*/
  }

  /* "yirage/_cython/core.pyx":140
 *     elif op_type == KN_DIV_OP:
 *         return "kn_div_op"
 *     elif op_type == KN_POW_OP:             # <<<<<<<<<<<<<<
 *         return "kn_pow_op"
 *     elif op_type == KN_REDUCTION_0_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_POW_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":141
 *         return "kn_div_op"
 *     elif op_type == KN_POW_OP:
 *         return "kn_pow_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_REDUCTION_0_OP:
 *         return "kn_reduction_0_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_pow_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_pow_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":140
 *     elif op_type == KN_DIV_OP:
 *         return "kn_div_op"
 *     elif op_type == KN_POW_OP:             # <<<<<<<<<<<<<<
 *         return "kn_pow_op"
 *     elif op_type == KN_REDUCTION_0_OP:
*/
  }

  /* "yirage/_cython/core.pyx":142
 *     elif op_type == KN_POW_OP:
 *         return "kn_pow_op"
 *     elif op_type == KN_REDUCTION_0_OP:             # <<<<<<<<<<<<<<
 *         return "kn_reduction_0_op"
 *     elif op_type == KN_REDUCTION_1_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_REDUCTION_0_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":143
 *         return "kn_pow_op"
 *     elif op_type == KN_REDUCTION_0_OP:
 *         return "kn_reduction_0_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_REDUCTION_1_OP:
 *         return "kn_reduction_1_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_reduction_0_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_reduction_0_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":142
 *     elif op_type == KN_POW_OP:
 *         return "kn_pow_op"
 *     elif op_type == KN_REDUCTION_0_OP:             # <<<<<<<<<<<<<<
 *         return "kn_reduction_0_op"
 *     elif op_type == KN_REDUCTION_1_OP:
*/
  }

  /* "yirage/_cython/core.pyx":144
 *     elif op_type == KN_REDUCTION_0_OP:
 *         return "kn_reduction_0_op"
 *     elif op_type == KN_REDUCTION_1_OP:             # <<<<<<<<<<<<<<
 *         return "kn_reduction_1_op"
 *     elif op_type == KN_REDUCTION_2_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_REDUCTION_1_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":145
 *         return "kn_reduction_0_op"
 *     elif op_type == KN_REDUCTION_1_OP:
 *         return "kn_reduction_1_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_REDUCTION_2_OP:
 *         return "kn_reduction_2_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_reduction_1_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_reduction_1_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":144
 *     elif op_type == KN_REDUCTION_0_OP:
 *         return "kn_reduction_0_op"
 *     elif op_type == KN_REDUCTION_1_OP:             # <<<<<<<<<<<<<<
 *         return "kn_reduction_1_op"
 *     elif op_type == KN_REDUCTION_2_OP:
*/
  }

  /* "yirage/_cython/core.pyx":146
 *     elif op_type == KN_REDUCTION_1_OP:
 *         return "kn_reduction_1_op"
 *     elif op_type == KN_REDUCTION_2_OP:             # <<<<<<<<<<<<<<
 *         return "kn_reduction_2_op"
 *     elif op_type == KN_RMS_NORM_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_REDUCTION_2_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":147
 *         return "kn_reduction_1_op"
 *     elif op_type == KN_REDUCTION_2_OP:
 *         return "kn_reduction_2_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_RMS_NORM_OP:
 *         return "kn_rms_norm_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_reduction_2_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_reduction_2_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":146
 *     elif op_type == KN_REDUCTION_1_OP:
 *         return "kn_reduction_1_op"
 *     elif op_type == KN_REDUCTION_2_OP:             # <<<<<<<<<<<<<<
 *         return "kn_reduction_2_op"
 *     elif op_type == KN_RMS_NORM_OP:
*/
  }

  /* "yirage/_cython/core.pyx":148
 *     elif op_type == KN_REDUCTION_2_OP:
 *         return "kn_reduction_2_op"
 *     elif op_type == KN_RMS_NORM_OP:             # <<<<<<<<<<<<<<
 *         return "kn_rms_norm_op"
 *     elif op_type == KN_CONCAT_FIRST_OP_ID:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_RMS_NORM_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":149
 *         return "kn_reduction_2_op"
 *     elif op_type == KN_RMS_NORM_OP:
 *         return "kn_rms_norm_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_CONCAT_FIRST_OP_ID:
 *         return "kn_concat_first_op_id"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_rms_norm_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_rms_norm_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":148
 *     elif op_type == KN_REDUCTION_2_OP:
 *         return "kn_reduction_2_op"
 *     elif op_type == KN_RMS_NORM_OP:             # <<<<<<<<<<<<<<
 *         return "kn_rms_norm_op"
 *     elif op_type == KN_CONCAT_FIRST_OP_ID:
*/
  }

  /* "yirage/_cython/core.pyx":150
 *     elif op_type == KN_RMS_NORM_OP:
 *         return "kn_rms_norm_op"
 *     elif op_type == KN_CONCAT_FIRST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "kn_concat_first_op_id"
 *     elif op_type == KN_CONCAT_0_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_CONCAT_FIRST_OP_ID);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":151
 *         return "kn_rms_norm_op"
 *     elif op_type == KN_CONCAT_FIRST_OP_ID:
 *         return "kn_concat_first_op_id"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_CONCAT_0_OP:
 *         return "kn_concat_0_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_concat_first_op_id);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_concat_first_op_id;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":150
 *     elif op_type == KN_RMS_NORM_OP:
 *         return "kn_rms_norm_op"
 *     elif op_type == KN_CONCAT_FIRST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "kn_concat_first_op_id"
 *     elif op_type == KN_CONCAT_0_OP:
*/
  }

  /* "yirage/_cython/core.pyx":152
 *     elif op_type == KN_CONCAT_FIRST_OP_ID:
 *         return "kn_concat_first_op_id"
 *     elif op_type == KN_CONCAT_0_OP:             # <<<<<<<<<<<<<<
 *         return "kn_concat_0_op"
 *     elif op_type == KN_CONCAT_1_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_CONCAT_0_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":153
 *         return "kn_concat_first_op_id"
 *     elif op_type == KN_CONCAT_0_OP:
 *         return "kn_concat_0_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_CONCAT_1_OP:
 *         return "kn_concat_1_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_concat_0_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_concat_0_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":152
 *     elif op_type == KN_CONCAT_FIRST_OP_ID:
 *         return "kn_concat_first_op_id"
 *     elif op_type == KN_CONCAT_0_OP:             # <<<<<<<<<<<<<<
 *         return "kn_concat_0_op"
 *     elif op_type == KN_CONCAT_1_OP:
*/
  }

  /* "yirage/_cython/core.pyx":154
 *     elif op_type == KN_CONCAT_0_OP:
 *         return "kn_concat_0_op"
 *     elif op_type == KN_CONCAT_1_OP:             # <<<<<<<<<<<<<<
 *         return "kn_concat_1_op"
 *     elif op_type == KN_CONCAT_2_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_CONCAT_1_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":155
 *         return "kn_concat_0_op"
 *     elif op_type == KN_CONCAT_1_OP:
 *         return "kn_concat_1_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_CONCAT_2_OP:
 *         return "kn_concat_2_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_concat_1_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_concat_1_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":154
 *     elif op_type == KN_CONCAT_0_OP:
 *         return "kn_concat_0_op"
 *     elif op_type == KN_CONCAT_1_OP:             # <<<<<<<<<<<<<<
 *         return "kn_concat_1_op"
 *     elif op_type == KN_CONCAT_2_OP:
*/
  }

  /* "yirage/_cython/core.pyx":156
 *     elif op_type == KN_CONCAT_1_OP:
 *         return "kn_concat_1_op"
 *     elif op_type == KN_CONCAT_2_OP:             # <<<<<<<<<<<<<<
 *         return "kn_concat_2_op"
 *     elif op_type == KN_CONCAT_LAST_OP_ID:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_CONCAT_2_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":157
 *         return "kn_concat_1_op"
 *     elif op_type == KN_CONCAT_2_OP:
 *         return "kn_concat_2_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_CONCAT_LAST_OP_ID:
 *         return "kn_concat_last_op_id"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_concat_2_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_concat_2_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":156
 *     elif op_type == KN_CONCAT_1_OP:
 *         return "kn_concat_1_op"
 *     elif op_type == KN_CONCAT_2_OP:             # <<<<<<<<<<<<<<
 *         return "kn_concat_2_op"
 *     elif op_type == KN_CONCAT_LAST_OP_ID:
*/
  }

  /* "yirage/_cython/core.pyx":158
 *     elif op_type == KN_CONCAT_2_OP:
 *         return "kn_concat_2_op"
 *     elif op_type == KN_CONCAT_LAST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "kn_concat_last_op_id"
 *     elif op_type == KN_SPLIT_FIRST_OP_ID:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_CONCAT_LAST_OP_ID);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":159
 *         return "kn_concat_2_op"
 *     elif op_type == KN_CONCAT_LAST_OP_ID:
 *         return "kn_concat_last_op_id"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_SPLIT_FIRST_OP_ID:
 *         return "kn_split_first_op_id"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_concat_last_op_id);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_concat_last_op_id;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":158
 *     elif op_type == KN_CONCAT_2_OP:
 *         return "kn_concat_2_op"
 *     elif op_type == KN_CONCAT_LAST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "kn_concat_last_op_id"
 *     elif op_type == KN_SPLIT_FIRST_OP_ID:
*/
  }

  /* "yirage/_cython/core.pyx":160
 *     elif op_type == KN_CONCAT_LAST_OP_ID:
 *         return "kn_concat_last_op_id"
 *     elif op_type == KN_SPLIT_FIRST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "kn_split_first_op_id"
 *     elif op_type == KN_SPLIT_0_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_SPLIT_FIRST_OP_ID);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":161
 *         return "kn_concat_last_op_id"
 *     elif op_type == KN_SPLIT_FIRST_OP_ID:
 *         return "kn_split_first_op_id"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_SPLIT_0_OP:
 *         return "kn_split_0_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_split_first_op_id);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_split_first_op_id;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":160
 *     elif op_type == KN_CONCAT_LAST_OP_ID:
 *         return "kn_concat_last_op_id"
 *     elif op_type == KN_SPLIT_FIRST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "kn_split_first_op_id"
 *     elif op_type == KN_SPLIT_0_OP:
*/
  }

  /* "yirage/_cython/core.pyx":162
 *     elif op_type == KN_SPLIT_FIRST_OP_ID:
 *         return "kn_split_first_op_id"
 *     elif op_type == KN_SPLIT_0_OP:             # <<<<<<<<<<<<<<
 *         return "kn_split_0_op"
 *     elif op_type == KN_SPLIT_1_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_SPLIT_0_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":163
 *         return "kn_split_first_op_id"
 *     elif op_type == KN_SPLIT_0_OP:
 *         return "kn_split_0_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_SPLIT_1_OP:
 *         return "kn_split_1_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_split_0_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_split_0_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":162
 *     elif op_type == KN_SPLIT_FIRST_OP_ID:
 *         return "kn_split_first_op_id"
 *     elif op_type == KN_SPLIT_0_OP:             # <<<<<<<<<<<<<<
 *         return "kn_split_0_op"
 *     elif op_type == KN_SPLIT_1_OP:
*/
  }

  /* "yirage/_cython/core.pyx":164
 *     elif op_type == KN_SPLIT_0_OP:
 *         return "kn_split_0_op"
 *     elif op_type == KN_SPLIT_1_OP:             # <<<<<<<<<<<<<<
 *         return "kn_split_1_op"
 *     elif op_type == KN_SPLIT_2_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_SPLIT_1_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":165
 *         return "kn_split_0_op"
 *     elif op_type == KN_SPLIT_1_OP:
 *         return "kn_split_1_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_SPLIT_2_OP:
 *         return "kn_split_2_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_split_1_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_split_1_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":164
 *     elif op_type == KN_SPLIT_0_OP:
 *         return "kn_split_0_op"
 *     elif op_type == KN_SPLIT_1_OP:             # <<<<<<<<<<<<<<
 *         return "kn_split_1_op"
 *     elif op_type == KN_SPLIT_2_OP:
*/
  }

  /* "yirage/_cython/core.pyx":166
 *     elif op_type == KN_SPLIT_1_OP:
 *         return "kn_split_1_op"
 *     elif op_type == KN_SPLIT_2_OP:             # <<<<<<<<<<<<<<
 *         return "kn_split_2_op"
 *     elif op_type == KN_CHUNK_0_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_SPLIT_2_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":167
 *         return "kn_split_1_op"
 *     elif op_type == KN_SPLIT_2_OP:
 *         return "kn_split_2_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_CHUNK_0_OP:
 *         return "kn_chunk_0_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_split_2_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_split_2_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":166
 *     elif op_type == KN_SPLIT_1_OP:
 *         return "kn_split_1_op"
 *     elif op_type == KN_SPLIT_2_OP:             # <<<<<<<<<<<<<<
 *         return "kn_split_2_op"
 *     elif op_type == KN_CHUNK_0_OP:
*/
  }

  /* "yirage/_cython/core.pyx":168
 *     elif op_type == KN_SPLIT_2_OP:
 *         return "kn_split_2_op"
 *     elif op_type == KN_CHUNK_0_OP:             # <<<<<<<<<<<<<<
 *         return "kn_chunk_0_op"
 *     elif op_type == KN_CHUNK_1_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_CHUNK_0_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":169
 *         return "kn_split_2_op"
 *     elif op_type == KN_CHUNK_0_OP:
 *         return "kn_chunk_0_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_CHUNK_1_OP:
 *         return "kn_chunk_1_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_chunk_0_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_chunk_0_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":168
 *     elif op_type == KN_SPLIT_2_OP:
 *         return "kn_split_2_op"
 *     elif op_type == KN_CHUNK_0_OP:             # <<<<<<<<<<<<<<
 *         return "kn_chunk_0_op"
 *     elif op_type == KN_CHUNK_1_OP:
*/
  }

  /* "yirage/_cython/core.pyx":170
 *     elif op_type == KN_CHUNK_0_OP:
 *         return "kn_chunk_0_op"
 *     elif op_type == KN_CHUNK_1_OP:             # <<<<<<<<<<<<<<
 *         return "kn_chunk_1_op"
 *     elif op_type == KN_CHUNK_2_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_CHUNK_1_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":171
 *         return "kn_chunk_0_op"
 *     elif op_type == KN_CHUNK_1_OP:
 *         return "kn_chunk_1_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_CHUNK_2_OP:
 *         return "kn_chunk_2_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_chunk_1_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_chunk_1_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":170
 *     elif op_type == KN_CHUNK_0_OP:
 *         return "kn_chunk_0_op"
 *     elif op_type == KN_CHUNK_1_OP:             # <<<<<<<<<<<<<<
 *         return "kn_chunk_1_op"
 *     elif op_type == KN_CHUNK_2_OP:
*/
  }

  /* "yirage/_cython/core.pyx":172
 *     elif op_type == KN_CHUNK_1_OP:
 *         return "kn_chunk_1_op"
 *     elif op_type == KN_CHUNK_2_OP:             # <<<<<<<<<<<<<<
 *         return "kn_chunk_2_op"
 *     elif op_type == KN_SPLIT_LAST_OP_ID:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_CHUNK_2_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":173
 *         return "kn_chunk_1_op"
 *     elif op_type == KN_CHUNK_2_OP:
 *         return "kn_chunk_2_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_SPLIT_LAST_OP_ID:
 *         return "kn_split_last_op_id"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_chunk_2_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_chunk_2_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":172
 *     elif op_type == KN_CHUNK_1_OP:
 *         return "kn_chunk_1_op"
 *     elif op_type == KN_CHUNK_2_OP:             # <<<<<<<<<<<<<<
 *         return "kn_chunk_2_op"
 *     elif op_type == KN_SPLIT_LAST_OP_ID:
*/
  }

  /* "yirage/_cython/core.pyx":174
 *     elif op_type == KN_CHUNK_2_OP:
 *         return "kn_chunk_2_op"
 *     elif op_type == KN_SPLIT_LAST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "kn_split_last_op_id"
 *     elif op_type == KN_ALLREDUCE_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_SPLIT_LAST_OP_ID);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":175
 *         return "kn_chunk_2_op"
 *     elif op_type == KN_SPLIT_LAST_OP_ID:
 *         return "kn_split_last_op_id"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_ALLREDUCE_OP:
 *         return "kn_allreduce_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_split_last_op_id);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_split_last_op_id;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":174
 *     elif op_type == KN_CHUNK_2_OP:
 *         return "kn_chunk_2_op"
 *     elif op_type == KN_SPLIT_LAST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "kn_split_last_op_id"
 *     elif op_type == KN_ALLREDUCE_OP:
*/
  }

  /* "yirage/_cython/core.pyx":176
 *     elif op_type == KN_SPLIT_LAST_OP_ID:
 *         return "kn_split_last_op_id"
 *     elif op_type == KN_ALLREDUCE_OP:             # <<<<<<<<<<<<<<
 *         return "kn_allreduce_op"
 *     elif op_type == KN_CUSTOMIZED_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_ALLREDUCE_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":177
 *         return "kn_split_last_op_id"
 *     elif op_type == KN_ALLREDUCE_OP:
 *         return "kn_allreduce_op"             # <<<<<<<<<<<<<<
 *     elif op_type == KN_CUSTOMIZED_OP:
 *         return "kn_customized_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_allreduce_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_allreduce_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":176
 *     elif op_type == KN_SPLIT_LAST_OP_ID:
 *         return "kn_split_last_op_id"
 *     elif op_type == KN_ALLREDUCE_OP:             # <<<<<<<<<<<<<<
 *         return "kn_allreduce_op"
 *     elif op_type == KN_CUSTOMIZED_OP:
*/
  }

  /* "yirage/_cython/core.pyx":178
 *     elif op_type == KN_ALLREDUCE_OP:
 *         return "kn_allreduce_op"
 *     elif op_type == KN_CUSTOMIZED_OP:             # <<<<<<<<<<<<<<
 *         return "kn_customized_op"
 *     else:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::KN_CUSTOMIZED_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":179
 *         return "kn_allreduce_op"
 *     elif op_type == KN_CUSTOMIZED_OP:
 *         return "kn_customized_op"             # <<<<<<<<<<<<<<
 *     else:
 *         return "unknown_op_type" + str(op_type)
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_kn_customized_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_kn_customized_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":178
 *     elif op_type == KN_ALLREDUCE_OP:
 *         return "kn_allreduce_op"
 *     elif op_type == KN_CUSTOMIZED_OP:             # <<<<<<<<<<<<<<
 *         return "kn_customized_op"
 *     else:
*/
  }

  /* "yirage/_cython/core.pyx":181
 *         return "kn_customized_op"
 *     else:
 *         return "unknown_op_type" + str(op_type)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_op_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Unicode(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_mstate_global->__pyx_n_u_unknown_op_type, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 181, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":105
 * float64 = dtype('fp64')
 * 
 * def get_kn_operator_type_string(int op_type):             # <<<<<<<<<<<<<<
 *     if op_type == KN_UNKOWN:
 *         return "kn_unknown"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("yirage.core.get_kn_operator_type_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":184
 * 
 * 
 * def get_tb_operator_type_string(int op_type):             # <<<<<<<<<<<<<<
 *     if op_type == TB_UNKOWN:
 *         return "tb_unknown"
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_3get_tb_operator_type_string(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_3get_tb_operator_type_string = {"get_tb_operator_type_string", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_3get_tb_operator_type_string, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_3get_tb_operator_type_string(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_op_type;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_tb_operator_type_string (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_op_type,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 184, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 184, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "get_tb_operator_type_string", 0) < 0) __PYX_ERR(0, 184, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("get_tb_operator_type_string", 1, 1, 1, i); __PYX_ERR(0, 184, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 184, __pyx_L3_error)
    }
    __pyx_v_op_type = __Pyx_PyLong_As_int(values[0]); if (unlikely((__pyx_v_op_type == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 184, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_tb_operator_type_string", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 184, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.get_tb_operator_type_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_2get_tb_operator_type_string(__pyx_self, __pyx_v_op_type);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_2get_tb_operator_type_string(CYTHON_UNUSED PyObject *__pyx_self, int __pyx_v_op_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_tb_operator_type_string", 0);

  /* "yirage/_cython/core.pyx":185
 * 
 * def get_tb_operator_type_string(int op_type):
 *     if op_type == TB_UNKOWN:             # <<<<<<<<<<<<<<
 *         return "tb_unknown"
 *     elif op_type == TB_INPUT_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_UNKOWN);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":186
 * def get_tb_operator_type_string(int op_type):
 *     if op_type == TB_UNKOWN:
 *         return "tb_unknown"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_INPUT_OP:
 *         return "tb_input_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_unknown);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_unknown;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":185
 * 
 * def get_tb_operator_type_string(int op_type):
 *     if op_type == TB_UNKOWN:             # <<<<<<<<<<<<<<
 *         return "tb_unknown"
 *     elif op_type == TB_INPUT_OP:
*/
  }

  /* "yirage/_cython/core.pyx":187
 *     if op_type == TB_UNKOWN:
 *         return "tb_unknown"
 *     elif op_type == TB_INPUT_OP:             # <<<<<<<<<<<<<<
 *         return "tb_input_op"
 *     elif op_type == TB_OUTPUT_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_INPUT_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":188
 *         return "tb_unknown"
 *     elif op_type == TB_INPUT_OP:
 *         return "tb_input_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_OUTPUT_OP:
 *         return "tb_output_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_input_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_input_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":187
 *     if op_type == TB_UNKOWN:
 *         return "tb_unknown"
 *     elif op_type == TB_INPUT_OP:             # <<<<<<<<<<<<<<
 *         return "tb_input_op"
 *     elif op_type == TB_OUTPUT_OP:
*/
  }

  /* "yirage/_cython/core.pyx":189
 *     elif op_type == TB_INPUT_OP:
 *         return "tb_input_op"
 *     elif op_type == TB_OUTPUT_OP:             # <<<<<<<<<<<<<<
 *         return "tb_output_op"
 *     elif op_type == TB_MATMUL_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_OUTPUT_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":190
 *         return "tb_input_op"
 *     elif op_type == TB_OUTPUT_OP:
 *         return "tb_output_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_MATMUL_OP:
 *         return "tb_matmul_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_output_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_output_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":189
 *     elif op_type == TB_INPUT_OP:
 *         return "tb_input_op"
 *     elif op_type == TB_OUTPUT_OP:             # <<<<<<<<<<<<<<
 *         return "tb_output_op"
 *     elif op_type == TB_MATMUL_OP:
*/
  }

  /* "yirage/_cython/core.pyx":191
 *     elif op_type == TB_OUTPUT_OP:
 *         return "tb_output_op"
 *     elif op_type == TB_MATMUL_OP:             # <<<<<<<<<<<<<<
 *         return "tb_matmul_op"
 *     elif op_type == TB_EXP_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_MATMUL_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":192
 *         return "tb_output_op"
 *     elif op_type == TB_MATMUL_OP:
 *         return "tb_matmul_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_EXP_OP:
 *         return "tb_exp_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_matmul_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_matmul_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":191
 *     elif op_type == TB_OUTPUT_OP:
 *         return "tb_output_op"
 *     elif op_type == TB_MATMUL_OP:             # <<<<<<<<<<<<<<
 *         return "tb_matmul_op"
 *     elif op_type == TB_EXP_OP:
*/
  }

  /* "yirage/_cython/core.pyx":193
 *     elif op_type == TB_MATMUL_OP:
 *         return "tb_matmul_op"
 *     elif op_type == TB_EXP_OP:             # <<<<<<<<<<<<<<
 *         return "tb_exp_op"
 *     elif op_type == TB_SQUARE_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_EXP_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":194
 *         return "tb_matmul_op"
 *     elif op_type == TB_EXP_OP:
 *         return "tb_exp_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_SQUARE_OP:
 *         return "tb_square_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_exp_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_exp_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":193
 *     elif op_type == TB_MATMUL_OP:
 *         return "tb_matmul_op"
 *     elif op_type == TB_EXP_OP:             # <<<<<<<<<<<<<<
 *         return "tb_exp_op"
 *     elif op_type == TB_SQUARE_OP:
*/
  }

  /* "yirage/_cython/core.pyx":195
 *     elif op_type == TB_EXP_OP:
 *         return "tb_exp_op"
 *     elif op_type == TB_SQUARE_OP:             # <<<<<<<<<<<<<<
 *         return "tb_square_op"
 *     elif op_type == TB_SQRT_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_SQUARE_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":196
 *         return "tb_exp_op"
 *     elif op_type == TB_SQUARE_OP:
 *         return "tb_square_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_SQRT_OP:
 *         return "tb_sqrt_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_square_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_square_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":195
 *     elif op_type == TB_EXP_OP:
 *         return "tb_exp_op"
 *     elif op_type == TB_SQUARE_OP:             # <<<<<<<<<<<<<<
 *         return "tb_square_op"
 *     elif op_type == TB_SQRT_OP:
*/
  }

  /* "yirage/_cython/core.pyx":197
 *     elif op_type == TB_SQUARE_OP:
 *         return "tb_square_op"
 *     elif op_type == TB_SQRT_OP:             # <<<<<<<<<<<<<<
 *         return "tb_sqrt_op"
 *     elif op_type == TB_MUL_SCALAR_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_SQRT_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":198
 *         return "tb_square_op"
 *     elif op_type == TB_SQRT_OP:
 *         return "tb_sqrt_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_MUL_SCALAR_OP:
 *         return "tb_mul_scalar_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_sqrt_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_sqrt_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":197
 *     elif op_type == TB_SQUARE_OP:
 *         return "tb_square_op"
 *     elif op_type == TB_SQRT_OP:             # <<<<<<<<<<<<<<
 *         return "tb_sqrt_op"
 *     elif op_type == TB_MUL_SCALAR_OP:
*/
  }

  /* "yirage/_cython/core.pyx":199
 *     elif op_type == TB_SQRT_OP:
 *         return "tb_sqrt_op"
 *     elif op_type == TB_MUL_SCALAR_OP:             # <<<<<<<<<<<<<<
 *         return "tb_mul_scalar_op"
 *     elif op_type == TB_SILU_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_MUL_SCALAR_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":200
 *         return "tb_sqrt_op"
 *     elif op_type == TB_MUL_SCALAR_OP:
 *         return "tb_mul_scalar_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_SILU_OP:
 *         return "tb_silu_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_mul_scalar_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_mul_scalar_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":199
 *     elif op_type == TB_SQRT_OP:
 *         return "tb_sqrt_op"
 *     elif op_type == TB_MUL_SCALAR_OP:             # <<<<<<<<<<<<<<
 *         return "tb_mul_scalar_op"
 *     elif op_type == TB_SILU_OP:
*/
  }

  /* "yirage/_cython/core.pyx":201
 *     elif op_type == TB_MUL_SCALAR_OP:
 *         return "tb_mul_scalar_op"
 *     elif op_type == TB_SILU_OP:             # <<<<<<<<<<<<<<
 *         return "tb_silu_op"
 *     elif op_type == TB_SIGMOID_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_SILU_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":202
 *         return "tb_mul_scalar_op"
 *     elif op_type == TB_SILU_OP:
 *         return "tb_silu_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_SIGMOID_OP:
 *         return "tb_sigmoid_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_silu_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_silu_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":201
 *     elif op_type == TB_MUL_SCALAR_OP:
 *         return "tb_mul_scalar_op"
 *     elif op_type == TB_SILU_OP:             # <<<<<<<<<<<<<<
 *         return "tb_silu_op"
 *     elif op_type == TB_SIGMOID_OP:
*/
  }

  /* "yirage/_cython/core.pyx":203
 *     elif op_type == TB_SILU_OP:
 *         return "tb_silu_op"
 *     elif op_type == TB_SIGMOID_OP:             # <<<<<<<<<<<<<<
 *         return "tb_sigmoid_op"
 *     elif op_type == TB_GELU_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_SIGMOID_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":204
 *         return "tb_silu_op"
 *     elif op_type == TB_SIGMOID_OP:
 *         return "tb_sigmoid_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_GELU_OP:
 *         return "tb_gelu_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_sigmoid_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_sigmoid_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":203
 *     elif op_type == TB_SILU_OP:
 *         return "tb_silu_op"
 *     elif op_type == TB_SIGMOID_OP:             # <<<<<<<<<<<<<<
 *         return "tb_sigmoid_op"
 *     elif op_type == TB_GELU_OP:
*/
  }

  /* "yirage/_cython/core.pyx":205
 *     elif op_type == TB_SIGMOID_OP:
 *         return "tb_sigmoid_op"
 *     elif op_type == TB_GELU_OP:             # <<<<<<<<<<<<<<
 *         return "tb_gelu_op"
 *     elif op_type == TB_RELU_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_GELU_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":206
 *         return "tb_sigmoid_op"
 *     elif op_type == TB_GELU_OP:
 *         return "tb_gelu_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_RELU_OP:
 *         return "tb_relu_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_gelu_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_gelu_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":205
 *     elif op_type == TB_SIGMOID_OP:
 *         return "tb_sigmoid_op"
 *     elif op_type == TB_GELU_OP:             # <<<<<<<<<<<<<<
 *         return "tb_gelu_op"
 *     elif op_type == TB_RELU_OP:
*/
  }

  /* "yirage/_cython/core.pyx":207
 *     elif op_type == TB_GELU_OP:
 *         return "tb_gelu_op"
 *     elif op_type == TB_RELU_OP:             # <<<<<<<<<<<<<<
 *         return "tb_relu_op"
 *     elif op_type == TB_CLAMP_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_RELU_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":208
 *         return "tb_gelu_op"
 *     elif op_type == TB_RELU_OP:
 *         return "tb_relu_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_CLAMP_OP:
 *         return "tb_clamp_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_relu_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_relu_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":207
 *     elif op_type == TB_GELU_OP:
 *         return "tb_gelu_op"
 *     elif op_type == TB_RELU_OP:             # <<<<<<<<<<<<<<
 *         return "tb_relu_op"
 *     elif op_type == TB_CLAMP_OP:
*/
  }

  /* "yirage/_cython/core.pyx":209
 *     elif op_type == TB_RELU_OP:
 *         return "tb_relu_op"
 *     elif op_type == TB_CLAMP_OP:             # <<<<<<<<<<<<<<
 *         return "tb_clamp_op"
 *     elif op_type == TB_LOG_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_CLAMP_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":210
 *         return "tb_relu_op"
 *     elif op_type == TB_CLAMP_OP:
 *         return "tb_clamp_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_LOG_OP:
 *         return "tb_log_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_clamp_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_clamp_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":209
 *     elif op_type == TB_RELU_OP:
 *         return "tb_relu_op"
 *     elif op_type == TB_CLAMP_OP:             # <<<<<<<<<<<<<<
 *         return "tb_clamp_op"
 *     elif op_type == TB_LOG_OP:
*/
  }

  /* "yirage/_cython/core.pyx":211
 *     elif op_type == TB_CLAMP_OP:
 *         return "tb_clamp_op"
 *     elif op_type == TB_LOG_OP:             # <<<<<<<<<<<<<<
 *         return "tb_log_op"
 *     elif op_type == TB_ADD_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_LOG_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":212
 *         return "tb_clamp_op"
 *     elif op_type == TB_LOG_OP:
 *         return "tb_log_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_ADD_OP:
 *         return "tb_add_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_log_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_log_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":211
 *     elif op_type == TB_CLAMP_OP:
 *         return "tb_clamp_op"
 *     elif op_type == TB_LOG_OP:             # <<<<<<<<<<<<<<
 *         return "tb_log_op"
 *     elif op_type == TB_ADD_OP:
*/
  }

  /* "yirage/_cython/core.pyx":213
 *     elif op_type == TB_LOG_OP:
 *         return "tb_log_op"
 *     elif op_type == TB_ADD_OP:             # <<<<<<<<<<<<<<
 *         return "tb_add_op"
 *     elif op_type == TB_MUL_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_ADD_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":214
 *         return "tb_log_op"
 *     elif op_type == TB_ADD_OP:
 *         return "tb_add_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_MUL_OP:
 *         return "tb_mul_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_add_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_add_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":213
 *     elif op_type == TB_LOG_OP:
 *         return "tb_log_op"
 *     elif op_type == TB_ADD_OP:             # <<<<<<<<<<<<<<
 *         return "tb_add_op"
 *     elif op_type == TB_MUL_OP:
*/
  }

  /* "yirage/_cython/core.pyx":215
 *     elif op_type == TB_ADD_OP:
 *         return "tb_add_op"
 *     elif op_type == TB_MUL_OP:             # <<<<<<<<<<<<<<
 *         return "tb_mul_op"
 *     elif op_type == TB_DIV_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_MUL_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":216
 *         return "tb_add_op"
 *     elif op_type == TB_MUL_OP:
 *         return "tb_mul_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_DIV_OP:
 *         return "tb_div_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_mul_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_mul_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":215
 *     elif op_type == TB_ADD_OP:
 *         return "tb_add_op"
 *     elif op_type == TB_MUL_OP:             # <<<<<<<<<<<<<<
 *         return "tb_mul_op"
 *     elif op_type == TB_DIV_OP:
*/
  }

  /* "yirage/_cython/core.pyx":217
 *     elif op_type == TB_MUL_OP:
 *         return "tb_mul_op"
 *     elif op_type == TB_DIV_OP:             # <<<<<<<<<<<<<<
 *         return "tb_div_op"
 *     elif op_type == TB_SUB_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_DIV_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":218
 *         return "tb_mul_op"
 *     elif op_type == TB_DIV_OP:
 *         return "tb_div_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_SUB_OP:
 *         return "tb_sub_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_div_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_div_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":217
 *     elif op_type == TB_MUL_OP:
 *         return "tb_mul_op"
 *     elif op_type == TB_DIV_OP:             # <<<<<<<<<<<<<<
 *         return "tb_div_op"
 *     elif op_type == TB_SUB_OP:
*/
  }

  /* "yirage/_cython/core.pyx":219
 *     elif op_type == TB_DIV_OP:
 *         return "tb_div_op"
 *     elif op_type == TB_SUB_OP:             # <<<<<<<<<<<<<<
 *         return "tb_sub_op"
 *     elif op_type == TB_POW_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_SUB_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":220
 *         return "tb_div_op"
 *     elif op_type == TB_SUB_OP:
 *         return "tb_sub_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_POW_OP:
 *         return "tb_pow_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_sub_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_sub_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":219
 *     elif op_type == TB_DIV_OP:
 *         return "tb_div_op"
 *     elif op_type == TB_SUB_OP:             # <<<<<<<<<<<<<<
 *         return "tb_sub_op"
 *     elif op_type == TB_POW_OP:
*/
  }

  /* "yirage/_cython/core.pyx":221
 *     elif op_type == TB_SUB_OP:
 *         return "tb_sub_op"
 *     elif op_type == TB_POW_OP:             # <<<<<<<<<<<<<<
 *         return "tb_pow_op"
 *     elif op_type == TB_REDUCTION_FIRST_OP_ID:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_POW_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":222
 *         return "tb_sub_op"
 *     elif op_type == TB_POW_OP:
 *         return "tb_pow_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_REDUCTION_FIRST_OP_ID:
 *         return "tb_reduction_first_op_id"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_pow_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_pow_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":221
 *     elif op_type == TB_SUB_OP:
 *         return "tb_sub_op"
 *     elif op_type == TB_POW_OP:             # <<<<<<<<<<<<<<
 *         return "tb_pow_op"
 *     elif op_type == TB_REDUCTION_FIRST_OP_ID:
*/
  }

  /* "yirage/_cython/core.pyx":223
 *     elif op_type == TB_POW_OP:
 *         return "tb_pow_op"
 *     elif op_type == TB_REDUCTION_FIRST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_first_op_id"
 *     elif op_type == TB_REDUCTION_0_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_REDUCTION_FIRST_OP_ID);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":224
 *         return "tb_pow_op"
 *     elif op_type == TB_REDUCTION_FIRST_OP_ID:
 *         return "tb_reduction_first_op_id"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_REDUCTION_0_OP:
 *         return "tb_reduction_0_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_reduction_first_op_id);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_reduction_first_op_id;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":223
 *     elif op_type == TB_POW_OP:
 *         return "tb_pow_op"
 *     elif op_type == TB_REDUCTION_FIRST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_first_op_id"
 *     elif op_type == TB_REDUCTION_0_OP:
*/
  }

  /* "yirage/_cython/core.pyx":225
 *     elif op_type == TB_REDUCTION_FIRST_OP_ID:
 *         return "tb_reduction_first_op_id"
 *     elif op_type == TB_REDUCTION_0_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_0_op"
 *     elif op_type == TB_REDUCTION_1_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_REDUCTION_0_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":226
 *         return "tb_reduction_first_op_id"
 *     elif op_type == TB_REDUCTION_0_OP:
 *         return "tb_reduction_0_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_REDUCTION_1_OP:
 *         return "tb_reduction_1_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_reduction_0_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_reduction_0_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":225
 *     elif op_type == TB_REDUCTION_FIRST_OP_ID:
 *         return "tb_reduction_first_op_id"
 *     elif op_type == TB_REDUCTION_0_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_0_op"
 *     elif op_type == TB_REDUCTION_1_OP:
*/
  }

  /* "yirage/_cython/core.pyx":227
 *     elif op_type == TB_REDUCTION_0_OP:
 *         return "tb_reduction_0_op"
 *     elif op_type == TB_REDUCTION_1_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_1_op"
 *     elif op_type == TB_REDUCTION_2_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_REDUCTION_1_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":228
 *         return "tb_reduction_0_op"
 *     elif op_type == TB_REDUCTION_1_OP:
 *         return "tb_reduction_1_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_REDUCTION_2_OP:
 *         return "tb_reduction_2_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_reduction_1_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_reduction_1_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":227
 *     elif op_type == TB_REDUCTION_0_OP:
 *         return "tb_reduction_0_op"
 *     elif op_type == TB_REDUCTION_1_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_1_op"
 *     elif op_type == TB_REDUCTION_2_OP:
*/
  }

  /* "yirage/_cython/core.pyx":229
 *     elif op_type == TB_REDUCTION_1_OP:
 *         return "tb_reduction_1_op"
 *     elif op_type == TB_REDUCTION_2_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_2_op"
 *     elif op_type == TB_REDUCTION_0_TO_DIMX_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_REDUCTION_2_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":230
 *         return "tb_reduction_1_op"
 *     elif op_type == TB_REDUCTION_2_OP:
 *         return "tb_reduction_2_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_REDUCTION_0_TO_DIMX_OP:
 *         return "tb_reduction_0_to_dimx_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_reduction_2_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_reduction_2_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":229
 *     elif op_type == TB_REDUCTION_1_OP:
 *         return "tb_reduction_1_op"
 *     elif op_type == TB_REDUCTION_2_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_2_op"
 *     elif op_type == TB_REDUCTION_0_TO_DIMX_OP:
*/
  }

  /* "yirage/_cython/core.pyx":231
 *     elif op_type == TB_REDUCTION_2_OP:
 *         return "tb_reduction_2_op"
 *     elif op_type == TB_REDUCTION_0_TO_DIMX_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_0_to_dimx_op"
 *     elif op_type == TB_REDUCTION_1_TO_DIMX_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_REDUCTION_0_TO_DIMX_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":232
 *         return "tb_reduction_2_op"
 *     elif op_type == TB_REDUCTION_0_TO_DIMX_OP:
 *         return "tb_reduction_0_to_dimx_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_REDUCTION_1_TO_DIMX_OP:
 *         return "tb_reduction_1_to_dimx_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_reduction_0_to_dimx_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_reduction_0_to_dimx_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":231
 *     elif op_type == TB_REDUCTION_2_OP:
 *         return "tb_reduction_2_op"
 *     elif op_type == TB_REDUCTION_0_TO_DIMX_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_0_to_dimx_op"
 *     elif op_type == TB_REDUCTION_1_TO_DIMX_OP:
*/
  }

  /* "yirage/_cython/core.pyx":233
 *     elif op_type == TB_REDUCTION_0_TO_DIMX_OP:
 *         return "tb_reduction_0_to_dimx_op"
 *     elif op_type == TB_REDUCTION_1_TO_DIMX_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_1_to_dimx_op"
 *     elif op_type == TB_REDUCTION_2_TO_DIMX_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_REDUCTION_1_TO_DIMX_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":234
 *         return "tb_reduction_0_to_dimx_op"
 *     elif op_type == TB_REDUCTION_1_TO_DIMX_OP:
 *         return "tb_reduction_1_to_dimx_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_REDUCTION_2_TO_DIMX_OP:
 *         return "tb_reduction_2_to_dimx_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_reduction_1_to_dimx_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_reduction_1_to_dimx_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":233
 *     elif op_type == TB_REDUCTION_0_TO_DIMX_OP:
 *         return "tb_reduction_0_to_dimx_op"
 *     elif op_type == TB_REDUCTION_1_TO_DIMX_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_1_to_dimx_op"
 *     elif op_type == TB_REDUCTION_2_TO_DIMX_OP:
*/
  }

  /* "yirage/_cython/core.pyx":235
 *     elif op_type == TB_REDUCTION_1_TO_DIMX_OP:
 *         return "tb_reduction_1_to_dimx_op"
 *     elif op_type == TB_REDUCTION_2_TO_DIMX_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_2_to_dimx_op"
 *     elif op_type == TB_REDUCTION_0_MAX_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_REDUCTION_2_TO_DIMX_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":236
 *         return "tb_reduction_1_to_dimx_op"
 *     elif op_type == TB_REDUCTION_2_TO_DIMX_OP:
 *         return "tb_reduction_2_to_dimx_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_REDUCTION_0_MAX_OP:
 *         return "tb_reduction_0_max_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_reduction_2_to_dimx_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_reduction_2_to_dimx_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":235
 *     elif op_type == TB_REDUCTION_1_TO_DIMX_OP:
 *         return "tb_reduction_1_to_dimx_op"
 *     elif op_type == TB_REDUCTION_2_TO_DIMX_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_2_to_dimx_op"
 *     elif op_type == TB_REDUCTION_0_MAX_OP:
*/
  }

  /* "yirage/_cython/core.pyx":237
 *     elif op_type == TB_REDUCTION_2_TO_DIMX_OP:
 *         return "tb_reduction_2_to_dimx_op"
 *     elif op_type == TB_REDUCTION_0_MAX_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_0_max_op"
 *     elif op_type == TB_REDUCTION_1_MAX_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_REDUCTION_0_MAX_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":238
 *         return "tb_reduction_2_to_dimx_op"
 *     elif op_type == TB_REDUCTION_0_MAX_OP:
 *         return "tb_reduction_0_max_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_REDUCTION_1_MAX_OP:
 *         return "tb_reduction_1_max_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_reduction_0_max_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_reduction_0_max_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":237
 *     elif op_type == TB_REDUCTION_2_TO_DIMX_OP:
 *         return "tb_reduction_2_to_dimx_op"
 *     elif op_type == TB_REDUCTION_0_MAX_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_0_max_op"
 *     elif op_type == TB_REDUCTION_1_MAX_OP:
*/
  }

  /* "yirage/_cython/core.pyx":239
 *     elif op_type == TB_REDUCTION_0_MAX_OP:
 *         return "tb_reduction_0_max_op"
 *     elif op_type == TB_REDUCTION_1_MAX_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_1_max_op"
 *     elif op_type == TB_REDUCTION_2_MAX_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_REDUCTION_1_MAX_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":240
 *         return "tb_reduction_0_max_op"
 *     elif op_type == TB_REDUCTION_1_MAX_OP:
 *         return "tb_reduction_1_max_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_REDUCTION_2_MAX_OP:
 *         return "tb_reduction_2_max_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_reduction_1_max_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_reduction_1_max_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":239
 *     elif op_type == TB_REDUCTION_0_MAX_OP:
 *         return "tb_reduction_0_max_op"
 *     elif op_type == TB_REDUCTION_1_MAX_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_1_max_op"
 *     elif op_type == TB_REDUCTION_2_MAX_OP:
*/
  }

  /* "yirage/_cython/core.pyx":241
 *     elif op_type == TB_REDUCTION_1_MAX_OP:
 *         return "tb_reduction_1_max_op"
 *     elif op_type == TB_REDUCTION_2_MAX_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_2_max_op"
 *     elif op_type == TB_REDUCTION_LAST_OP_ID:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_REDUCTION_2_MAX_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":242
 *         return "tb_reduction_1_max_op"
 *     elif op_type == TB_REDUCTION_2_MAX_OP:
 *         return "tb_reduction_2_max_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_REDUCTION_LAST_OP_ID:
 *         return "tb_reduction_last_op_id"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_reduction_2_max_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_reduction_2_max_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":241
 *     elif op_type == TB_REDUCTION_1_MAX_OP:
 *         return "tb_reduction_1_max_op"
 *     elif op_type == TB_REDUCTION_2_MAX_OP:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_2_max_op"
 *     elif op_type == TB_REDUCTION_LAST_OP_ID:
*/
  }

  /* "yirage/_cython/core.pyx":243
 *     elif op_type == TB_REDUCTION_2_MAX_OP:
 *         return "tb_reduction_2_max_op"
 *     elif op_type == TB_REDUCTION_LAST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_last_op_id"
 *     elif op_type == TB_RMS_NORM_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_REDUCTION_LAST_OP_ID);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":244
 *         return "tb_reduction_2_max_op"
 *     elif op_type == TB_REDUCTION_LAST_OP_ID:
 *         return "tb_reduction_last_op_id"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_RMS_NORM_OP:
 *         return "tb_rms_norm_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_reduction_last_op_id);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_reduction_last_op_id;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":243
 *     elif op_type == TB_REDUCTION_2_MAX_OP:
 *         return "tb_reduction_2_max_op"
 *     elif op_type == TB_REDUCTION_LAST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "tb_reduction_last_op_id"
 *     elif op_type == TB_RMS_NORM_OP:
*/
  }

  /* "yirage/_cython/core.pyx":245
 *     elif op_type == TB_REDUCTION_LAST_OP_ID:
 *         return "tb_reduction_last_op_id"
 *     elif op_type == TB_RMS_NORM_OP:             # <<<<<<<<<<<<<<
 *         return "tb_rms_norm_op"
 *     elif op_type == TB_CONCAT_FIRST_OP_ID:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_RMS_NORM_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":246
 *         return "tb_reduction_last_op_id"
 *     elif op_type == TB_RMS_NORM_OP:
 *         return "tb_rms_norm_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_CONCAT_FIRST_OP_ID:
 *         return "tb_concat_first_op_id"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_rms_norm_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_rms_norm_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":245
 *     elif op_type == TB_REDUCTION_LAST_OP_ID:
 *         return "tb_reduction_last_op_id"
 *     elif op_type == TB_RMS_NORM_OP:             # <<<<<<<<<<<<<<
 *         return "tb_rms_norm_op"
 *     elif op_type == TB_CONCAT_FIRST_OP_ID:
*/
  }

  /* "yirage/_cython/core.pyx":247
 *     elif op_type == TB_RMS_NORM_OP:
 *         return "tb_rms_norm_op"
 *     elif op_type == TB_CONCAT_FIRST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "tb_concat_first_op_id"
 *     elif op_type == TB_CONCAT_0_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_CONCAT_FIRST_OP_ID);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":248
 *         return "tb_rms_norm_op"
 *     elif op_type == TB_CONCAT_FIRST_OP_ID:
 *         return "tb_concat_first_op_id"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_CONCAT_0_OP:
 *         return "tb_concat_0_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_concat_first_op_id);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_concat_first_op_id;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":247
 *     elif op_type == TB_RMS_NORM_OP:
 *         return "tb_rms_norm_op"
 *     elif op_type == TB_CONCAT_FIRST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "tb_concat_first_op_id"
 *     elif op_type == TB_CONCAT_0_OP:
*/
  }

  /* "yirage/_cython/core.pyx":249
 *     elif op_type == TB_CONCAT_FIRST_OP_ID:
 *         return "tb_concat_first_op_id"
 *     elif op_type == TB_CONCAT_0_OP:             # <<<<<<<<<<<<<<
 *         return "tb_concat_0_op"
 *     elif op_type == TB_CONCAT_1_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_CONCAT_0_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":250
 *         return "tb_concat_first_op_id"
 *     elif op_type == TB_CONCAT_0_OP:
 *         return "tb_concat_0_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_CONCAT_1_OP:
 *         return "tb_concat_1_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_concat_0_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_concat_0_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":249
 *     elif op_type == TB_CONCAT_FIRST_OP_ID:
 *         return "tb_concat_first_op_id"
 *     elif op_type == TB_CONCAT_0_OP:             # <<<<<<<<<<<<<<
 *         return "tb_concat_0_op"
 *     elif op_type == TB_CONCAT_1_OP:
*/
  }

  /* "yirage/_cython/core.pyx":251
 *     elif op_type == TB_CONCAT_0_OP:
 *         return "tb_concat_0_op"
 *     elif op_type == TB_CONCAT_1_OP:             # <<<<<<<<<<<<<<
 *         return "tb_concat_1_op"
 *     elif op_type == TB_CONCAT_2_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_CONCAT_1_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":252
 *         return "tb_concat_0_op"
 *     elif op_type == TB_CONCAT_1_OP:
 *         return "tb_concat_1_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_CONCAT_2_OP:
 *         return "tb_concat_2_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_concat_1_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_concat_1_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":251
 *     elif op_type == TB_CONCAT_0_OP:
 *         return "tb_concat_0_op"
 *     elif op_type == TB_CONCAT_1_OP:             # <<<<<<<<<<<<<<
 *         return "tb_concat_1_op"
 *     elif op_type == TB_CONCAT_2_OP:
*/
  }

  /* "yirage/_cython/core.pyx":253
 *     elif op_type == TB_CONCAT_1_OP:
 *         return "tb_concat_1_op"
 *     elif op_type == TB_CONCAT_2_OP:             # <<<<<<<<<<<<<<
 *         return "tb_concat_2_op"
 *     elif op_type == TB_CONCAT_LAST_OP_ID:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_CONCAT_2_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":254
 *         return "tb_concat_1_op"
 *     elif op_type == TB_CONCAT_2_OP:
 *         return "tb_concat_2_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_CONCAT_LAST_OP_ID:
 *         return "tb_concat_last_op_id"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_concat_2_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_concat_2_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":253
 *     elif op_type == TB_CONCAT_1_OP:
 *         return "tb_concat_1_op"
 *     elif op_type == TB_CONCAT_2_OP:             # <<<<<<<<<<<<<<
 *         return "tb_concat_2_op"
 *     elif op_type == TB_CONCAT_LAST_OP_ID:
*/
  }

  /* "yirage/_cython/core.pyx":255
 *     elif op_type == TB_CONCAT_2_OP:
 *         return "tb_concat_2_op"
 *     elif op_type == TB_CONCAT_LAST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "tb_concat_last_op_id"
 *     elif op_type == TB_CONCAT_THEN_MATMUL_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_CONCAT_LAST_OP_ID);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":256
 *         return "tb_concat_2_op"
 *     elif op_type == TB_CONCAT_LAST_OP_ID:
 *         return "tb_concat_last_op_id"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_CONCAT_THEN_MATMUL_OP:
 *         return "tb_concat_then_matmul_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_concat_last_op_id);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_concat_last_op_id;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":255
 *     elif op_type == TB_CONCAT_2_OP:
 *         return "tb_concat_2_op"
 *     elif op_type == TB_CONCAT_LAST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "tb_concat_last_op_id"
 *     elif op_type == TB_CONCAT_THEN_MATMUL_OP:
*/
  }

  /* "yirage/_cython/core.pyx":257
 *     elif op_type == TB_CONCAT_LAST_OP_ID:
 *         return "tb_concat_last_op_id"
 *     elif op_type == TB_CONCAT_THEN_MATMUL_OP:             # <<<<<<<<<<<<<<
 *         return "tb_concat_then_matmul_op"
 *     elif op_type == TB_SPLIT_FIRST_OP_ID:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_CONCAT_THEN_MATMUL_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":258
 *         return "tb_concat_last_op_id"
 *     elif op_type == TB_CONCAT_THEN_MATMUL_OP:
 *         return "tb_concat_then_matmul_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_SPLIT_FIRST_OP_ID:
 *         return "tb_split_first_op_id"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_concat_then_matmul_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_concat_then_matmul_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":257
 *     elif op_type == TB_CONCAT_LAST_OP_ID:
 *         return "tb_concat_last_op_id"
 *     elif op_type == TB_CONCAT_THEN_MATMUL_OP:             # <<<<<<<<<<<<<<
 *         return "tb_concat_then_matmul_op"
 *     elif op_type == TB_SPLIT_FIRST_OP_ID:
*/
  }

  /* "yirage/_cython/core.pyx":259
 *     elif op_type == TB_CONCAT_THEN_MATMUL_OP:
 *         return "tb_concat_then_matmul_op"
 *     elif op_type == TB_SPLIT_FIRST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "tb_split_first_op_id"
 *     elif op_type == TB_SPLIT_0_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_SPLIT_FIRST_OP_ID);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":260
 *         return "tb_concat_then_matmul_op"
 *     elif op_type == TB_SPLIT_FIRST_OP_ID:
 *         return "tb_split_first_op_id"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_SPLIT_0_OP:
 *         return "tb_split_0_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_split_first_op_id);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_split_first_op_id;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":259
 *     elif op_type == TB_CONCAT_THEN_MATMUL_OP:
 *         return "tb_concat_then_matmul_op"
 *     elif op_type == TB_SPLIT_FIRST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "tb_split_first_op_id"
 *     elif op_type == TB_SPLIT_0_OP:
*/
  }

  /* "yirage/_cython/core.pyx":261
 *     elif op_type == TB_SPLIT_FIRST_OP_ID:
 *         return "tb_split_first_op_id"
 *     elif op_type == TB_SPLIT_0_OP:             # <<<<<<<<<<<<<<
 *         return "tb_split_0_op"
 *     elif op_type == TB_SPLIT_1_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_SPLIT_0_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":262
 *         return "tb_split_first_op_id"
 *     elif op_type == TB_SPLIT_0_OP:
 *         return "tb_split_0_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_SPLIT_1_OP:
 *         return "tb_split_1_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_split_0_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_split_0_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":261
 *     elif op_type == TB_SPLIT_FIRST_OP_ID:
 *         return "tb_split_first_op_id"
 *     elif op_type == TB_SPLIT_0_OP:             # <<<<<<<<<<<<<<
 *         return "tb_split_0_op"
 *     elif op_type == TB_SPLIT_1_OP:
*/
  }

  /* "yirage/_cython/core.pyx":263
 *     elif op_type == TB_SPLIT_0_OP:
 *         return "tb_split_0_op"
 *     elif op_type == TB_SPLIT_1_OP:             # <<<<<<<<<<<<<<
 *         return "tb_split_1_op"
 *     elif op_type == TB_SPLIT_2_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_SPLIT_1_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":264
 *         return "tb_split_0_op"
 *     elif op_type == TB_SPLIT_1_OP:
 *         return "tb_split_1_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_SPLIT_2_OP:
 *         return "tb_split_2_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_split_1_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_split_1_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":263
 *     elif op_type == TB_SPLIT_0_OP:
 *         return "tb_split_0_op"
 *     elif op_type == TB_SPLIT_1_OP:             # <<<<<<<<<<<<<<
 *         return "tb_split_1_op"
 *     elif op_type == TB_SPLIT_2_OP:
*/
  }

  /* "yirage/_cython/core.pyx":265
 *     elif op_type == TB_SPLIT_1_OP:
 *         return "tb_split_1_op"
 *     elif op_type == TB_SPLIT_2_OP:             # <<<<<<<<<<<<<<
 *         return "tb_split_2_op"
 *     elif op_type == TB_SPLIT_LAST_OP_ID:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_SPLIT_2_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":266
 *         return "tb_split_1_op"
 *     elif op_type == TB_SPLIT_2_OP:
 *         return "tb_split_2_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_SPLIT_LAST_OP_ID:
 *         return "tb_split_last_op_id"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_split_2_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_split_2_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":265
 *     elif op_type == TB_SPLIT_1_OP:
 *         return "tb_split_1_op"
 *     elif op_type == TB_SPLIT_2_OP:             # <<<<<<<<<<<<<<
 *         return "tb_split_2_op"
 *     elif op_type == TB_SPLIT_LAST_OP_ID:
*/
  }

  /* "yirage/_cython/core.pyx":267
 *     elif op_type == TB_SPLIT_2_OP:
 *         return "tb_split_2_op"
 *     elif op_type == TB_SPLIT_LAST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "tb_split_last_op_id"
 *     elif op_type == TB_FORLOOP_ACCUM_NO_RED_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_SPLIT_LAST_OP_ID);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":268
 *         return "tb_split_2_op"
 *     elif op_type == TB_SPLIT_LAST_OP_ID:
 *         return "tb_split_last_op_id"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_FORLOOP_ACCUM_NO_RED_OP:
 *         return "tb_forloop_accum_no_red_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_split_last_op_id);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_split_last_op_id;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":267
 *     elif op_type == TB_SPLIT_2_OP:
 *         return "tb_split_2_op"
 *     elif op_type == TB_SPLIT_LAST_OP_ID:             # <<<<<<<<<<<<<<
 *         return "tb_split_last_op_id"
 *     elif op_type == TB_FORLOOP_ACCUM_NO_RED_OP:
*/
  }

  /* "yirage/_cython/core.pyx":269
 *     elif op_type == TB_SPLIT_LAST_OP_ID:
 *         return "tb_split_last_op_id"
 *     elif op_type == TB_FORLOOP_ACCUM_NO_RED_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_no_red_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_SUM_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_FORLOOP_ACCUM_NO_RED_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":270
 *         return "tb_split_last_op_id"
 *     elif op_type == TB_FORLOOP_ACCUM_NO_RED_OP:
 *         return "tb_forloop_accum_no_red_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_SUM_OP:
 *         return "tb_forloop_accum_red_ld_sum_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_forloop_accum_no_red_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_forloop_accum_no_red_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":269
 *     elif op_type == TB_SPLIT_LAST_OP_ID:
 *         return "tb_split_last_op_id"
 *     elif op_type == TB_FORLOOP_ACCUM_NO_RED_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_no_red_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_SUM_OP:
*/
  }

  /* "yirage/_cython/core.pyx":271
 *     elif op_type == TB_FORLOOP_ACCUM_NO_RED_OP:
 *         return "tb_forloop_accum_no_red_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_SUM_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_red_ld_sum_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_MEAN_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_FORLOOP_ACCUM_RED_LD_SUM_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":272
 *         return "tb_forloop_accum_no_red_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_SUM_OP:
 *         return "tb_forloop_accum_red_ld_sum_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_MEAN_OP:
 *         return "tb_forloop_accum_red_ld_mean_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_forloop_accum_red_ld_sum_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_forloop_accum_red_ld_sum_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":271
 *     elif op_type == TB_FORLOOP_ACCUM_NO_RED_OP:
 *         return "tb_forloop_accum_no_red_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_SUM_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_red_ld_sum_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_MEAN_OP:
*/
  }

  /* "yirage/_cython/core.pyx":273
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_SUM_OP:
 *         return "tb_forloop_accum_red_ld_sum_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_MEAN_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_red_ld_mean_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_RMS_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_FORLOOP_ACCUM_RED_LD_MEAN_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":274
 *         return "tb_forloop_accum_red_ld_sum_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_MEAN_OP:
 *         return "tb_forloop_accum_red_ld_mean_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_RMS_OP:
 *         return "tb_forloop_accum_red_ld_rms_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_forloop_accum_red_ld_mean_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_forloop_accum_red_ld_mean_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":273
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_SUM_OP:
 *         return "tb_forloop_accum_red_ld_sum_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_MEAN_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_red_ld_mean_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_RMS_OP:
*/
  }

  /* "yirage/_cython/core.pyx":275
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_MEAN_OP:
 *         return "tb_forloop_accum_red_ld_mean_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_RMS_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_red_ld_rms_op"
 *     elif op_type == TB_FORLOOP_ACCUM_REDTOX_LD_SUM_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_FORLOOP_ACCUM_RED_LD_RMS_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":276
 *         return "tb_forloop_accum_red_ld_mean_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_RMS_OP:
 *         return "tb_forloop_accum_red_ld_rms_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_FORLOOP_ACCUM_REDTOX_LD_SUM_OP:
 *         return "tb_forloop_accum_redtox_ld_sum_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_forloop_accum_red_ld_rms_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_forloop_accum_red_ld_rms_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":275
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_MEAN_OP:
 *         return "tb_forloop_accum_red_ld_mean_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_RMS_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_red_ld_rms_op"
 *     elif op_type == TB_FORLOOP_ACCUM_REDTOX_LD_SUM_OP:
*/
  }

  /* "yirage/_cython/core.pyx":277
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_RMS_OP:
 *         return "tb_forloop_accum_red_ld_rms_op"
 *     elif op_type == TB_FORLOOP_ACCUM_REDTOX_LD_SUM_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_redtox_ld_sum_op"
 *     elif op_type == TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_FORLOOP_ACCUM_REDTOX_LD_SUM_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":278
 *         return "tb_forloop_accum_red_ld_rms_op"
 *     elif op_type == TB_FORLOOP_ACCUM_REDTOX_LD_SUM_OP:
 *         return "tb_forloop_accum_redtox_ld_sum_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP:
 *         return "tb_forloop_accum_no_red_rescale_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_forloop_accum_redtox_ld_sum_o);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_forloop_accum_redtox_ld_sum_o;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":277
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_RMS_OP:
 *         return "tb_forloop_accum_red_ld_rms_op"
 *     elif op_type == TB_FORLOOP_ACCUM_REDTOX_LD_SUM_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_redtox_ld_sum_op"
 *     elif op_type == TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP:
*/
  }

  /* "yirage/_cython/core.pyx":279
 *     elif op_type == TB_FORLOOP_ACCUM_REDTOX_LD_SUM_OP:
 *         return "tb_forloop_accum_redtox_ld_sum_op"
 *     elif op_type == TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_no_red_rescale_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_SUM_RESCALE_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":280
 *         return "tb_forloop_accum_redtox_ld_sum_op"
 *     elif op_type == TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP:
 *         return "tb_forloop_accum_no_red_rescale_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_SUM_RESCALE_OP:
 *         return "tb_forloop_accum_red_ld_sum_rescale_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_forloop_accum_no_red_rescale);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_forloop_accum_no_red_rescale;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":279
 *     elif op_type == TB_FORLOOP_ACCUM_REDTOX_LD_SUM_OP:
 *         return "tb_forloop_accum_redtox_ld_sum_op"
 *     elif op_type == TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_no_red_rescale_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_SUM_RESCALE_OP:
*/
  }

  /* "yirage/_cython/core.pyx":281
 *     elif op_type == TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP:
 *         return "tb_forloop_accum_no_red_rescale_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_SUM_RESCALE_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_red_ld_sum_rescale_op"
 *     elif op_type == TB_FORLOOP_ACCUM_MAX_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_FORLOOP_ACCUM_RED_LD_SUM_RESCALE_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":282
 *         return "tb_forloop_accum_no_red_rescale_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_SUM_RESCALE_OP:
 *         return "tb_forloop_accum_red_ld_sum_rescale_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_FORLOOP_ACCUM_MAX_OP:
 *         return "tb_forloop_accum_max_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_forloop_accum_red_ld_sum_resc);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_forloop_accum_red_ld_sum_resc;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":281
 *     elif op_type == TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP:
 *         return "tb_forloop_accum_no_red_rescale_op"
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_SUM_RESCALE_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_red_ld_sum_rescale_op"
 *     elif op_type == TB_FORLOOP_ACCUM_MAX_OP:
*/
  }

  /* "yirage/_cython/core.pyx":283
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_SUM_RESCALE_OP:
 *         return "tb_forloop_accum_red_ld_sum_rescale_op"
 *     elif op_type == TB_FORLOOP_ACCUM_MAX_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_max_op"
 *     elif op_type == TB_FORLOOP_ACCUM_LAST_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_FORLOOP_ACCUM_MAX_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":284
 *         return "tb_forloop_accum_red_ld_sum_rescale_op"
 *     elif op_type == TB_FORLOOP_ACCUM_MAX_OP:
 *         return "tb_forloop_accum_max_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_FORLOOP_ACCUM_LAST_OP:
 *         return "tb_forloop_accum_last_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_forloop_accum_max_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_forloop_accum_max_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":283
 *     elif op_type == TB_FORLOOP_ACCUM_RED_LD_SUM_RESCALE_OP:
 *         return "tb_forloop_accum_red_ld_sum_rescale_op"
 *     elif op_type == TB_FORLOOP_ACCUM_MAX_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_max_op"
 *     elif op_type == TB_FORLOOP_ACCUM_LAST_OP:
*/
  }

  /* "yirage/_cython/core.pyx":285
 *     elif op_type == TB_FORLOOP_ACCUM_MAX_OP:
 *         return "tb_forloop_accum_max_op"
 *     elif op_type == TB_FORLOOP_ACCUM_LAST_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_last_op"
 *     elif op_type == TB_CUSTOMIZED_OP:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_FORLOOP_ACCUM_LAST_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":286
 *         return "tb_forloop_accum_max_op"
 *     elif op_type == TB_FORLOOP_ACCUM_LAST_OP:
 *         return "tb_forloop_accum_last_op"             # <<<<<<<<<<<<<<
 *     elif op_type == TB_CUSTOMIZED_OP:
 *         return "tb_customized_op"
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_forloop_accum_last_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_forloop_accum_last_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":285
 *     elif op_type == TB_FORLOOP_ACCUM_MAX_OP:
 *         return "tb_forloop_accum_max_op"
 *     elif op_type == TB_FORLOOP_ACCUM_LAST_OP:             # <<<<<<<<<<<<<<
 *         return "tb_forloop_accum_last_op"
 *     elif op_type == TB_CUSTOMIZED_OP:
*/
  }

  /* "yirage/_cython/core.pyx":287
 *     elif op_type == TB_FORLOOP_ACCUM_LAST_OP:
 *         return "tb_forloop_accum_last_op"
 *     elif op_type == TB_CUSTOMIZED_OP:             # <<<<<<<<<<<<<<
 *         return "tb_customized_op"
 *     else:
*/
  __pyx_t_1 = (__pyx_v_op_type == yirage::type::TB_CUSTOMIZED_OP);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":288
 *         return "tb_forloop_accum_last_op"
 *     elif op_type == TB_CUSTOMIZED_OP:
 *         return "tb_customized_op"             # <<<<<<<<<<<<<<
 *     else:
 *         return "unknown_op_type" + str(op_type)
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_mstate_global->__pyx_n_u_tb_customized_op);
    __pyx_r = __pyx_mstate_global->__pyx_n_u_tb_customized_op;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":287
 *     elif op_type == TB_FORLOOP_ACCUM_LAST_OP:
 *         return "tb_forloop_accum_last_op"
 *     elif op_type == TB_CUSTOMIZED_OP:             # <<<<<<<<<<<<<<
 *         return "tb_customized_op"
 *     else:
*/
  }

  /* "yirage/_cython/core.pyx":290
 *         return "tb_customized_op"
 *     else:
 *         return "unknown_op_type" + str(op_type)             # <<<<<<<<<<<<<<
 * 
 * 
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_op_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyObject_Unicode(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyUnicode_Concat(__pyx_mstate_global->__pyx_n_u_unknown_op_type, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 290, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":184
 * 
 * 
 * def get_tb_operator_type_string(int op_type):             # <<<<<<<<<<<<<<
 *     if op_type == TB_UNKOWN:
 *         return "tb_unknown"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("yirage.core.get_tb_operator_type_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":293
 * 
 * 
 * def convert_dtype_to_ctype(type : dtype):             # <<<<<<<<<<<<<<
 *     if type.is_int8():
 *         return DT_INT8
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_5convert_dtype_to_ctype(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_5convert_dtype_to_ctype = {"convert_dtype_to_ctype", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_5convert_dtype_to_ctype, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_5convert_dtype_to_ctype(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_type = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("convert_dtype_to_ctype (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_type,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 293, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 293, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "convert_dtype_to_ctype", 0) < 0) __PYX_ERR(0, 293, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("convert_dtype_to_ctype", 1, 1, 1, i); __PYX_ERR(0, 293, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 293, __pyx_L3_error)
    }
    __pyx_v_type = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("convert_dtype_to_ctype", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 293, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.convert_dtype_to_ctype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_4convert_dtype_to_ctype(__pyx_self, __pyx_v_type);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_4convert_dtype_to_ctype(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_dtype_to_ctype", 0);

  /* "yirage/_cython/core.pyx":294
 * 
 * def convert_dtype_to_ctype(type : dtype):
 *     if type.is_int8():             # <<<<<<<<<<<<<<
 *         return DT_INT8
 *     elif type.is_uint16():
*/
  __pyx_t_2 = __pyx_v_type;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_is_int8, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 294, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 294, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "yirage/_cython/core.pyx":295
 * def convert_dtype_to_ctype(type : dtype):
 *     if type.is_int8():
 *         return DT_INT8             # <<<<<<<<<<<<<<
 *     elif type.is_uint16():
 *         return DT_UINT16
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(yirage::type::DT_INT8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 295, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":294
 * 
 * def convert_dtype_to_ctype(type : dtype):
 *     if type.is_int8():             # <<<<<<<<<<<<<<
 *         return DT_INT8
 *     elif type.is_uint16():
*/
  }

  /* "yirage/_cython/core.pyx":296
 *     if type.is_int8():
 *         return DT_INT8
 *     elif type.is_uint16():             # <<<<<<<<<<<<<<
 *         return DT_UINT16
 *     elif type.is_fp16():
*/
  __pyx_t_2 = __pyx_v_type;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_is_uint16, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 296, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 296, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "yirage/_cython/core.pyx":297
 *         return DT_INT8
 *     elif type.is_uint16():
 *         return DT_UINT16             # <<<<<<<<<<<<<<
 *     elif type.is_fp16():
 *         return DT_FLOAT16
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(yirage::type::DT_UINT16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 297, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":296
 *     if type.is_int8():
 *         return DT_INT8
 *     elif type.is_uint16():             # <<<<<<<<<<<<<<
 *         return DT_UINT16
 *     elif type.is_fp16():
*/
  }

  /* "yirage/_cython/core.pyx":298
 *     elif type.is_uint16():
 *         return DT_UINT16
 *     elif type.is_fp16():             # <<<<<<<<<<<<<<
 *         return DT_FLOAT16
 *     elif type.is_bf16():
*/
  __pyx_t_2 = __pyx_v_type;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_is_fp16, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 298, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "yirage/_cython/core.pyx":299
 *         return DT_UINT16
 *     elif type.is_fp16():
 *         return DT_FLOAT16             # <<<<<<<<<<<<<<
 *     elif type.is_bf16():
 *         return DT_BFLOAT16
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(yirage::type::DT_FLOAT16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":298
 *     elif type.is_uint16():
 *         return DT_UINT16
 *     elif type.is_fp16():             # <<<<<<<<<<<<<<
 *         return DT_FLOAT16
 *     elif type.is_bf16():
*/
  }

  /* "yirage/_cython/core.pyx":300
 *     elif type.is_fp16():
 *         return DT_FLOAT16
 *     elif type.is_bf16():             # <<<<<<<<<<<<<<
 *         return DT_BFLOAT16
 *     elif type.is_fp32():
*/
  __pyx_t_2 = __pyx_v_type;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_is_bf16, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 300, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "yirage/_cython/core.pyx":301
 *         return DT_FLOAT16
 *     elif type.is_bf16():
 *         return DT_BFLOAT16             # <<<<<<<<<<<<<<
 *     elif type.is_fp32():
 *         return DT_FLOAT32
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(yirage::type::DT_BFLOAT16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 301, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":300
 *     elif type.is_fp16():
 *         return DT_FLOAT16
 *     elif type.is_bf16():             # <<<<<<<<<<<<<<
 *         return DT_BFLOAT16
 *     elif type.is_fp32():
*/
  }

  /* "yirage/_cython/core.pyx":302
 *     elif type.is_bf16():
 *         return DT_BFLOAT16
 *     elif type.is_fp32():             # <<<<<<<<<<<<<<
 *         return DT_FLOAT32
 *     elif type.is_int64():
*/
  __pyx_t_2 = __pyx_v_type;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_is_fp32, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 302, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "yirage/_cython/core.pyx":303
 *         return DT_BFLOAT16
 *     elif type.is_fp32():
 *         return DT_FLOAT32             # <<<<<<<<<<<<<<
 *     elif type.is_int64():
 *         return DT_INT64
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(yirage::type::DT_FLOAT32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 303, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":302
 *     elif type.is_bf16():
 *         return DT_BFLOAT16
 *     elif type.is_fp32():             # <<<<<<<<<<<<<<
 *         return DT_FLOAT32
 *     elif type.is_int64():
*/
  }

  /* "yirage/_cython/core.pyx":304
 *     elif type.is_fp32():
 *         return DT_FLOAT32
 *     elif type.is_int64():             # <<<<<<<<<<<<<<
 *         return DT_INT64
 *     elif type.is_fp64():
*/
  __pyx_t_2 = __pyx_v_type;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_is_int64, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "yirage/_cython/core.pyx":305
 *         return DT_FLOAT32
 *     elif type.is_int64():
 *         return DT_INT64             # <<<<<<<<<<<<<<
 *     elif type.is_fp64():
 *         return DT_DOUBLE
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(yirage::type::DT_INT64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 305, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":304
 *     elif type.is_fp32():
 *         return DT_FLOAT32
 *     elif type.is_int64():             # <<<<<<<<<<<<<<
 *         return DT_INT64
 *     elif type.is_fp64():
*/
  }

  /* "yirage/_cython/core.pyx":306
 *     elif type.is_int64():
 *         return DT_INT64
 *     elif type.is_fp64():             # <<<<<<<<<<<<<<
 *         return DT_DOUBLE
 *     else:
*/
  __pyx_t_2 = __pyx_v_type;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_is_fp64, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 306, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(__pyx_t_4)) {

    /* "yirage/_cython/core.pyx":307
 *         return DT_INT64
 *     elif type.is_fp64():
 *         return DT_DOUBLE             # <<<<<<<<<<<<<<
 *     else:
 *         raise RuntimeError(f"Unsupported dtype: {dtype}")
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(yirage::type::DT_DOUBLE); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":306
 *     elif type.is_int64():
 *         return DT_INT64
 *     elif type.is_fp64():             # <<<<<<<<<<<<<<
 *         return DT_DOUBLE
 *     else:
*/
  }

  /* "yirage/_cython/core.pyx":309
 *         return DT_DOUBLE
 *     else:
 *         raise RuntimeError(f"Unsupported dtype: {dtype}")             # <<<<<<<<<<<<<<
 * 
 * def convert_dtype_to_torch_type(type : dtype):
*/
  /*else*/ {
    __pyx_t_2 = NULL;
    __Pyx_INCREF(__pyx_builtin_RuntimeError);
    __pyx_t_5 = __pyx_builtin_RuntimeError; 
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_FormatSimple(__pyx_t_6, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_mstate_global->__pyx_kp_u_Unsupported_dtype, __pyx_t_7); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 309, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_3 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_6};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (__pyx_t_3*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 309, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(0, 309, __pyx_L1_error)
  }

  /* "yirage/_cython/core.pyx":293
 * 
 * 
 * def convert_dtype_to_ctype(type : dtype):             # <<<<<<<<<<<<<<
 *     if type.is_int8():
 *         return DT_INT8
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("yirage.core.convert_dtype_to_ctype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":311
 *         raise RuntimeError(f"Unsupported dtype: {dtype}")
 * 
 * def convert_dtype_to_torch_type(type : dtype):             # <<<<<<<<<<<<<<
 *     if type.is_int8():
 *         return torch.int8
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_7convert_dtype_to_torch_type(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_7convert_dtype_to_torch_type = {"convert_dtype_to_torch_type", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_7convert_dtype_to_torch_type, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_7convert_dtype_to_torch_type(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_type = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("convert_dtype_to_torch_type (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_type,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 311, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 311, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "convert_dtype_to_torch_type", 0) < 0) __PYX_ERR(0, 311, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("convert_dtype_to_torch_type", 1, 1, 1, i); __PYX_ERR(0, 311, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 311, __pyx_L3_error)
    }
    __pyx_v_type = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("convert_dtype_to_torch_type", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 311, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.convert_dtype_to_torch_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_6convert_dtype_to_torch_type(__pyx_self, __pyx_v_type);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_6convert_dtype_to_torch_type(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  size_t __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_dtype_to_torch_type", 0);

  /* "yirage/_cython/core.pyx":312
 * 
 * def convert_dtype_to_torch_type(type : dtype):
 *     if type.is_int8():             # <<<<<<<<<<<<<<
 *         return torch.int8
 *     elif type.is_uint16():
*/
  __pyx_t_2 = __pyx_v_type;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_is_int8, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 312, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 312, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "yirage/_cython/core.pyx":313
 * def convert_dtype_to_torch_type(type : dtype):
 *     if type.is_int8():
 *         return torch.int8             # <<<<<<<<<<<<<<
 *     elif type.is_uint16():
 *         return torch.uint16
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_torch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_int8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 313, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":312
 * 
 * def convert_dtype_to_torch_type(type : dtype):
 *     if type.is_int8():             # <<<<<<<<<<<<<<
 *         return torch.int8
 *     elif type.is_uint16():
*/
  }

  /* "yirage/_cython/core.pyx":314
 *     if type.is_int8():
 *         return torch.int8
 *     elif type.is_uint16():             # <<<<<<<<<<<<<<
 *         return torch.uint16
 *     elif type.is_fp16():
*/
  __pyx_t_1 = __pyx_v_type;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_is_uint16, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 314, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 314, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "yirage/_cython/core.pyx":315
 *         return torch.int8
 *     elif type.is_uint16():
 *         return torch.uint16             # <<<<<<<<<<<<<<
 *     elif type.is_fp16():
 *         return torch.float16
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_torch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_uint16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 315, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":314
 *     if type.is_int8():
 *         return torch.int8
 *     elif type.is_uint16():             # <<<<<<<<<<<<<<
 *         return torch.uint16
 *     elif type.is_fp16():
*/
  }

  /* "yirage/_cython/core.pyx":316
 *     elif type.is_uint16():
 *         return torch.uint16
 *     elif type.is_fp16():             # <<<<<<<<<<<<<<
 *         return torch.float16
 *     elif type.is_bf16():
*/
  __pyx_t_2 = __pyx_v_type;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_is_fp16, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 316, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 316, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "yirage/_cython/core.pyx":317
 *         return torch.uint16
 *     elif type.is_fp16():
 *         return torch.float16             # <<<<<<<<<<<<<<
 *     elif type.is_bf16():
 *         return torch.bfloat16
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_torch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_float16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 317, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":316
 *     elif type.is_uint16():
 *         return torch.uint16
 *     elif type.is_fp16():             # <<<<<<<<<<<<<<
 *         return torch.float16
 *     elif type.is_bf16():
*/
  }

  /* "yirage/_cython/core.pyx":318
 *     elif type.is_fp16():
 *         return torch.float16
 *     elif type.is_bf16():             # <<<<<<<<<<<<<<
 *         return torch.bfloat16
 *     elif type.is_fp32():
*/
  __pyx_t_1 = __pyx_v_type;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_is_bf16, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 318, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "yirage/_cython/core.pyx":319
 *         return torch.float16
 *     elif type.is_bf16():
 *         return torch.bfloat16             # <<<<<<<<<<<<<<
 *     elif type.is_fp32():
 *         return torch.float32
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_torch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_bfloat16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":318
 *     elif type.is_fp16():
 *         return torch.float16
 *     elif type.is_bf16():             # <<<<<<<<<<<<<<
 *         return torch.bfloat16
 *     elif type.is_fp32():
*/
  }

  /* "yirage/_cython/core.pyx":320
 *     elif type.is_bf16():
 *         return torch.bfloat16
 *     elif type.is_fp32():             # <<<<<<<<<<<<<<
 *         return torch.float32
 *     elif type.is_int64():
*/
  __pyx_t_2 = __pyx_v_type;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_is_fp32, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 320, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 320, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "yirage/_cython/core.pyx":321
 *         return torch.bfloat16
 *     elif type.is_fp32():
 *         return torch.float32             # <<<<<<<<<<<<<<
 *     elif type.is_int64():
 *         return torch.int64
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_torch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_float32); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 321, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":320
 *     elif type.is_bf16():
 *         return torch.bfloat16
 *     elif type.is_fp32():             # <<<<<<<<<<<<<<
 *         return torch.float32
 *     elif type.is_int64():
*/
  }

  /* "yirage/_cython/core.pyx":322
 *     elif type.is_fp32():
 *         return torch.float32
 *     elif type.is_int64():             # <<<<<<<<<<<<<<
 *         return torch.int64
 *     elif type.is_fp64():
*/
  __pyx_t_1 = __pyx_v_type;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_1, NULL};
    __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_is_int64, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 322, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "yirage/_cython/core.pyx":323
 *         return torch.float32
 *     elif type.is_int64():
 *         return torch.int64             # <<<<<<<<<<<<<<
 *     elif type.is_fp64():
 *         return torch.float64
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_torch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_int64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 323, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":322
 *     elif type.is_fp32():
 *         return torch.float32
 *     elif type.is_int64():             # <<<<<<<<<<<<<<
 *         return torch.int64
 *     elif type.is_fp64():
*/
  }

  /* "yirage/_cython/core.pyx":324
 *     elif type.is_int64():
 *         return torch.int64
 *     elif type.is_fp64():             # <<<<<<<<<<<<<<
 *         return torch.float64
 *     else:
*/
  __pyx_t_2 = __pyx_v_type;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_t_3 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_is_fp64, __pyx_callargs+__pyx_t_3, (1-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_4 < 0))) __PYX_ERR(0, 324, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "yirage/_cython/core.pyx":325
 *         return torch.int64
 *     elif type.is_fp64():
 *         return torch.float64             # <<<<<<<<<<<<<<
 *     else:
 *         assert False, "Unsupported dtype: {}".format(type)
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_torch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":324
 *     elif type.is_int64():
 *         return torch.int64
 *     elif type.is_fp64():             # <<<<<<<<<<<<<<
 *         return torch.float64
 *     else:
*/
  }

  /* "yirage/_cython/core.pyx":327
 *         return torch.float64
 *     else:
 *         assert False, "Unsupported dtype: {}".format(type)             # <<<<<<<<<<<<<<
 * 
 * def convert_ctype_to_dtype(type):
*/
  /*else*/ {
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(__pyx_assertions_enabled())) {
      if (unlikely(!0)) {
        __pyx_t_1 = __pyx_mstate_global->__pyx_kp_u_Unsupported_dtype_2;
        __Pyx_INCREF(__pyx_t_1);
        __pyx_t_3 = 0;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_v_type};
          __pyx_t_2 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_format, __pyx_callargs+__pyx_t_3, (2-__pyx_t_3) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
          if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 327, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_2);
        }
        __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_t_2, 0, 0);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __PYX_ERR(0, 327, __pyx_L1_error)
      }
    }
    #else
    if ((1)); else __PYX_ERR(0, 327, __pyx_L1_error)
    #endif
  }

  /* "yirage/_cython/core.pyx":311
 *         raise RuntimeError(f"Unsupported dtype: {dtype}")
 * 
 * def convert_dtype_to_torch_type(type : dtype):             # <<<<<<<<<<<<<<
 *     if type.is_int8():
 *         return torch.int8
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.convert_dtype_to_torch_type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":329
 *         assert False, "Unsupported dtype: {}".format(type)
 * 
 * def convert_ctype_to_dtype(type):             # <<<<<<<<<<<<<<
 *     if type == DT_INT8:
 *         return int8
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9convert_ctype_to_dtype(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9convert_ctype_to_dtype = {"convert_ctype_to_dtype", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9convert_ctype_to_dtype, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9convert_ctype_to_dtype(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_type = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("convert_ctype_to_dtype (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_type,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 329, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 329, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "convert_ctype_to_dtype", 0) < 0) __PYX_ERR(0, 329, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("convert_ctype_to_dtype", 1, 1, 1, i); __PYX_ERR(0, 329, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 329, __pyx_L3_error)
    }
    __pyx_v_type = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("convert_ctype_to_dtype", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 329, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.convert_ctype_to_dtype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_8convert_ctype_to_dtype(__pyx_self, __pyx_v_type);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_8convert_ctype_to_dtype(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_ctype_to_dtype", 0);

  /* "yirage/_cython/core.pyx":330
 * 
 * def convert_ctype_to_dtype(type):
 *     if type == DT_INT8:             # <<<<<<<<<<<<<<
 *         return int8
 *     elif type == DT_UINT16:
*/
  __pyx_t_1 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(yirage::type::DT_INT8); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_type, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 330, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "yirage/_cython/core.pyx":331
 * def convert_ctype_to_dtype(type):
 *     if type == DT_INT8:
 *         return int8             # <<<<<<<<<<<<<<
 *     elif type == DT_UINT16:
 *         return uint16
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_int8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 331, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":330
 * 
 * def convert_ctype_to_dtype(type):
 *     if type == DT_INT8:             # <<<<<<<<<<<<<<
 *         return int8
 *     elif type == DT_UINT16:
*/
  }

  /* "yirage/_cython/core.pyx":332
 *     if type == DT_INT8:
 *         return int8
 *     elif type == DT_UINT16:             # <<<<<<<<<<<<<<
 *         return uint16
 *     elif type == DT_FLOAT16:
*/
  __pyx_t_2 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(yirage::type::DT_UINT16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_type, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 332, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "yirage/_cython/core.pyx":333
 *         return int8
 *     elif type == DT_UINT16:
 *         return uint16             # <<<<<<<<<<<<<<
 *     elif type == DT_FLOAT16:
 *         return float16
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_uint16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":332
 *     if type == DT_INT8:
 *         return int8
 *     elif type == DT_UINT16:             # <<<<<<<<<<<<<<
 *         return uint16
 *     elif type == DT_FLOAT16:
*/
  }

  /* "yirage/_cython/core.pyx":334
 *     elif type == DT_UINT16:
 *         return uint16
 *     elif type == DT_FLOAT16:             # <<<<<<<<<<<<<<
 *         return float16
 *     elif type == DT_BFLOAT16:
*/
  __pyx_t_1 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(yirage::type::DT_FLOAT16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_type, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 334, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "yirage/_cython/core.pyx":335
 *         return uint16
 *     elif type == DT_FLOAT16:
 *         return float16             # <<<<<<<<<<<<<<
 *     elif type == DT_BFLOAT16:
 *         return bfloat16
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_float16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":334
 *     elif type == DT_UINT16:
 *         return uint16
 *     elif type == DT_FLOAT16:             # <<<<<<<<<<<<<<
 *         return float16
 *     elif type == DT_BFLOAT16:
*/
  }

  /* "yirage/_cython/core.pyx":336
 *     elif type == DT_FLOAT16:
 *         return float16
 *     elif type == DT_BFLOAT16:             # <<<<<<<<<<<<<<
 *         return bfloat16
 *     elif type == DT_FLOAT32:
*/
  __pyx_t_2 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(yirage::type::DT_BFLOAT16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_type, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 336, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "yirage/_cython/core.pyx":337
 *         return float16
 *     elif type == DT_BFLOAT16:
 *         return bfloat16             # <<<<<<<<<<<<<<
 *     elif type == DT_FLOAT32:
 *         return float32
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_bfloat16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 337, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":336
 *     elif type == DT_FLOAT16:
 *         return float16
 *     elif type == DT_BFLOAT16:             # <<<<<<<<<<<<<<
 *         return bfloat16
 *     elif type == DT_FLOAT32:
*/
  }

  /* "yirage/_cython/core.pyx":338
 *     elif type == DT_BFLOAT16:
 *         return bfloat16
 *     elif type == DT_FLOAT32:             # <<<<<<<<<<<<<<
 *         return float32
 *     elif type == DT_DOUBLE:
*/
  __pyx_t_1 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(yirage::type::DT_FLOAT32); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_v_type, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 338, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "yirage/_cython/core.pyx":339
 *         return bfloat16
 *     elif type == DT_FLOAT32:
 *         return float32             # <<<<<<<<<<<<<<
 *     elif type == DT_DOUBLE:
 *         return float64
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_float32); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 339, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":338
 *     elif type == DT_BFLOAT16:
 *         return bfloat16
 *     elif type == DT_FLOAT32:             # <<<<<<<<<<<<<<
 *         return float32
 *     elif type == DT_DOUBLE:
*/
  }

  /* "yirage/_cython/core.pyx":340
 *     elif type == DT_FLOAT32:
 *         return float32
 *     elif type == DT_DOUBLE:             # <<<<<<<<<<<<<<
 *         return float64
 *     else:
*/
  __pyx_t_2 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(yirage::type::DT_DOUBLE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_type, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely((__pyx_t_3 < 0))) __PYX_ERR(0, 340, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "yirage/_cython/core.pyx":341
 *         return float32
 *     elif type == DT_DOUBLE:
 *         return float64             # <<<<<<<<<<<<<<
 *     else:
 *         return None
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_float64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 341, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":340
 *     elif type == DT_FLOAT32:
 *         return float32
 *     elif type == DT_DOUBLE:             # <<<<<<<<<<<<<<
 *         return float64
 *     else:
*/
  }

  /* "yirage/_cython/core.pyx":343
 *         return float64
 *     else:
 *         return None             # <<<<<<<<<<<<<<
 * 
 * def convert_torch_type_to_dtype(type):
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":329
 *         assert False, "Unsupported dtype: {}".format(type)
 * 
 * def convert_ctype_to_dtype(type):             # <<<<<<<<<<<<<<
 *     if type == DT_INT8:
 *         return int8
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.convert_ctype_to_dtype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":345
 *         return None
 * 
 * def convert_torch_type_to_dtype(type):             # <<<<<<<<<<<<<<
 *     if type is torch.int8:
 *         return int8
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_11convert_torch_type_to_dtype(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_11convert_torch_type_to_dtype = {"convert_torch_type_to_dtype", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_11convert_torch_type_to_dtype, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_11convert_torch_type_to_dtype(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_type = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("convert_torch_type_to_dtype (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_type,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 345, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 345, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "convert_torch_type_to_dtype", 0) < 0) __PYX_ERR(0, 345, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("convert_torch_type_to_dtype", 1, 1, 1, i); __PYX_ERR(0, 345, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 345, __pyx_L3_error)
    }
    __pyx_v_type = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("convert_torch_type_to_dtype", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 345, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.convert_torch_type_to_dtype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_10convert_torch_type_to_dtype(__pyx_self, __pyx_v_type);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_10convert_torch_type_to_dtype(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("convert_torch_type_to_dtype", 0);

  /* "yirage/_cython/core.pyx":346
 * 
 * def convert_torch_type_to_dtype(type):
 *     if type is torch.int8:             # <<<<<<<<<<<<<<
 *         return int8
 *     elif type is torch.uint16:
*/
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_torch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_int8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_type == __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "yirage/_cython/core.pyx":347
 * def convert_torch_type_to_dtype(type):
 *     if type is torch.int8:
 *         return int8             # <<<<<<<<<<<<<<
 *     elif type is torch.uint16:
 *         return uint16
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_int8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":346
 * 
 * def convert_torch_type_to_dtype(type):
 *     if type is torch.int8:             # <<<<<<<<<<<<<<
 *         return int8
 *     elif type is torch.uint16:
*/
  }

  /* "yirage/_cython/core.pyx":348
 *     if type is torch.int8:
 *         return int8
 *     elif type is torch.uint16:             # <<<<<<<<<<<<<<
 *         return uint16
 *     elif type is torch.float16:
*/
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_torch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_uint16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 348, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_v_type == __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "yirage/_cython/core.pyx":349
 *         return int8
 *     elif type is torch.uint16:
 *         return uint16             # <<<<<<<<<<<<<<
 *     elif type is torch.float16:
 *         return float16
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_uint16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":348
 *     if type is torch.int8:
 *         return int8
 *     elif type is torch.uint16:             # <<<<<<<<<<<<<<
 *         return uint16
 *     elif type is torch.float16:
*/
  }

  /* "yirage/_cython/core.pyx":350
 *     elif type is torch.uint16:
 *         return uint16
 *     elif type is torch.float16:             # <<<<<<<<<<<<<<
 *         return float16
 *     elif type is torch.bfloat16:
*/
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_torch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_float16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 350, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_type == __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "yirage/_cython/core.pyx":351
 *         return uint16
 *     elif type is torch.float16:
 *         return float16             # <<<<<<<<<<<<<<
 *     elif type is torch.bfloat16:
 *         return bfloat16
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_float16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 351, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":350
 *     elif type is torch.uint16:
 *         return uint16
 *     elif type is torch.float16:             # <<<<<<<<<<<<<<
 *         return float16
 *     elif type is torch.bfloat16:
*/
  }

  /* "yirage/_cython/core.pyx":352
 *     elif type is torch.float16:
 *         return float16
 *     elif type is torch.bfloat16:             # <<<<<<<<<<<<<<
 *         return bfloat16
 *     elif type is torch.float32:
*/
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_torch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_bfloat16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 352, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_v_type == __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "yirage/_cython/core.pyx":353
 *         return float16
 *     elif type is torch.bfloat16:
 *         return bfloat16             # <<<<<<<<<<<<<<
 *     elif type is torch.float32:
 *         return float32
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_bfloat16); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":352
 *     elif type is torch.float16:
 *         return float16
 *     elif type is torch.bfloat16:             # <<<<<<<<<<<<<<
 *         return bfloat16
 *     elif type is torch.float32:
*/
  }

  /* "yirage/_cython/core.pyx":354
 *     elif type is torch.bfloat16:
 *         return bfloat16
 *     elif type is torch.float32:             # <<<<<<<<<<<<<<
 *         return float32
 *     elif type is torch.int64:
*/
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_torch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_float32); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 354, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_type == __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "yirage/_cython/core.pyx":355
 *         return bfloat16
 *     elif type is torch.float32:
 *         return float32             # <<<<<<<<<<<<<<
 *     elif type is torch.int64:
 *         return int64
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_float32); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 355, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":354
 *     elif type is torch.bfloat16:
 *         return bfloat16
 *     elif type is torch.float32:             # <<<<<<<<<<<<<<
 *         return float32
 *     elif type is torch.int64:
*/
  }

  /* "yirage/_cython/core.pyx":356
 *     elif type is torch.float32:
 *         return float32
 *     elif type is torch.int64:             # <<<<<<<<<<<<<<
 *         return int64
 *     elif type is torch.float64:
*/
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_torch); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_int64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = (__pyx_v_type == __pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "yirage/_cython/core.pyx":357
 *         return float32
 *     elif type is torch.int64:
 *         return int64             # <<<<<<<<<<<<<<
 *     elif type is torch.float64:
 *         return float64
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_int64); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 357, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":356
 *     elif type is torch.float32:
 *         return float32
 *     elif type is torch.int64:             # <<<<<<<<<<<<<<
 *         return int64
 *     elif type is torch.float64:
*/
  }

  /* "yirage/_cython/core.pyx":358
 *     elif type is torch.int64:
 *         return int64
 *     elif type is torch.float64:             # <<<<<<<<<<<<<<
 *         return float64
 *     else:
*/
  __Pyx_GetModuleGlobalName(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_torch); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 358, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_v_type == __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(__pyx_t_3)) {

    /* "yirage/_cython/core.pyx":359
 *         return int64
 *     elif type is torch.float64:
 *         return float64             # <<<<<<<<<<<<<<
 *     else:
 *         raise RuntimeError(f"Unsupported dtype: {type}")
*/
    __Pyx_XDECREF(__pyx_r);
    __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_float64); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 359, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":358
 *     elif type is torch.int64:
 *         return int64
 *     elif type is torch.float64:             # <<<<<<<<<<<<<<
 *         return float64
 *     else:
*/
  }

  /* "yirage/_cython/core.pyx":361
 *         return float64
 *     else:
 *         raise RuntimeError(f"Unsupported dtype: {type}")             # <<<<<<<<<<<<<<
 * 
 * 
*/
  /*else*/ {
    __pyx_t_1 = NULL;
    __Pyx_INCREF(__pyx_builtin_RuntimeError);
    __pyx_t_4 = __pyx_builtin_RuntimeError; 
    __pyx_t_5 = __Pyx_PyObject_FormatSimple(__pyx_v_type, __pyx_mstate_global->__pyx_empty_unicode); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyUnicode_Concat(__pyx_mstate_global->__pyx_kp_u_Unsupported_dtype, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 361, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_7 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_1, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 361, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(0, 361, __pyx_L1_error)
  }

  /* "yirage/_cython/core.pyx":345
 *         return None
 * 
 * def convert_torch_type_to_dtype(type):             # <<<<<<<<<<<<<<
 *     if type is torch.int8:
 *         return int8
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.convert_torch_type_to_dtype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":364
 * 
 * 
 * def string_to_tbepilogue(epilogue):             # <<<<<<<<<<<<<<
 *     if epilogue is None:
 *         return TB_EPILOGUE_NONE
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_13string_to_tbepilogue(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_13string_to_tbepilogue = {"string_to_tbepilogue", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_13string_to_tbepilogue, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_13string_to_tbepilogue(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_epilogue = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("string_to_tbepilogue (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_epilogue,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 364, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 364, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "string_to_tbepilogue", 0) < 0) __PYX_ERR(0, 364, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("string_to_tbepilogue", 1, 1, 1, i); __PYX_ERR(0, 364, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 364, __pyx_L3_error)
    }
    __pyx_v_epilogue = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("string_to_tbepilogue", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 364, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.string_to_tbepilogue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_12string_to_tbepilogue(__pyx_self, __pyx_v_epilogue);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_12string_to_tbepilogue(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_epilogue) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("string_to_tbepilogue", 0);

  /* "yirage/_cython/core.pyx":365
 * 
 * def string_to_tbepilogue(epilogue):
 *     if epilogue is None:             # <<<<<<<<<<<<<<
 *         return TB_EPILOGUE_NONE
 *     elif epilogue == "allreduce":
*/
  __pyx_t_1 = (__pyx_v_epilogue == Py_None);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":366
 * def string_to_tbepilogue(epilogue):
 *     if epilogue is None:
 *         return TB_EPILOGUE_NONE             # <<<<<<<<<<<<<<
 *     elif epilogue == "allreduce":
 *         return TB_EPILOGUE_ALLREDUCE
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_TBEpilogueType(yirage::type::TB_EPILOGUE_NONE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 366, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":365
 * 
 * def string_to_tbepilogue(epilogue):
 *     if epilogue is None:             # <<<<<<<<<<<<<<
 *         return TB_EPILOGUE_NONE
 *     elif epilogue == "allreduce":
*/
  }

  /* "yirage/_cython/core.pyx":367
 *     if epilogue is None:
 *         return TB_EPILOGUE_NONE
 *     elif epilogue == "allreduce":             # <<<<<<<<<<<<<<
 *         return TB_EPILOGUE_ALLREDUCE
 *     else:
*/
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_epilogue, __pyx_mstate_global->__pyx_n_u_allreduce, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 367, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":368
 *         return TB_EPILOGUE_NONE
 *     elif epilogue == "allreduce":
 *         return TB_EPILOGUE_ALLREDUCE             # <<<<<<<<<<<<<<
 *     else:
 *         assert False, "Unsupported threadblock epilogue"
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_TBEpilogueType(yirage::type::TB_EPILOGUE_ALLREDUCE); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 368, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":367
 *     if epilogue is None:
 *         return TB_EPILOGUE_NONE
 *     elif epilogue == "allreduce":             # <<<<<<<<<<<<<<
 *         return TB_EPILOGUE_ALLREDUCE
 *     else:
*/
  }

  /* "yirage/_cython/core.pyx":370
 *         return TB_EPILOGUE_ALLREDUCE
 *     else:
 *         assert False, "Unsupported threadblock epilogue"             # <<<<<<<<<<<<<<
 *         return None
 * 
*/
  /*else*/ {
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(__pyx_assertions_enabled())) {
      if (unlikely(!0)) {
        __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_Unsupported_threadblock_epilogue, 0, 0);
        __PYX_ERR(0, 370, __pyx_L1_error)
      }
    }
    #else
    if ((1)); else __PYX_ERR(0, 370, __pyx_L1_error)
    #endif

    /* "yirage/_cython/core.pyx":371
 *     else:
 *         assert False, "Unsupported threadblock epilogue"
 *         return None             # <<<<<<<<<<<<<<
 * 
 * def string_to_accum_optype(acc):
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":364
 * 
 * 
 * def string_to_tbepilogue(epilogue):             # <<<<<<<<<<<<<<
 *     if epilogue is None:
 *         return TB_EPILOGUE_NONE
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.string_to_tbepilogue", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":373
 *         return None
 * 
 * def string_to_accum_optype(acc):             # <<<<<<<<<<<<<<
 *     if acc is None:
 *         return TB_FORLOOP_ACCUM_NO_RED_OP
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_15string_to_accum_optype(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_15string_to_accum_optype = {"string_to_accum_optype", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_15string_to_accum_optype, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_15string_to_accum_optype(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_acc = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("string_to_accum_optype (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_acc,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 373, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 373, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "string_to_accum_optype", 0) < 0) __PYX_ERR(0, 373, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("string_to_accum_optype", 1, 1, 1, i); __PYX_ERR(0, 373, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 373, __pyx_L3_error)
    }
    __pyx_v_acc = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("string_to_accum_optype", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 373, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.string_to_accum_optype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_14string_to_accum_optype(__pyx_self, __pyx_v_acc);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_14string_to_accum_optype(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_acc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("string_to_accum_optype", 0);

  /* "yirage/_cython/core.pyx":374
 * 
 * def string_to_accum_optype(acc):
 *     if acc is None:             # <<<<<<<<<<<<<<
 *         return TB_FORLOOP_ACCUM_NO_RED_OP
 *     elif acc == "sum":
*/
  __pyx_t_1 = (__pyx_v_acc == Py_None);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":375
 * def string_to_accum_optype(acc):
 *     if acc is None:
 *         return TB_FORLOOP_ACCUM_NO_RED_OP             # <<<<<<<<<<<<<<
 *     elif acc == "sum":
 *         return TB_FORLOOP_ACCUM_RED_LD_SUM_OP
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_TBOperatorType(yirage::type::TB_FORLOOP_ACCUM_NO_RED_OP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 375, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":374
 * 
 * def string_to_accum_optype(acc):
 *     if acc is None:             # <<<<<<<<<<<<<<
 *         return TB_FORLOOP_ACCUM_NO_RED_OP
 *     elif acc == "sum":
*/
  }

  /* "yirage/_cython/core.pyx":376
 *     if acc is None:
 *         return TB_FORLOOP_ACCUM_NO_RED_OP
 *     elif acc == "sum":             # <<<<<<<<<<<<<<
 *         return TB_FORLOOP_ACCUM_RED_LD_SUM_OP
 *     elif acc == "mean":
*/
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_acc, __pyx_mstate_global->__pyx_n_u_sum, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 376, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":377
 *         return TB_FORLOOP_ACCUM_NO_RED_OP
 *     elif acc == "sum":
 *         return TB_FORLOOP_ACCUM_RED_LD_SUM_OP             # <<<<<<<<<<<<<<
 *     elif acc == "mean":
 *         return TB_FORLOOP_ACCUM_RED_LD_MEAN_OP
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_TBOperatorType(yirage::type::TB_FORLOOP_ACCUM_RED_LD_SUM_OP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 377, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":376
 *     if acc is None:
 *         return TB_FORLOOP_ACCUM_NO_RED_OP
 *     elif acc == "sum":             # <<<<<<<<<<<<<<
 *         return TB_FORLOOP_ACCUM_RED_LD_SUM_OP
 *     elif acc == "mean":
*/
  }

  /* "yirage/_cython/core.pyx":378
 *     elif acc == "sum":
 *         return TB_FORLOOP_ACCUM_RED_LD_SUM_OP
 *     elif acc == "mean":             # <<<<<<<<<<<<<<
 *         return TB_FORLOOP_ACCUM_RED_LD_MEAN_OP
 *     elif acc == "rms":
*/
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_acc, __pyx_mstate_global->__pyx_n_u_mean, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 378, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":379
 *         return TB_FORLOOP_ACCUM_RED_LD_SUM_OP
 *     elif acc == "mean":
 *         return TB_FORLOOP_ACCUM_RED_LD_MEAN_OP             # <<<<<<<<<<<<<<
 *     elif acc == "rms":
 *         return TB_FORLOOP_ACCUM_RED_LD_RMS_OP
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_TBOperatorType(yirage::type::TB_FORLOOP_ACCUM_RED_LD_MEAN_OP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 379, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":378
 *     elif acc == "sum":
 *         return TB_FORLOOP_ACCUM_RED_LD_SUM_OP
 *     elif acc == "mean":             # <<<<<<<<<<<<<<
 *         return TB_FORLOOP_ACCUM_RED_LD_MEAN_OP
 *     elif acc == "rms":
*/
  }

  /* "yirage/_cython/core.pyx":380
 *     elif acc == "mean":
 *         return TB_FORLOOP_ACCUM_RED_LD_MEAN_OP
 *     elif acc == "rms":             # <<<<<<<<<<<<<<
 *         return TB_FORLOOP_ACCUM_RED_LD_RMS_OP
 *     elif acc == "sum_todimx":
*/
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_acc, __pyx_mstate_global->__pyx_n_u_rms, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 380, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":381
 *         return TB_FORLOOP_ACCUM_RED_LD_MEAN_OP
 *     elif acc == "rms":
 *         return TB_FORLOOP_ACCUM_RED_LD_RMS_OP             # <<<<<<<<<<<<<<
 *     elif acc == "sum_todimx":
 *         return TB_FORLOOP_ACCUM_REDTOX_LD_SUM_OP
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_TBOperatorType(yirage::type::TB_FORLOOP_ACCUM_RED_LD_RMS_OP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 381, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":380
 *     elif acc == "mean":
 *         return TB_FORLOOP_ACCUM_RED_LD_MEAN_OP
 *     elif acc == "rms":             # <<<<<<<<<<<<<<
 *         return TB_FORLOOP_ACCUM_RED_LD_RMS_OP
 *     elif acc == "sum_todimx":
*/
  }

  /* "yirage/_cython/core.pyx":382
 *     elif acc == "rms":
 *         return TB_FORLOOP_ACCUM_RED_LD_RMS_OP
 *     elif acc == "sum_todimx":             # <<<<<<<<<<<<<<
 *         return TB_FORLOOP_ACCUM_REDTOX_LD_SUM_OP
 *     else:
*/
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_acc, __pyx_mstate_global->__pyx_n_u_sum_todimx, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 382, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":383
 *         return TB_FORLOOP_ACCUM_RED_LD_RMS_OP
 *     elif acc == "sum_todimx":
 *         return TB_FORLOOP_ACCUM_REDTOX_LD_SUM_OP             # <<<<<<<<<<<<<<
 *     else:
 *         assert False, "Unsupported accum optype"
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_TBOperatorType(yirage::type::TB_FORLOOP_ACCUM_REDTOX_LD_SUM_OP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 383, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":382
 *     elif acc == "rms":
 *         return TB_FORLOOP_ACCUM_RED_LD_RMS_OP
 *     elif acc == "sum_todimx":             # <<<<<<<<<<<<<<
 *         return TB_FORLOOP_ACCUM_REDTOX_LD_SUM_OP
 *     else:
*/
  }

  /* "yirage/_cython/core.pyx":385
 *         return TB_FORLOOP_ACCUM_REDTOX_LD_SUM_OP
 *     else:
 *         assert False, "Unsupported accum optype"             # <<<<<<<<<<<<<<
 *         return None
 * 
*/
  /*else*/ {
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(__pyx_assertions_enabled())) {
      if (unlikely(!0)) {
        __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_Unsupported_accum_optype, 0, 0);
        __PYX_ERR(0, 385, __pyx_L1_error)
      }
    }
    #else
    if ((1)); else __PYX_ERR(0, 385, __pyx_L1_error)
    #endif

    /* "yirage/_cython/core.pyx":386
 *     else:
 *         assert False, "Unsupported accum optype"
 *         return None             # <<<<<<<<<<<<<<
 * 
 * def string_to_accum_rescale_optype(acc):
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":373
 *         return None
 * 
 * def string_to_accum_optype(acc):             # <<<<<<<<<<<<<<
 *     if acc is None:
 *         return TB_FORLOOP_ACCUM_NO_RED_OP
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.string_to_accum_optype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":388
 *         return None
 * 
 * def string_to_accum_rescale_optype(acc):             # <<<<<<<<<<<<<<
 *      if acc is None:
 *          return TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_17string_to_accum_rescale_optype(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_17string_to_accum_rescale_optype = {"string_to_accum_rescale_optype", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_17string_to_accum_rescale_optype, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_17string_to_accum_rescale_optype(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_acc = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("string_to_accum_rescale_optype (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_acc,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 388, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 388, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "string_to_accum_rescale_optype", 0) < 0) __PYX_ERR(0, 388, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("string_to_accum_rescale_optype", 1, 1, 1, i); __PYX_ERR(0, 388, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 388, __pyx_L3_error)
    }
    __pyx_v_acc = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("string_to_accum_rescale_optype", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 388, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.string_to_accum_rescale_optype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_16string_to_accum_rescale_optype(__pyx_self, __pyx_v_acc);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_16string_to_accum_rescale_optype(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_acc) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("string_to_accum_rescale_optype", 0);

  /* "yirage/_cython/core.pyx":389
 * 
 * def string_to_accum_rescale_optype(acc):
 *      if acc is None:             # <<<<<<<<<<<<<<
 *          return TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP
 *      elif acc == "sum":
*/
  __pyx_t_1 = (__pyx_v_acc == Py_None);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":390
 * def string_to_accum_rescale_optype(acc):
 *      if acc is None:
 *          return TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP             # <<<<<<<<<<<<<<
 *      elif acc == "sum":
 *          return TB_FORLOOP_ACCUM_RED_LD_SUM_RESCALE_OP
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_TBOperatorType(yirage::type::TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":389
 * 
 * def string_to_accum_rescale_optype(acc):
 *      if acc is None:             # <<<<<<<<<<<<<<
 *          return TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP
 *      elif acc == "sum":
*/
  }

  /* "yirage/_cython/core.pyx":391
 *      if acc is None:
 *          return TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP
 *      elif acc == "sum":             # <<<<<<<<<<<<<<
 *          return TB_FORLOOP_ACCUM_RED_LD_SUM_RESCALE_OP
 *      else:
*/
  __pyx_t_1 = (__Pyx_PyUnicode_Equals(__pyx_v_acc, __pyx_mstate_global->__pyx_n_u_sum, Py_EQ)); if (unlikely((__pyx_t_1 < 0))) __PYX_ERR(0, 391, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":392
 *          return TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP
 *      elif acc == "sum":
 *          return TB_FORLOOP_ACCUM_RED_LD_SUM_RESCALE_OP             # <<<<<<<<<<<<<<
 *      else:
 *          assert False, "Unsupported accum rescale optype"
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_TBOperatorType(yirage::type::TB_FORLOOP_ACCUM_RED_LD_SUM_RESCALE_OP); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 392, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":391
 *      if acc is None:
 *          return TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP
 *      elif acc == "sum":             # <<<<<<<<<<<<<<
 *          return TB_FORLOOP_ACCUM_RED_LD_SUM_RESCALE_OP
 *      else:
*/
  }

  /* "yirage/_cython/core.pyx":394
 *          return TB_FORLOOP_ACCUM_RED_LD_SUM_RESCALE_OP
 *      else:
 *          assert False, "Unsupported accum rescale optype"             # <<<<<<<<<<<<<<
 *          return None
 * 
*/
  /*else*/ {
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(__pyx_assertions_enabled())) {
      if (unlikely(!0)) {
        __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_Unsupported_accum_rescale_optype, 0, 0);
        __PYX_ERR(0, 394, __pyx_L1_error)
      }
    }
    #else
    if ((1)); else __PYX_ERR(0, 394, __pyx_L1_error)
    #endif

    /* "yirage/_cython/core.pyx":395
 *      else:
 *          assert False, "Unsupported accum rescale optype"
 *          return None             # <<<<<<<<<<<<<<
 * 
 * cdef class DTensor:
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":388
 *         return None
 * 
 * def string_to_accum_rescale_optype(acc):             # <<<<<<<<<<<<<<
 *      if acc is None:
 *          return TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.string_to_accum_rescale_optype", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":400
 *     cdef CppDTensor* c_ptr # Hold a Tensor instance
 * 
 *     cdef inline _set_tensor(self, tensor):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if tensor is None:
*/

static CYTHON_INLINE PyObject *__pyx_f_6yirage_4core_7DTensor__set_tensor(struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self, PyObject *__pyx_v_tensor) {
  unsigned PY_LONG_LONG __pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  unsigned PY_LONG_LONG __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_tensor", 0);

  /* "yirage/_cython/core.pyx":402
 *     cdef inline _set_tensor(self, tensor):
 *         cdef unsigned long long ptr
 *         if tensor is None:             # <<<<<<<<<<<<<<
 *             self.c_ptr = <CppDTensor*>(NULL)
 *         else:
*/
  __pyx_t_1 = (__pyx_v_tensor == Py_None);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":403
 *         cdef unsigned long long ptr
 *         if tensor is None:
 *             self.c_ptr = <CppDTensor*>(NULL)             # <<<<<<<<<<<<<<
 *         else:
 *             ptr = ctypes.cast(tensor, ctypes.c_void_p).value
*/
    __pyx_v_self->c_ptr = ((struct yirage::kernel::DTensor *)NULL);

    /* "yirage/_cython/core.pyx":402
 *     cdef inline _set_tensor(self, tensor):
 *         cdef unsigned long long ptr
 *         if tensor is None:             # <<<<<<<<<<<<<<
 *             self.c_ptr = <CppDTensor*>(NULL)
 *         else:
*/
    goto __pyx_L3;
  }

  /* "yirage/_cython/core.pyx":405
 *             self.c_ptr = <CppDTensor*>(NULL)
 *         else:
 *             ptr = ctypes.cast(tensor, ctypes.c_void_p).value             # <<<<<<<<<<<<<<
 *             self.c_ptr = <CppDTensor*>(ptr)
 * 
*/
  /*else*/ {
    __pyx_t_3 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      assert(__pyx_t_3);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
      __pyx_t_7 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_tensor, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 405, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(__pyx_t_5); if (unlikely((__pyx_t_8 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 405, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_ptr = __pyx_t_8;

    /* "yirage/_cython/core.pyx":406
 *         else:
 *             ptr = ctypes.cast(tensor, ctypes.c_void_p).value
 *             self.c_ptr = <CppDTensor*>(ptr)             # <<<<<<<<<<<<<<
 * 
 *     property guid:
*/
    __pyx_v_self->c_ptr = ((struct yirage::kernel::DTensor *)__pyx_v_ptr);
  }
  __pyx_L3:;

  /* "yirage/_cython/core.pyx":400
 *     cdef CppDTensor* c_ptr # Hold a Tensor instance
 * 
 *     cdef inline _set_tensor(self, tensor):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if tensor is None:
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.DTensor._set_tensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":409
 * 
 *     property guid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_7DTensor_4guid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_7DTensor_4guid_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_7DTensor_4guid___get__(((struct __pyx_obj_6yirage_4core_DTensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_7DTensor_4guid___get__(struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":410
 *     property guid:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  __pyx_t_1 = (__pyx_v_self->c_ptr == NULL);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":411
 *         def __get__(self):
 *             if self.c_ptr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.c_ptr.guid
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":410
 *     property guid:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  }

  /* "yirage/_cython/core.pyx":413
 *                 return None
 *             else:
 *                 return self.c_ptr.guid             # <<<<<<<<<<<<<<
 * 
 *     property tensor:
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_FromSize_t(__pyx_v_self->c_ptr->guid); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 413, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":409
 * 
 *     property guid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.DTensor.guid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":416
 * 
 *     property tensor:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_7DTensor_6tensor_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_7DTensor_6tensor_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_7DTensor_6tensor___get__(((struct __pyx_obj_6yirage_4core_DTensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_7DTensor_6tensor___get__(struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  size_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":417
 *     property tensor:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  __pyx_t_1 = (__pyx_v_self->c_ptr == NULL);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":418
 *         def __get__(self):
 *             if self.c_ptr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return ctypes.cast(<unsigned long long>self.c_ptr, ctypes.c_void_p)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":417
 *     property tensor:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  }

  /* "yirage/_cython/core.pyx":420
 *                 return None
 *             else:
 *                 return ctypes.cast(<unsigned long long>self.c_ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_self->c_ptr)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 420, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      assert(__pyx_t_3);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
      __pyx_t_8 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_t_4, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_8, (3-__pyx_t_8) | (__pyx_t_8*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 420, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":416
 * 
 *     property tensor:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("yirage.core.DTensor.tensor.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":422
 *                 return ctypes.cast(<unsigned long long>self.c_ptr, ctypes.c_void_p)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_tensor(value)
 * 
*/

/* Python wrapper */
static int __pyx_pw_6yirage_4core_7DTensor_6tensor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6yirage_4core_7DTensor_6tensor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_7DTensor_6tensor_2__set__(((struct __pyx_obj_6yirage_4core_DTensor *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6yirage_4core_7DTensor_6tensor_2__set__(struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "yirage/_cython/core.pyx":423
 * 
 *         def __set__(self, value):
 *             self._set_tensor(value)             # <<<<<<<<<<<<<<
 * 
 *     property num_dims:
*/
  __pyx_t_1 = __pyx_f_6yirage_4core_7DTensor__set_tensor(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 423, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":422
 *                 return ctypes.cast(<unsigned long long>self.c_ptr, ctypes.c_void_p)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_tensor(value)
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yirage.core.DTensor.tensor.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":426
 * 
 *     property num_dims:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 print("Error: tensor is None in num_dims property")
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_7DTensor_8num_dims_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_7DTensor_8num_dims_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_7DTensor_8num_dims___get__(((struct __pyx_obj_6yirage_4core_DTensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_7DTensor_8num_dims___get__(struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":427
 *     property num_dims:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 print("Error: tensor is None in num_dims property")
 *                 return None
*/
  __pyx_t_1 = (__pyx_v_self->c_ptr == NULL);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":428
 *         def __get__(self):
 *             if self.c_ptr == NULL:
 *                 print("Error: tensor is None in num_dims property")             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF(__pyx_builtin_print);
    __pyx_t_4 = __pyx_builtin_print; 
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_kp_u_Error_tensor_is_None_in_num_dims};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 428, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "yirage/_cython/core.pyx":429
 *             if self.c_ptr == NULL:
 *                 print("Error: tensor is None in num_dims property")
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.c_ptr.num_dims
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":427
 *     property num_dims:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 print("Error: tensor is None in num_dims property")
 *                 return None
*/
  }

  /* "yirage/_cython/core.pyx":431
 *                 return None
 *             else:
 *                 return self.c_ptr.num_dims             # <<<<<<<<<<<<<<
 * 
 *     property dtype:
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_self->c_ptr->num_dims); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 431, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":426
 * 
 *     property num_dims:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 print("Error: tensor is None in num_dims property")
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("yirage.core.DTensor.num_dims.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":434
 * 
 *     property dtype:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_7DTensor_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_7DTensor_5dtype_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_7DTensor_5dtype___get__(((struct __pyx_obj_6yirage_4core_DTensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_7DTensor_5dtype___get__(struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":435
 *     property dtype:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  __pyx_t_1 = (__pyx_v_self->c_ptr == NULL);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":436
 *         def __get__(self):
 *             if self.c_ptr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return convert_ctype_to_dtype(self.c_ptr.data_type)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":435
 *     property dtype:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  }

  /* "yirage/_cython/core.pyx":438
 *                 return None
 *             else:
 *                 return convert_ctype_to_dtype(self.c_ptr.data_type)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, tensor):
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_convert_ctype_to_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(__pyx_v_self->c_ptr->data_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 438, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      assert(__pyx_t_3);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
      __pyx_t_6 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 438, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":434
 * 
 *     property dtype:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("yirage.core.DTensor.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":440
 *                 return convert_ctype_to_dtype(self.c_ptr.data_type)
 * 
 *     def __cinit__(self, tensor):             # <<<<<<<<<<<<<<
 *         self._set_tensor(tensor)
 * 
*/

/* Python wrapper */
static int __pyx_pw_6yirage_4core_7DTensor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6yirage_4core_7DTensor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tensor = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_tensor,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 440, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 440, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 440, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, i); __PYX_ERR(0, 440, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 440, __pyx_L3_error)
    }
    __pyx_v_tensor = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 440, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.DTensor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_7DTensor___cinit__(((struct __pyx_obj_6yirage_4core_DTensor *)__pyx_v_self), __pyx_v_tensor);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6yirage_4core_7DTensor___cinit__(struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self, PyObject *__pyx_v_tensor) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "yirage/_cython/core.pyx":441
 * 
 *     def __cinit__(self, tensor):
 *         self._set_tensor(tensor)             # <<<<<<<<<<<<<<
 * 
 *     def dim(self, int idx):
*/
  __pyx_t_1 = __pyx_f_6yirage_4core_7DTensor__set_tensor(__pyx_v_self, __pyx_v_tensor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 441, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":440
 *                 return convert_ctype_to_dtype(self.c_ptr.data_type)
 * 
 *     def __cinit__(self, tensor):             # <<<<<<<<<<<<<<
 *         self._set_tensor(tensor)
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yirage.core.DTensor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":443
 *         self._set_tensor(tensor)
 * 
 *     def dim(self, int idx):             # <<<<<<<<<<<<<<
 *         if (idx < self.c_ptr.num_dims):
 *             return self.c_ptr.dim[idx]
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_7DTensor_3dim(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_7DTensor_3dim = {"dim", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_7DTensor_3dim, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_7DTensor_3dim(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_idx;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dim (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_idx,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 443, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 443, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "dim", 0) < 0) __PYX_ERR(0, 443, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("dim", 1, 1, 1, i); __PYX_ERR(0, 443, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 443, __pyx_L3_error)
    }
    __pyx_v_idx = __Pyx_PyLong_As_int(values[0]); if (unlikely((__pyx_v_idx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 443, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dim", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 443, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.DTensor.dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_7DTensor_2dim(((struct __pyx_obj_6yirage_4core_DTensor *)__pyx_v_self), __pyx_v_idx);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_7DTensor_2dim(struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self, int __pyx_v_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dim", 0);

  /* "yirage/_cython/core.pyx":444
 * 
 *     def dim(self, int idx):
 *         if (idx < self.c_ptr.num_dims):             # <<<<<<<<<<<<<<
 *             return self.c_ptr.dim[idx]
 *         else:
*/
  __pyx_t_1 = (__pyx_v_idx < __pyx_v_self->c_ptr->num_dims);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":445
 *     def dim(self, int idx):
 *         if (idx < self.c_ptr.num_dims):
 *             return self.c_ptr.dim[idx]             # <<<<<<<<<<<<<<
 *         else:
 *             assert False , "Error: index out of range"
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_int((__pyx_v_self->c_ptr->dim[__pyx_v_idx])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 445, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":444
 * 
 *     def dim(self, int idx):
 *         if (idx < self.c_ptr.num_dims):             # <<<<<<<<<<<<<<
 *             return self.c_ptr.dim[idx]
 *         else:
*/
  }

  /* "yirage/_cython/core.pyx":447
 *             return self.c_ptr.dim[idx]
 *         else:
 *             assert False , "Error: index out of range"             # <<<<<<<<<<<<<<
 *             return None
 * 
*/
  /*else*/ {
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(__pyx_assertions_enabled())) {
      if (unlikely(!0)) {
        __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_Error_index_out_of_range, 0, 0);
        __PYX_ERR(0, 447, __pyx_L1_error)
      }
    }
    #else
    if ((1)); else __PYX_ERR(0, 447, __pyx_L1_error)
    #endif

    /* "yirage/_cython/core.pyx":448
 *         else:
 *             assert False , "Error: index out of range"
 *             return None             # <<<<<<<<<<<<<<
 * 
 * cdef class STensor:
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":443
 *         self._set_tensor(tensor)
 * 
 *     def dim(self, int idx):             # <<<<<<<<<<<<<<
 *         if (idx < self.c_ptr.num_dims):
 *             return self.c_ptr.dim[idx]
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.DTensor.dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_7DTensor_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_7DTensor_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_7DTensor_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_7DTensor_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_7DTensor_4__reduce_cython__(((struct __pyx_obj_6yirage_4core_DTensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_7DTensor_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.DTensor.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_7DTensor_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_7DTensor_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_7DTensor_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_7DTensor_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.DTensor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_7DTensor_6__setstate_cython__(((struct __pyx_obj_6yirage_4core_DTensor *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_7DTensor_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.DTensor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":453
 *     cdef CppSTensor* c_ptr # Hold a CppSTensor instance
 * 
 *     cdef inline _set_tensor(self, tensor):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if tensor is None:
*/

static CYTHON_INLINE PyObject *__pyx_f_6yirage_4core_7STensor__set_tensor(struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self, PyObject *__pyx_v_tensor) {
  unsigned PY_LONG_LONG __pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  unsigned PY_LONG_LONG __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_tensor", 0);

  /* "yirage/_cython/core.pyx":455
 *     cdef inline _set_tensor(self, tensor):
 *         cdef unsigned long long ptr
 *         if tensor is None:             # <<<<<<<<<<<<<<
 *             self.c_ptr = <CppSTensor*>(NULL)
 *         else:
*/
  __pyx_t_1 = (__pyx_v_tensor == Py_None);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":456
 *         cdef unsigned long long ptr
 *         if tensor is None:
 *             self.c_ptr = <CppSTensor*>(NULL)             # <<<<<<<<<<<<<<
 *         else:
 *             ptr = ctypes.cast(tensor, ctypes.c_void_p).value
*/
    __pyx_v_self->c_ptr = ((yirage::threadblock::STensor *)NULL);

    /* "yirage/_cython/core.pyx":455
 *     cdef inline _set_tensor(self, tensor):
 *         cdef unsigned long long ptr
 *         if tensor is None:             # <<<<<<<<<<<<<<
 *             self.c_ptr = <CppSTensor*>(NULL)
 *         else:
*/
    goto __pyx_L3;
  }

  /* "yirage/_cython/core.pyx":458
 *             self.c_ptr = <CppSTensor*>(NULL)
 *         else:
 *             ptr = ctypes.cast(tensor, ctypes.c_void_p).value             # <<<<<<<<<<<<<<
 *             self.c_ptr = <CppSTensor*>(ptr)
 *     property guid:
*/
  /*else*/ {
    __pyx_t_3 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      assert(__pyx_t_3);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
      __pyx_t_7 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_tensor, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 458, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(__pyx_t_5); if (unlikely((__pyx_t_8 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 458, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_ptr = __pyx_t_8;

    /* "yirage/_cython/core.pyx":459
 *         else:
 *             ptr = ctypes.cast(tensor, ctypes.c_void_p).value
 *             self.c_ptr = <CppSTensor*>(ptr)             # <<<<<<<<<<<<<<
 *     property guid:
 *         def __get__(self):
*/
    __pyx_v_self->c_ptr = ((yirage::threadblock::STensor *)__pyx_v_ptr);
  }
  __pyx_L3:;

  /* "yirage/_cython/core.pyx":453
 *     cdef CppSTensor* c_ptr # Hold a CppSTensor instance
 * 
 *     cdef inline _set_tensor(self, tensor):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if tensor is None:
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.STensor._set_tensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":461
 *             self.c_ptr = <CppSTensor*>(ptr)
 *     property guid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_7STensor_4guid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_7STensor_4guid_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_7STensor_4guid___get__(((struct __pyx_obj_6yirage_4core_STensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_7STensor_4guid___get__(struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":462
 *     property guid:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  __pyx_t_1 = (__pyx_v_self->c_ptr == NULL);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":463
 *         def __get__(self):
 *             if self.c_ptr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.c_ptr.guid
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":462
 *     property guid:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  }

  /* "yirage/_cython/core.pyx":465
 *                 return None
 *             else:
 *                 return self.c_ptr.guid             # <<<<<<<<<<<<<<
 *     property tensor:
 *         def __get__(self):
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_FromSize_t(__pyx_v_self->c_ptr->guid); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 465, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":461
 *             self.c_ptr = <CppSTensor*>(ptr)
 *     property guid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.STensor.guid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":467
 *                 return self.c_ptr.guid
 *     property tensor:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_7STensor_6tensor_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_7STensor_6tensor_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_7STensor_6tensor___get__(((struct __pyx_obj_6yirage_4core_STensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_7STensor_6tensor___get__(struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  size_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":468
 *     property tensor:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  __pyx_t_1 = (__pyx_v_self->c_ptr == NULL);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":469
 *         def __get__(self):
 *             if self.c_ptr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return ctypes.cast(<unsigned long long>self.c_ptr, ctypes.c_void_p)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":468
 *     property tensor:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  }

  /* "yirage/_cython/core.pyx":471
 *                 return None
 *             else:
 *                 return ctypes.cast(<unsigned long long>self.c_ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_self->c_ptr)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 471, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      assert(__pyx_t_3);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
      __pyx_t_8 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_t_4, __pyx_t_7};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_8, (3-__pyx_t_8) | (__pyx_t_8*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 471, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":467
 *                 return self.c_ptr.guid
 *     property tensor:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("yirage.core.STensor.tensor.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":473
 *                 return ctypes.cast(<unsigned long long>self.c_ptr, ctypes.c_void_p)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_tensor(value)
 * 
*/

/* Python wrapper */
static int __pyx_pw_6yirage_4core_7STensor_6tensor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6yirage_4core_7STensor_6tensor_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_7STensor_6tensor_2__set__(((struct __pyx_obj_6yirage_4core_STensor *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6yirage_4core_7STensor_6tensor_2__set__(struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "yirage/_cython/core.pyx":474
 * 
 *         def __set__(self, value):
 *             self._set_tensor(value)             # <<<<<<<<<<<<<<
 * 
 *     property num_dims:
*/
  __pyx_t_1 = __pyx_f_6yirage_4core_7STensor__set_tensor(__pyx_v_self, __pyx_v_value); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 474, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":473
 *                 return ctypes.cast(<unsigned long long>self.c_ptr, ctypes.c_void_p)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             self._set_tensor(value)
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yirage.core.STensor.tensor.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":477
 * 
 *     property num_dims:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_7STensor_8num_dims_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_7STensor_8num_dims_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_7STensor_8num_dims___get__(((struct __pyx_obj_6yirage_4core_STensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_7STensor_8num_dims___get__(struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":478
 *     property num_dims:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  __pyx_t_1 = (__pyx_v_self->c_ptr == NULL);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":479
 *         def __get__(self):
 *             if self.c_ptr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.c_ptr.num_dims
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":478
 *     property num_dims:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  }

  /* "yirage/_cython/core.pyx":481
 *                 return None
 *             else:
 *                 return self.c_ptr.num_dims             # <<<<<<<<<<<<<<
 * 
 *     property dtype:
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_self->c_ptr->num_dims); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 481, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":477
 * 
 *     property num_dims:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.STensor.num_dims.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":484
 * 
 *     property dtype:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_7STensor_5dtype_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_7STensor_5dtype_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_7STensor_5dtype___get__(((struct __pyx_obj_6yirage_4core_STensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_7STensor_5dtype___get__(struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":485
 *     property dtype:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  __pyx_t_1 = (__pyx_v_self->c_ptr == NULL);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":486
 *         def __get__(self):
 *             if self.c_ptr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return convert_ctype_to_dtype(self.c_ptr.data_type)
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":485
 *     property dtype:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  }

  /* "yirage/_cython/core.pyx":488
 *                 return None
 *             else:
 *                 return convert_ctype_to_dtype(self.c_ptr.data_type)             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, tensor):
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_convert_ctype_to_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(__pyx_v_self->c_ptr->data_type); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 488, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      assert(__pyx_t_3);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
      __pyx_t_6 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 488, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":484
 * 
 *     property dtype:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("yirage.core.STensor.dtype.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":490
 *                 return convert_ctype_to_dtype(self.c_ptr.data_type)
 * 
 *     def __cinit__(self, tensor):             # <<<<<<<<<<<<<<
 *         self._set_tensor(tensor)
 * 
*/

/* Python wrapper */
static int __pyx_pw_6yirage_4core_7STensor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6yirage_4core_7STensor_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_tensor = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_tensor,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 490, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 490, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 490, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, i); __PYX_ERR(0, 490, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 490, __pyx_L3_error)
    }
    __pyx_v_tensor = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 490, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.STensor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_7STensor___cinit__(((struct __pyx_obj_6yirage_4core_STensor *)__pyx_v_self), __pyx_v_tensor);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6yirage_4core_7STensor___cinit__(struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self, PyObject *__pyx_v_tensor) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "yirage/_cython/core.pyx":491
 * 
 *     def __cinit__(self, tensor):
 *         self._set_tensor(tensor)             # <<<<<<<<<<<<<<
 * 
 *     def dim(self, int idx):
*/
  __pyx_t_1 = __pyx_f_6yirage_4core_7STensor__set_tensor(__pyx_v_self, __pyx_v_tensor); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 491, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":490
 *                 return convert_ctype_to_dtype(self.c_ptr.data_type)
 * 
 *     def __cinit__(self, tensor):             # <<<<<<<<<<<<<<
 *         self._set_tensor(tensor)
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yirage.core.STensor.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":493
 *         self._set_tensor(tensor)
 * 
 *     def dim(self, int idx):             # <<<<<<<<<<<<<<
 *         if (idx < self.c_ptr.num_dims):
 *             return self.c_ptr.dim[idx]
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_7STensor_3dim(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_7STensor_3dim = {"dim", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_7STensor_3dim, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_7STensor_3dim(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_idx;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("dim (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_idx,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 493, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 493, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "dim", 0) < 0) __PYX_ERR(0, 493, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("dim", 1, 1, 1, i); __PYX_ERR(0, 493, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 493, __pyx_L3_error)
    }
    __pyx_v_idx = __Pyx_PyLong_As_int(values[0]); if (unlikely((__pyx_v_idx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 493, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("dim", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 493, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.STensor.dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_7STensor_2dim(((struct __pyx_obj_6yirage_4core_STensor *)__pyx_v_self), __pyx_v_idx);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_7STensor_2dim(struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self, int __pyx_v_idx) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("dim", 0);

  /* "yirage/_cython/core.pyx":494
 * 
 *     def dim(self, int idx):
 *         if (idx < self.c_ptr.num_dims):             # <<<<<<<<<<<<<<
 *             return self.c_ptr.dim[idx]
 *         else:
*/
  __pyx_t_1 = (__pyx_v_idx < __pyx_v_self->c_ptr->num_dims);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":495
 *     def dim(self, int idx):
 *         if (idx < self.c_ptr.num_dims):
 *             return self.c_ptr.dim[idx]             # <<<<<<<<<<<<<<
 *         else:
 *             assert False , "Error: index out of range"
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_int((__pyx_v_self->c_ptr->dim[__pyx_v_idx])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 495, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":494
 * 
 *     def dim(self, int idx):
 *         if (idx < self.c_ptr.num_dims):             # <<<<<<<<<<<<<<
 *             return self.c_ptr.dim[idx]
 *         else:
*/
  }

  /* "yirage/_cython/core.pyx":497
 *             return self.c_ptr.dim[idx]
 *         else:
 *             assert False , "Error: index out of range"             # <<<<<<<<<<<<<<
 *             return None
 * 
*/
  /*else*/ {
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(__pyx_assertions_enabled())) {
      if (unlikely(!0)) {
        __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_Error_index_out_of_range, 0, 0);
        __PYX_ERR(0, 497, __pyx_L1_error)
      }
    }
    #else
    if ((1)); else __PYX_ERR(0, 497, __pyx_L1_error)
    #endif

    /* "yirage/_cython/core.pyx":498
 *         else:
 *             assert False , "Error: index out of range"
 *             return None             # <<<<<<<<<<<<<<
 * 
 * cdef class CyKNOperator:
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":493
 *         self._set_tensor(tensor)
 * 
 *     def dim(self, int idx):             # <<<<<<<<<<<<<<
 *         if (idx < self.c_ptr.num_dims):
 *             return self.c_ptr.dim[idx]
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.STensor.dim", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_7STensor_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_7STensor_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_7STensor_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_7STensor_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_7STensor_4__reduce_cython__(((struct __pyx_obj_6yirage_4core_STensor *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_7STensor_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.STensor.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_7STensor_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_7STensor_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_7STensor_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_7STensor_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.STensor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_7STensor_6__setstate_cython__(((struct __pyx_obj_6yirage_4core_STensor *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_7STensor_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_STensor *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.STensor.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":503
 *     cdef CppKNOperator* c_ptr # Hold a CppKNOperator instance
 * 
 *     cdef inline _set_operator(self, op):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if op is None:
*/

static CYTHON_INLINE PyObject *__pyx_f_6yirage_4core_12CyKNOperator__set_operator(struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_self, PyObject *__pyx_v_op) {
  unsigned PY_LONG_LONG __pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  unsigned PY_LONG_LONG __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_operator", 0);

  /* "yirage/_cython/core.pyx":505
 *     cdef inline _set_operator(self, op):
 *         cdef unsigned long long ptr
 *         if op is None:             # <<<<<<<<<<<<<<
 *             self.c_ptr = <CppKNOperator*>(NULL)
 *         else:
*/
  __pyx_t_1 = (__pyx_v_op == Py_None);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":506
 *         cdef unsigned long long ptr
 *         if op is None:
 *             self.c_ptr = <CppKNOperator*>(NULL)             # <<<<<<<<<<<<<<
 *         else:
 *             ptr = ctypes.cast(op, ctypes.c_void_p).value
*/
    __pyx_v_self->c_ptr = ((yirage::kernel::KNOperator *)NULL);

    /* "yirage/_cython/core.pyx":505
 *     cdef inline _set_operator(self, op):
 *         cdef unsigned long long ptr
 *         if op is None:             # <<<<<<<<<<<<<<
 *             self.c_ptr = <CppKNOperator*>(NULL)
 *         else:
*/
    goto __pyx_L3;
  }

  /* "yirage/_cython/core.pyx":508
 *             self.c_ptr = <CppKNOperator*>(NULL)
 *         else:
 *             ptr = ctypes.cast(op, ctypes.c_void_p).value             # <<<<<<<<<<<<<<
 *             self.c_ptr = <CppKNOperator*>(ptr)
 * 
*/
  /*else*/ {
    __pyx_t_3 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      assert(__pyx_t_3);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
      __pyx_t_7 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_op, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 508, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(__pyx_t_5); if (unlikely((__pyx_t_8 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 508, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_ptr = __pyx_t_8;

    /* "yirage/_cython/core.pyx":509
 *         else:
 *             ptr = ctypes.cast(op, ctypes.c_void_p).value
 *             self.c_ptr = <CppKNOperator*>(ptr)             # <<<<<<<<<<<<<<
 * 
 *     def get_input_dtensors(self):
*/
    __pyx_v_self->c_ptr = ((yirage::kernel::KNOperator *)__pyx_v_ptr);
  }
  __pyx_L3:;

  /* "yirage/_cython/core.pyx":503
 *     cdef CppKNOperator* c_ptr # Hold a CppKNOperator instance
 * 
 *     cdef inline _set_operator(self, op):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if op is None:
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNOperator._set_operator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":511
 *             self.c_ptr = <CppKNOperator*>(ptr)
 * 
 *     def get_input_dtensors(self):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* cinputs[1024]
 *         num = self.c_ptr.get_input_dtensors(cinputs)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_12CyKNOperator_1get_input_dtensors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_12CyKNOperator_1get_input_dtensors = {"get_input_dtensors", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyKNOperator_1get_input_dtensors, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_12CyKNOperator_1get_input_dtensors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_input_dtensors (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_input_dtensors", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_input_dtensors", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_12CyKNOperator_get_input_dtensors(((struct __pyx_obj_6yirage_4core_CyKNOperator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_12CyKNOperator_get_input_dtensors(struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_self) {
  struct yirage::kernel::DTensor *__pyx_v_cinputs[0x400];
  int __pyx_v_num;
  PyObject *__pyx_v_inputs = NULL;
  int __pyx_v_i;
  PyObject *__pyx_v_ptr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_input_dtensors", 0);

  /* "yirage/_cython/core.pyx":513
 *     def get_input_dtensors(self):
 *         cdef CppDTensor* cinputs[1024]
 *         num = self.c_ptr.get_input_dtensors(cinputs)             # <<<<<<<<<<<<<<
 *         inputs = list()
 *         for i in range(num):
*/
  __pyx_v_num = __pyx_v_self->c_ptr->get_input_dtensors(__pyx_v_cinputs);

  /* "yirage/_cython/core.pyx":514
 *         cdef CppDTensor* cinputs[1024]
 *         num = self.c_ptr.get_input_dtensors(cinputs)
 *         inputs = list()             # <<<<<<<<<<<<<<
 *         for i in range(num):
 *             ptr = ctypes.cast(<unsigned long long>cinputs[i], ctypes.c_void_p)
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 514, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_inputs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":515
 *         num = self.c_ptr.get_input_dtensors(cinputs)
 *         inputs = list()
 *         for i in range(num):             # <<<<<<<<<<<<<<
 *             ptr = ctypes.cast(<unsigned long long>cinputs[i], ctypes.c_void_p)
 *             inputs.append(DTensor(ptr))
*/
  __pyx_t_2 = __pyx_v_num;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "yirage/_cython/core.pyx":516
 *         inputs = list()
 *         for i in range(num):
 *             ptr = ctypes.cast(<unsigned long long>cinputs[i], ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *             inputs.append(DTensor(ptr))
 *         return inputs
*/
    __pyx_t_5 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)(__pyx_v_cinputs[__pyx_v_i]))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 516, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_10 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      assert(__pyx_t_5);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);
      __pyx_t_10 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_6, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_10, (3-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 516, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_ptr, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "yirage/_cython/core.pyx":517
 *         for i in range(num):
 *             ptr = ctypes.cast(<unsigned long long>cinputs[i], ctypes.c_void_p)
 *             inputs.append(DTensor(ptr))             # <<<<<<<<<<<<<<
 *         return inputs
 * 
*/
    __pyx_t_7 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
    __pyx_t_9 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
    __pyx_t_10 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_ptr};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 517, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_1);
    }
    __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_inputs, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 517, __pyx_L1_error)
    __Pyx_DECREF((PyObject *)__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "yirage/_cython/core.pyx":518
 *             ptr = ctypes.cast(<unsigned long long>cinputs[i], ctypes.c_void_p)
 *             inputs.append(DTensor(ptr))
 *         return inputs             # <<<<<<<<<<<<<<
 * 
 *     def get_output_dtensors(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_inputs);
  __pyx_r = __pyx_v_inputs;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":511
 *             self.c_ptr = <CppKNOperator*>(ptr)
 * 
 *     def get_input_dtensors(self):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* cinputs[1024]
 *         num = self.c_ptr.get_input_dtensors(cinputs)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("yirage.core.CyKNOperator.get_input_dtensors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_inputs);
  __Pyx_XDECREF(__pyx_v_ptr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":520
 *         return inputs
 * 
 *     def get_output_dtensors(self):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* coutputs[1024]
 *         num = self.c_ptr.get_output_dtensors(coutputs)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_12CyKNOperator_3get_output_dtensors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_12CyKNOperator_3get_output_dtensors = {"get_output_dtensors", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyKNOperator_3get_output_dtensors, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_12CyKNOperator_3get_output_dtensors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_output_dtensors (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_output_dtensors", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_output_dtensors", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_12CyKNOperator_2get_output_dtensors(((struct __pyx_obj_6yirage_4core_CyKNOperator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_12CyKNOperator_2get_output_dtensors(struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_self) {
  struct yirage::kernel::DTensor *__pyx_v_coutputs[0x400];
  int __pyx_v_num;
  PyObject *__pyx_v_outputs = NULL;
  int __pyx_v_i;
  PyObject *__pyx_v_ptr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_output_dtensors", 0);

  /* "yirage/_cython/core.pyx":522
 *     def get_output_dtensors(self):
 *         cdef CppDTensor* coutputs[1024]
 *         num = self.c_ptr.get_output_dtensors(coutputs)             # <<<<<<<<<<<<<<
 *         outputs = list()
 *         for i in range(num):
*/
  __pyx_v_num = __pyx_v_self->c_ptr->get_output_dtensors(__pyx_v_coutputs);

  /* "yirage/_cython/core.pyx":523
 *         cdef CppDTensor* coutputs[1024]
 *         num = self.c_ptr.get_output_dtensors(coutputs)
 *         outputs = list()             # <<<<<<<<<<<<<<
 *         for i in range(num):
 *             ptr = ctypes.cast(<unsigned long long>coutputs[i], ctypes.c_void_p)
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 523, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_outputs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":524
 *         num = self.c_ptr.get_output_dtensors(coutputs)
 *         outputs = list()
 *         for i in range(num):             # <<<<<<<<<<<<<<
 *             ptr = ctypes.cast(<unsigned long long>coutputs[i], ctypes.c_void_p)
 *             outputs.append(DTensor(ptr))
*/
  __pyx_t_2 = __pyx_v_num;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "yirage/_cython/core.pyx":525
 *         outputs = list()
 *         for i in range(num):
 *             ptr = ctypes.cast(<unsigned long long>coutputs[i], ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *             outputs.append(DTensor(ptr))
 *         return outputs
*/
    __pyx_t_5 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)(__pyx_v_coutputs[__pyx_v_i]))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 525, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_10 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      assert(__pyx_t_5);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);
      __pyx_t_10 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_6, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_10, (3-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 525, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_ptr, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "yirage/_cython/core.pyx":526
 *         for i in range(num):
 *             ptr = ctypes.cast(<unsigned long long>coutputs[i], ctypes.c_void_p)
 *             outputs.append(DTensor(ptr))             # <<<<<<<<<<<<<<
 *         return outputs
 * 
*/
    __pyx_t_7 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
    __pyx_t_9 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
    __pyx_t_10 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_ptr};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 526, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_1);
    }
    __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_outputs, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 526, __pyx_L1_error)
    __Pyx_DECREF((PyObject *)__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "yirage/_cython/core.pyx":527
 *             ptr = ctypes.cast(<unsigned long long>coutputs[i], ctypes.c_void_p)
 *             outputs.append(DTensor(ptr))
 *         return outputs             # <<<<<<<<<<<<<<
 * 
 *     property op_type:
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_outputs);
  __pyx_r = __pyx_v_outputs;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":520
 *         return inputs
 * 
 *     def get_output_dtensors(self):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* coutputs[1024]
 *         num = self.c_ptr.get_output_dtensors(coutputs)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("yirage.core.CyKNOperator.get_output_dtensors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_outputs);
  __Pyx_XDECREF(__pyx_v_ptr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":530
 * 
 *     property op_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_12CyKNOperator_7op_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_12CyKNOperator_7op_type_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_12CyKNOperator_7op_type___get__(((struct __pyx_obj_6yirage_4core_CyKNOperator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_12CyKNOperator_7op_type___get__(struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  size_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":531
 *     property op_type:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  __pyx_t_1 = (__pyx_v_self->c_ptr == NULL);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":532
 *         def __get__(self):
 *             if self.c_ptr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return get_kn_operator_type_string(int(self.c_ptr.op_type))
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":531
 *     property op_type:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  }

  /* "yirage/_cython/core.pyx":534
 *                 return None
 *             else:
 *                 return get_kn_operator_type_string(int(self.c_ptr.op_type))             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, op):
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_get_kn_operator_type_string); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    __Pyx_INCREF((PyObject *)(&PyLong_Type));
    __pyx_t_7 = ((PyObject *)(&PyLong_Type)); 
    __pyx_t_8 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_KNOperatorType(__pyx_v_self->c_ptr->op_type); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 534, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_8};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    __pyx_t_9 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      assert(__pyx_t_3);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
      __pyx_t_9 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 534, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":530
 * 
 *     property op_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("yirage.core.CyKNOperator.op_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":536
 *                 return get_kn_operator_type_string(int(self.c_ptr.op_type))
 * 
 *     def __cinit__(self, op):             # <<<<<<<<<<<<<<
 *         self._set_operator(op)
 * 
*/

/* Python wrapper */
static int __pyx_pw_6yirage_4core_12CyKNOperator_5__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6yirage_4core_12CyKNOperator_5__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_op = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_op,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 536, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 536, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 536, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, i); __PYX_ERR(0, 536, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 536, __pyx_L3_error)
    }
    __pyx_v_op = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 536, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNOperator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_12CyKNOperator_4__cinit__(((struct __pyx_obj_6yirage_4core_CyKNOperator *)__pyx_v_self), __pyx_v_op);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6yirage_4core_12CyKNOperator_4__cinit__(struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_self, PyObject *__pyx_v_op) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "yirage/_cython/core.pyx":537
 * 
 *     def __cinit__(self, op):
 *         self._set_operator(op)             # <<<<<<<<<<<<<<
 * 
 * cdef class CyKNCustomizedOp(CyKNOperator):
*/
  __pyx_t_1 = __pyx_f_6yirage_4core_12CyKNOperator__set_operator(__pyx_v_self, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 537, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":536
 *                 return get_kn_operator_type_string(int(self.c_ptr.op_type))
 * 
 *     def __cinit__(self, op):             # <<<<<<<<<<<<<<
 *         self._set_operator(op)
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yirage.core.CyKNOperator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_12CyKNOperator_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_12CyKNOperator_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyKNOperator_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_12CyKNOperator_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_12CyKNOperator_6__reduce_cython__(((struct __pyx_obj_6yirage_4core_CyKNOperator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_12CyKNOperator_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.CyKNOperator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_12CyKNOperator_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_12CyKNOperator_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyKNOperator_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_12CyKNOperator_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNOperator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_12CyKNOperator_8__setstate_cython__(((struct __pyx_obj_6yirage_4core_CyKNOperator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_12CyKNOperator_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.CyKNOperator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":542
 *     cdef CppKNCustomizedOp* c_customized_ptr
 * 
 *     def __cinit__(self, op):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if op is None:
*/

/* Python wrapper */
static int __pyx_pw_6yirage_4core_16CyKNCustomizedOp_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6yirage_4core_16CyKNCustomizedOp_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_op = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_op,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 542, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 542, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 542, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, i); __PYX_ERR(0, 542, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 542, __pyx_L3_error)
    }
    __pyx_v_op = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 542, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNCustomizedOp.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_16CyKNCustomizedOp___cinit__(((struct __pyx_obj_6yirage_4core_CyKNCustomizedOp *)__pyx_v_self), __pyx_v_op);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6yirage_4core_16CyKNCustomizedOp___cinit__(struct __pyx_obj_6yirage_4core_CyKNCustomizedOp *__pyx_v_self, PyObject *__pyx_v_op) {
  unsigned PY_LONG_LONG __pyx_v_ptr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  unsigned PY_LONG_LONG __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "yirage/_cython/core.pyx":544
 *     def __cinit__(self, op):
 *         cdef unsigned long long ptr
 *         if op is None:             # <<<<<<<<<<<<<<
 *             self.c_customized_ptr = <CppKNCustomizedOp*>(NULL)
 *         else:
*/
  __pyx_t_1 = (__pyx_v_op == Py_None);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":545
 *         cdef unsigned long long ptr
 *         if op is None:
 *             self.c_customized_ptr = <CppKNCustomizedOp*>(NULL)             # <<<<<<<<<<<<<<
 *         else:
 *             ptr = ctypes.cast(op, ctypes.c_void_p).value
*/
    __pyx_v_self->c_customized_ptr = ((yirage::kernel::KNCustomizedOp *)NULL);

    /* "yirage/_cython/core.pyx":544
 *     def __cinit__(self, op):
 *         cdef unsigned long long ptr
 *         if op is None:             # <<<<<<<<<<<<<<
 *             self.c_customized_ptr = <CppKNCustomizedOp*>(NULL)
 *         else:
*/
    goto __pyx_L3;
  }

  /* "yirage/_cython/core.pyx":547
 *             self.c_customized_ptr = <CppKNCustomizedOp*>(NULL)
 *         else:
 *             ptr = ctypes.cast(op, ctypes.c_void_p).value             # <<<<<<<<<<<<<<
 *             self.c_customized_ptr = <CppKNCustomizedOp*>(ptr)
 * 
*/
  /*else*/ {
    __pyx_t_3 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      assert(__pyx_t_3);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
      __pyx_t_7 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_op, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 547, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(__pyx_t_5); if (unlikely((__pyx_t_8 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 547, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_ptr = __pyx_t_8;

    /* "yirage/_cython/core.pyx":548
 *         else:
 *             ptr = ctypes.cast(op, ctypes.c_void_p).value
 *             self.c_customized_ptr = <CppKNCustomizedOp*>(ptr)             # <<<<<<<<<<<<<<
 * 
 *     def get_bgraph(self):
*/
    __pyx_v_self->c_customized_ptr = ((yirage::kernel::KNCustomizedOp *)__pyx_v_ptr);
  }
  __pyx_L3:;

  /* "yirage/_cython/core.pyx":542
 *     cdef CppKNCustomizedOp* c_customized_ptr
 * 
 *     def __cinit__(self, op):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if op is None:
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNCustomizedOp.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":550
 *             self.c_customized_ptr = <CppKNCustomizedOp*>(ptr)
 * 
 *     def get_bgraph(self):             # <<<<<<<<<<<<<<
 *         cdef CppTBGraph* bgraph
 *         self.c_customized_ptr.get_bgraph(&bgraph)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_16CyKNCustomizedOp_3get_bgraph(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_16CyKNCustomizedOp_3get_bgraph = {"get_bgraph", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_16CyKNCustomizedOp_3get_bgraph, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_16CyKNCustomizedOp_3get_bgraph(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_bgraph (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_bgraph", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_bgraph", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_16CyKNCustomizedOp_2get_bgraph(((struct __pyx_obj_6yirage_4core_CyKNCustomizedOp *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_16CyKNCustomizedOp_2get_bgraph(struct __pyx_obj_6yirage_4core_CyKNCustomizedOp *__pyx_v_self) {
  yirage::threadblock::Graph *__pyx_v_bgraph;
  PyObject *__pyx_v_ptr = NULL;
  struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_cybgraph = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_bgraph", 0);

  /* "yirage/_cython/core.pyx":552
 *     def get_bgraph(self):
 *         cdef CppTBGraph* bgraph
 *         self.c_customized_ptr.get_bgraph(&bgraph)             # <<<<<<<<<<<<<<
 * 
 *         ptr = ctypes.cast(<unsigned long long>bgraph, ctypes.c_void_p)
*/
  __pyx_v_self->c_customized_ptr->get_bgraph((&__pyx_v_bgraph));

  /* "yirage/_cython/core.pyx":554
 *         self.c_customized_ptr.get_bgraph(&bgraph)
 * 
 *         ptr = ctypes.cast(<unsigned long long>bgraph, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         cybgraph = CyTBGraph(bgraph = ptr)
 *         return cybgraph
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_bgraph)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 554, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 554, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_ptr = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":555
 * 
 *         ptr = ctypes.cast(<unsigned long long>bgraph, ctypes.c_void_p)
 *         cybgraph = CyTBGraph(bgraph = ptr)             # <<<<<<<<<<<<<<
 *         return cybgraph
 * 
*/
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2 + ((CYTHON_VECTORCALL) ? 1 : 0)] = {__pyx_t_4, NULL};
    __pyx_t_3 = __Pyx_MakeVectorcallBuilderKwds(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (__Pyx_VectorcallBuilder_AddArg(__pyx_mstate_global->__pyx_n_u_bgraph, __pyx_v_ptr, __pyx_t_3, __pyx_callargs+1, 0) < 0) __PYX_ERR(0, 555, __pyx_L1_error)
    __pyx_t_1 = __Pyx_Object_Vectorcall_CallFromBuilder(__pyx_t_6, __pyx_callargs+__pyx_t_7, (1-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET), __pyx_t_3);
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 555, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_cybgraph = ((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":556
 *         ptr = ctypes.cast(<unsigned long long>bgraph, ctypes.c_void_p)
 *         cybgraph = CyTBGraph(bgraph = ptr)
 *         return cybgraph             # <<<<<<<<<<<<<<
 * 
 * cdef class CyTBOperator:
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF((PyObject *)__pyx_v_cybgraph);
  __pyx_r = ((PyObject *)__pyx_v_cybgraph);
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":550
 *             self.c_customized_ptr = <CppKNCustomizedOp*>(ptr)
 * 
 *     def get_bgraph(self):             # <<<<<<<<<<<<<<
 *         cdef CppTBGraph* bgraph
 *         self.c_customized_ptr.get_bgraph(&bgraph)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNCustomizedOp.get_bgraph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ptr);
  __Pyx_XDECREF((PyObject *)__pyx_v_cybgraph);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_16CyKNCustomizedOp_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_16CyKNCustomizedOp_5__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_16CyKNCustomizedOp_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_16CyKNCustomizedOp_5__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_16CyKNCustomizedOp_4__reduce_cython__(((struct __pyx_obj_6yirage_4core_CyKNCustomizedOp *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_16CyKNCustomizedOp_4__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyKNCustomizedOp *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.CyKNCustomizedOp.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_16CyKNCustomizedOp_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_16CyKNCustomizedOp_7__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_16CyKNCustomizedOp_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_16CyKNCustomizedOp_7__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNCustomizedOp.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_16CyKNCustomizedOp_6__setstate_cython__(((struct __pyx_obj_6yirage_4core_CyKNCustomizedOp *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_16CyKNCustomizedOp_6__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyKNCustomizedOp *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.CyKNCustomizedOp.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":561
 *     cdef CppTBOperator* c_ptr # Hold a CppTBOperator instance
 * 
 *     cdef inline _set_operator(self, op):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if op is None:
*/

static CYTHON_INLINE PyObject *__pyx_f_6yirage_4core_12CyTBOperator__set_operator(struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_self, PyObject *__pyx_v_op) {
  unsigned PY_LONG_LONG __pyx_v_ptr;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  unsigned PY_LONG_LONG __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_set_operator", 0);

  /* "yirage/_cython/core.pyx":563
 *     cdef inline _set_operator(self, op):
 *         cdef unsigned long long ptr
 *         if op is None:             # <<<<<<<<<<<<<<
 *             self.c_ptr = <CppTBOperator*>(NULL)
 *         else:
*/
  __pyx_t_1 = (__pyx_v_op == Py_None);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":564
 *         cdef unsigned long long ptr
 *         if op is None:
 *             self.c_ptr = <CppTBOperator*>(NULL)             # <<<<<<<<<<<<<<
 *         else:
 *             ptr = ctypes.cast(op, ctypes.c_void_p).value
*/
    __pyx_v_self->c_ptr = ((yirage::threadblock::TBOperator *)NULL);

    /* "yirage/_cython/core.pyx":563
 *     cdef inline _set_operator(self, op):
 *         cdef unsigned long long ptr
 *         if op is None:             # <<<<<<<<<<<<<<
 *             self.c_ptr = <CppTBOperator*>(NULL)
 *         else:
*/
    goto __pyx_L3;
  }

  /* "yirage/_cython/core.pyx":566
 *             self.c_ptr = <CppTBOperator*>(NULL)
 *         else:
 *             ptr = ctypes.cast(op, ctypes.c_void_p).value             # <<<<<<<<<<<<<<
 *             self.c_ptr = <CppTBOperator*>(ptr)
 * 
*/
  /*else*/ {
    __pyx_t_3 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      assert(__pyx_t_3);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
      __pyx_t_7 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_op, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 566, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(__pyx_t_5); if (unlikely((__pyx_t_8 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 566, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_ptr = __pyx_t_8;

    /* "yirage/_cython/core.pyx":567
 *         else:
 *             ptr = ctypes.cast(op, ctypes.c_void_p).value
 *             self.c_ptr = <CppTBOperator*>(ptr)             # <<<<<<<<<<<<<<
 * 
 *     def get_input_stensors(self):
*/
    __pyx_v_self->c_ptr = ((yirage::threadblock::TBOperator *)__pyx_v_ptr);
  }
  __pyx_L3:;

  /* "yirage/_cython/core.pyx":561
 *     cdef CppTBOperator* c_ptr # Hold a CppTBOperator instance
 * 
 *     cdef inline _set_operator(self, op):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if op is None:
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBOperator._set_operator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":569
 *             self.c_ptr = <CppTBOperator*>(ptr)
 * 
 *     def get_input_stensors(self):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* cinputs[1024]
 *         num = self.c_ptr.get_input_stensors(cinputs)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_12CyTBOperator_1get_input_stensors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_12CyTBOperator_1get_input_stensors = {"get_input_stensors", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyTBOperator_1get_input_stensors, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_12CyTBOperator_1get_input_stensors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_input_stensors (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_input_stensors", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_input_stensors", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_12CyTBOperator_get_input_stensors(((struct __pyx_obj_6yirage_4core_CyTBOperator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_12CyTBOperator_get_input_stensors(struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_self) {
  yirage::threadblock::STensor *__pyx_v_cinputs[0x400];
  int __pyx_v_num;
  PyObject *__pyx_v_inputs = NULL;
  int __pyx_v_i;
  PyObject *__pyx_v_ptr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_input_stensors", 0);

  /* "yirage/_cython/core.pyx":571
 *     def get_input_stensors(self):
 *         cdef CppSTensor* cinputs[1024]
 *         num = self.c_ptr.get_input_stensors(cinputs)             # <<<<<<<<<<<<<<
 *         inputs = list()
 *         for i in range(num):
*/
  __pyx_v_num = __pyx_v_self->c_ptr->get_input_stensors(__pyx_v_cinputs);

  /* "yirage/_cython/core.pyx":572
 *         cdef CppSTensor* cinputs[1024]
 *         num = self.c_ptr.get_input_stensors(cinputs)
 *         inputs = list()             # <<<<<<<<<<<<<<
 *         for i in range(num):
 *             ptr = ctypes.cast(<unsigned long long>cinputs[i], ctypes.c_void_p)
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 572, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_inputs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":573
 *         num = self.c_ptr.get_input_stensors(cinputs)
 *         inputs = list()
 *         for i in range(num):             # <<<<<<<<<<<<<<
 *             ptr = ctypes.cast(<unsigned long long>cinputs[i], ctypes.c_void_p)
 *             inputs.append(STensor(ptr))
*/
  __pyx_t_2 = __pyx_v_num;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "yirage/_cython/core.pyx":574
 *         inputs = list()
 *         for i in range(num):
 *             ptr = ctypes.cast(<unsigned long long>cinputs[i], ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *             inputs.append(STensor(ptr))
 *         return inputs
*/
    __pyx_t_5 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)(__pyx_v_cinputs[__pyx_v_i]))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 574, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_10 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      assert(__pyx_t_5);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);
      __pyx_t_10 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_6, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_10, (3-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 574, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_ptr, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "yirage/_cython/core.pyx":575
 *         for i in range(num):
 *             ptr = ctypes.cast(<unsigned long long>cinputs[i], ctypes.c_void_p)
 *             inputs.append(STensor(ptr))             # <<<<<<<<<<<<<<
 *         return inputs
 * 
*/
    __pyx_t_7 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
    __pyx_t_9 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
    __pyx_t_10 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_ptr};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 575, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_1);
    }
    __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_inputs, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 575, __pyx_L1_error)
    __Pyx_DECREF((PyObject *)__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "yirage/_cython/core.pyx":576
 *             ptr = ctypes.cast(<unsigned long long>cinputs[i], ctypes.c_void_p)
 *             inputs.append(STensor(ptr))
 *         return inputs             # <<<<<<<<<<<<<<
 * 
 *     def get_output_stensors(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_inputs);
  __pyx_r = __pyx_v_inputs;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":569
 *             self.c_ptr = <CppTBOperator*>(ptr)
 * 
 *     def get_input_stensors(self):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* cinputs[1024]
 *         num = self.c_ptr.get_input_stensors(cinputs)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("yirage.core.CyTBOperator.get_input_stensors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_inputs);
  __Pyx_XDECREF(__pyx_v_ptr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":578
 *         return inputs
 * 
 *     def get_output_stensors(self):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* coutputs[1024]
 *         num = self.c_ptr.get_output_stensors(coutputs)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_12CyTBOperator_3get_output_stensors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_12CyTBOperator_3get_output_stensors = {"get_output_stensors", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyTBOperator_3get_output_stensors, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_12CyTBOperator_3get_output_stensors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_output_stensors (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_output_stensors", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_output_stensors", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_12CyTBOperator_2get_output_stensors(((struct __pyx_obj_6yirage_4core_CyTBOperator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_12CyTBOperator_2get_output_stensors(struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_self) {
  yirage::threadblock::STensor *__pyx_v_coutputs[0x400];
  int __pyx_v_num;
  PyObject *__pyx_v_outputs = NULL;
  int __pyx_v_i;
  PyObject *__pyx_v_ptr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_output_stensors", 0);

  /* "yirage/_cython/core.pyx":580
 *     def get_output_stensors(self):
 *         cdef CppSTensor* coutputs[1024]
 *         num = self.c_ptr.get_output_stensors(coutputs)             # <<<<<<<<<<<<<<
 *         outputs = list()
 *         for i in range(num):
*/
  __pyx_v_num = __pyx_v_self->c_ptr->get_output_stensors(__pyx_v_coutputs);

  /* "yirage/_cython/core.pyx":581
 *         cdef CppSTensor* coutputs[1024]
 *         num = self.c_ptr.get_output_stensors(coutputs)
 *         outputs = list()             # <<<<<<<<<<<<<<
 *         for i in range(num):
 *             ptr = ctypes.cast(<unsigned long long>coutputs[i], ctypes.c_void_p)
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 581, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_outputs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":582
 *         num = self.c_ptr.get_output_stensors(coutputs)
 *         outputs = list()
 *         for i in range(num):             # <<<<<<<<<<<<<<
 *             ptr = ctypes.cast(<unsigned long long>coutputs[i], ctypes.c_void_p)
 *             outputs.append(STensor(ptr))
*/
  __pyx_t_2 = __pyx_v_num;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "yirage/_cython/core.pyx":583
 *         outputs = list()
 *         for i in range(num):
 *             ptr = ctypes.cast(<unsigned long long>coutputs[i], ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *             outputs.append(STensor(ptr))
 *         return outputs
*/
    __pyx_t_5 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)(__pyx_v_coutputs[__pyx_v_i]))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 583, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_10 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      assert(__pyx_t_5);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);
      __pyx_t_10 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_6, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_10, (3-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 583, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_ptr, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "yirage/_cython/core.pyx":584
 *         for i in range(num):
 *             ptr = ctypes.cast(<unsigned long long>coutputs[i], ctypes.c_void_p)
 *             outputs.append(STensor(ptr))             # <<<<<<<<<<<<<<
 *         return outputs
 * 
*/
    __pyx_t_7 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
    __pyx_t_9 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
    __pyx_t_10 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_ptr};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 584, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_1);
    }
    __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_outputs, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 584, __pyx_L1_error)
    __Pyx_DECREF((PyObject *)__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "yirage/_cython/core.pyx":585
 *             ptr = ctypes.cast(<unsigned long long>coutputs[i], ctypes.c_void_p)
 *             outputs.append(STensor(ptr))
 *         return outputs             # <<<<<<<<<<<<<<
 * 
 *     property op_type:
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_outputs);
  __pyx_r = __pyx_v_outputs;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":578
 *         return inputs
 * 
 *     def get_output_stensors(self):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* coutputs[1024]
 *         num = self.c_ptr.get_output_stensors(coutputs)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("yirage.core.CyTBOperator.get_output_stensors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_outputs);
  __Pyx_XDECREF(__pyx_v_ptr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":588
 * 
 *     property op_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_12CyTBOperator_7op_type_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_12CyTBOperator_7op_type_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_12CyTBOperator_7op_type___get__(((struct __pyx_obj_6yirage_4core_CyTBOperator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_12CyTBOperator_7op_type___get__(struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  size_t __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":589
 *     property op_type:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  __pyx_t_1 = (__pyx_v_self->c_ptr == NULL);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":590
 *         def __get__(self):
 *             if self.c_ptr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return get_tb_operator_type_string(int(self.c_ptr.op_type))
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":589
 *     property op_type:
 *         def __get__(self):
 *             if self.c_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  }

  /* "yirage/_cython/core.pyx":592
 *                 return None
 *             else:
 *                 return get_tb_operator_type_string(int(self.c_ptr.op_type))             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(self, op):
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_get_tb_operator_type_string); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    __Pyx_INCREF((PyObject *)(&PyLong_Type));
    __pyx_t_7 = ((PyObject *)(&PyLong_Type)); 
    __pyx_t_8 = __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_TBOperatorType(__pyx_v_self->c_ptr->op_type); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 592, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_t_8};
      __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 592, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    }
    __pyx_t_9 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
      assert(__pyx_t_3);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
      __pyx_t_9 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_5};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_9, (2-__pyx_t_9) | (__pyx_t_9*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 592, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":588
 * 
 *     property op_type:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_ptr == NULL:
 *                 return None
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("yirage.core.CyTBOperator.op_type.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":594
 *                 return get_tb_operator_type_string(int(self.c_ptr.op_type))
 * 
 *     def __cinit__(self, op):             # <<<<<<<<<<<<<<
 *         self._set_operator(op)
 * 
*/

/* Python wrapper */
static int __pyx_pw_6yirage_4core_12CyTBOperator_5__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6yirage_4core_12CyTBOperator_5__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_op = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_op,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 594, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 594, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 594, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, i); __PYX_ERR(0, 594, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 594, __pyx_L3_error)
    }
    __pyx_v_op = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 594, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBOperator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_12CyTBOperator_4__cinit__(((struct __pyx_obj_6yirage_4core_CyTBOperator *)__pyx_v_self), __pyx_v_op);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6yirage_4core_12CyTBOperator_4__cinit__(struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_self, PyObject *__pyx_v_op) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "yirage/_cython/core.pyx":595
 * 
 *     def __cinit__(self, op):
 *         self._set_operator(op)             # <<<<<<<<<<<<<<
 * 
 * cdef class CyTBInputOp(CyTBOperator):
*/
  __pyx_t_1 = __pyx_f_6yirage_4core_12CyTBOperator__set_operator(__pyx_v_self, __pyx_v_op); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 595, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":594
 *                 return get_tb_operator_type_string(int(self.c_ptr.op_type))
 * 
 *     def __cinit__(self, op):             # <<<<<<<<<<<<<<
 *         self._set_operator(op)
 * 
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yirage.core.CyTBOperator.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_12CyTBOperator_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_12CyTBOperator_7__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyTBOperator_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_12CyTBOperator_7__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_12CyTBOperator_6__reduce_cython__(((struct __pyx_obj_6yirage_4core_CyTBOperator *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_12CyTBOperator_6__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.CyTBOperator.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_12CyTBOperator_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_12CyTBOperator_9__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyTBOperator_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_12CyTBOperator_9__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBOperator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_12CyTBOperator_8__setstate_cython__(((struct __pyx_obj_6yirage_4core_CyTBOperator *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_12CyTBOperator_8__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.CyTBOperator.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":600
 *     cdef CppTBInputOp* c_input_ptr
 * 
 *     def __cinit__(self, op):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if op is None:
*/

/* Python wrapper */
static int __pyx_pw_6yirage_4core_11CyTBInputOp_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6yirage_4core_11CyTBInputOp_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_op = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_op,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 600, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 600, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 600, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, i); __PYX_ERR(0, 600, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 600, __pyx_L3_error)
    }
    __pyx_v_op = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 600, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBInputOp.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_11CyTBInputOp___cinit__(((struct __pyx_obj_6yirage_4core_CyTBInputOp *)__pyx_v_self), __pyx_v_op);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6yirage_4core_11CyTBInputOp___cinit__(struct __pyx_obj_6yirage_4core_CyTBInputOp *__pyx_v_self, PyObject *__pyx_v_op) {
  unsigned PY_LONG_LONG __pyx_v_ptr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  unsigned PY_LONG_LONG __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "yirage/_cython/core.pyx":602
 *     def __cinit__(self, op):
 *         cdef unsigned long long ptr
 *         if op is None:             # <<<<<<<<<<<<<<
 *             self.c_input_ptr = <CppTBInputOp*>(NULL)
 *         else:
*/
  __pyx_t_1 = (__pyx_v_op == Py_None);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":603
 *         cdef unsigned long long ptr
 *         if op is None:
 *             self.c_input_ptr = <CppTBInputOp*>(NULL)             # <<<<<<<<<<<<<<
 *         else:
 *             ptr = ctypes.cast(op, ctypes.c_void_p).value
*/
    __pyx_v_self->c_input_ptr = ((yirage::threadblock::TBInputOp *)NULL);

    /* "yirage/_cython/core.pyx":602
 *     def __cinit__(self, op):
 *         cdef unsigned long long ptr
 *         if op is None:             # <<<<<<<<<<<<<<
 *             self.c_input_ptr = <CppTBInputOp*>(NULL)
 *         else:
*/
    goto __pyx_L3;
  }

  /* "yirage/_cython/core.pyx":605
 *             self.c_input_ptr = <CppTBInputOp*>(NULL)
 *         else:
 *             ptr = ctypes.cast(op, ctypes.c_void_p).value             # <<<<<<<<<<<<<<
 *             self.c_input_ptr = <CppTBInputOp*>(ptr)
 * 
*/
  /*else*/ {
    __pyx_t_3 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      assert(__pyx_t_3);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
      __pyx_t_7 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_op, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 605, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(__pyx_t_5); if (unlikely((__pyx_t_8 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 605, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_ptr = __pyx_t_8;

    /* "yirage/_cython/core.pyx":606
 *         else:
 *             ptr = ctypes.cast(op, ctypes.c_void_p).value
 *             self.c_input_ptr = <CppTBInputOp*>(ptr)             # <<<<<<<<<<<<<<
 * 
 *     property input_map:
*/
    __pyx_v_self->c_input_ptr = ((yirage::threadblock::TBInputOp *)__pyx_v_ptr);
  }
  __pyx_L3:;

  /* "yirage/_cython/core.pyx":600
 *     cdef CppTBInputOp* c_input_ptr
 * 
 *     def __cinit__(self, op):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if op is None:
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBInputOp.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":609
 * 
 *     property input_map:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_input_ptr == NULL:
 *                 return None
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_11CyTBInputOp_9input_map_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_11CyTBInputOp_9input_map_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_11CyTBInputOp_9input_map___get__(((struct __pyx_obj_6yirage_4core_CyTBInputOp *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_11CyTBInputOp_9input_map___get__(struct __pyx_obj_6yirage_4core_CyTBInputOp *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":610
 *     property input_map:
 *         def __get__(self):
 *             if self.c_input_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  __pyx_t_1 = (__pyx_v_self->c_input_ptr == NULL);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":611
 *         def __get__(self):
 *             if self.c_input_ptr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return {
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":610
 *     property input_map:
 *         def __get__(self):
 *             if self.c_input_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  }

  /* "yirage/_cython/core.pyx":613
 *                 return None
 *             else:
 *                 return {             # <<<<<<<<<<<<<<
 *                     "x": self.c_input_ptr.input_map.x,
 *                     "y": self.c_input_ptr.input_map.y,
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);

    /* "yirage/_cython/core.pyx":614
 *             else:
 *                 return {
 *                     "x": self.c_input_ptr.input_map.x,             # <<<<<<<<<<<<<<
 *                     "y": self.c_input_ptr.input_map.y,
 *                     "z": self.c_input_ptr.input_map.z
*/
    __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyLong_From_int(__pyx_v_self->c_input_ptr->input_map.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_x, __pyx_t_3) < 0) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "yirage/_cython/core.pyx":615
 *                 return {
 *                     "x": self.c_input_ptr.input_map.x,
 *                     "y": self.c_input_ptr.input_map.y,             # <<<<<<<<<<<<<<
 *                     "z": self.c_input_ptr.input_map.z
 *                 }
*/
    __pyx_t_3 = __Pyx_PyLong_From_int(__pyx_v_self->c_input_ptr->input_map.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 615, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_y, __pyx_t_3) < 0) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "yirage/_cython/core.pyx":616
 *                     "x": self.c_input_ptr.input_map.x,
 *                     "y": self.c_input_ptr.input_map.y,
 *                     "z": self.c_input_ptr.input_map.z             # <<<<<<<<<<<<<<
 *                 }
 * 
*/
    __pyx_t_3 = __Pyx_PyLong_From_int(__pyx_v_self->c_input_ptr->input_map.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 616, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_z, __pyx_t_3) < 0) __PYX_ERR(0, 614, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":609
 * 
 *     property input_map:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_input_ptr == NULL:
 *                 return None
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("yirage.core.CyTBInputOp.input_map.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":620
 * 
 *     property forloop_dim:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_input_ptr == NULL:
 *                 return None
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_11CyTBInputOp_11forloop_dim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_11CyTBInputOp_11forloop_dim_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_11CyTBInputOp_11forloop_dim___get__(((struct __pyx_obj_6yirage_4core_CyTBInputOp *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_11CyTBInputOp_11forloop_dim___get__(struct __pyx_obj_6yirage_4core_CyTBInputOp *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":621
 *     property forloop_dim:
 *         def __get__(self):
 *             if self.c_input_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  __pyx_t_1 = (__pyx_v_self->c_input_ptr == NULL);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":622
 *         def __get__(self):
 *             if self.c_input_ptr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.c_input_ptr.forloop_dim
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":621
 *     property forloop_dim:
 *         def __get__(self):
 *             if self.c_input_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  }

  /* "yirage/_cython/core.pyx":624
 *                 return None
 *             else:
 *                 return self.c_input_ptr.forloop_dim             # <<<<<<<<<<<<<<
 * 
 *     property dtensor_guid:
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_self->c_input_ptr->forloop_dim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 624, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":620
 * 
 *     property forloop_dim:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_input_ptr == NULL:
 *                 return None
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.CyTBInputOp.forloop_dim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":627
 * 
 *     property dtensor_guid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_input_ptr == NULL:
 *                 return None
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_11CyTBInputOp_12dtensor_guid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_11CyTBInputOp_12dtensor_guid_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_11CyTBInputOp_12dtensor_guid___get__(((struct __pyx_obj_6yirage_4core_CyTBInputOp *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_11CyTBInputOp_12dtensor_guid___get__(struct __pyx_obj_6yirage_4core_CyTBInputOp *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":628
 *     property dtensor_guid:
 *         def __get__(self):
 *             if self.c_input_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  __pyx_t_1 = (__pyx_v_self->c_input_ptr == NULL);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":629
 *         def __get__(self):
 *             if self.c_input_ptr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.c_input_ptr.get_dtensor_guid()
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":628
 *     property dtensor_guid:
 *         def __get__(self):
 *             if self.c_input_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  }

  /* "yirage/_cython/core.pyx":631
 *                 return None
 *             else:
 *                 return self.c_input_ptr.get_dtensor_guid()             # <<<<<<<<<<<<<<
 * 
 * cdef class CyTBOutputOp(CyTBOperator):
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_FromSize_t(__pyx_v_self->c_input_ptr->get_dtensor_guid()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 631, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":627
 * 
 *     property dtensor_guid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_input_ptr == NULL:
 *                 return None
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.CyTBInputOp.dtensor_guid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_11CyTBInputOp_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_11CyTBInputOp_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_11CyTBInputOp_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_11CyTBInputOp_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_11CyTBInputOp_2__reduce_cython__(((struct __pyx_obj_6yirage_4core_CyTBInputOp *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_11CyTBInputOp_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBInputOp *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.CyTBInputOp.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_11CyTBInputOp_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_11CyTBInputOp_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_11CyTBInputOp_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_11CyTBInputOp_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBInputOp.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_11CyTBInputOp_4__setstate_cython__(((struct __pyx_obj_6yirage_4core_CyTBInputOp *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_11CyTBInputOp_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBInputOp *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.CyTBInputOp.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":636
 *     cdef CppTBOutputOp* c_output_ptr
 * 
 *     def __cinit__(self, op):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if op is None:
*/

/* Python wrapper */
static int __pyx_pw_6yirage_4core_12CyTBOutputOp_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6yirage_4core_12CyTBOutputOp_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_op = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_op,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 636, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 636, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 636, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, i); __PYX_ERR(0, 636, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 636, __pyx_L3_error)
    }
    __pyx_v_op = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 636, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBOutputOp.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_12CyTBOutputOp___cinit__(((struct __pyx_obj_6yirage_4core_CyTBOutputOp *)__pyx_v_self), __pyx_v_op);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6yirage_4core_12CyTBOutputOp___cinit__(struct __pyx_obj_6yirage_4core_CyTBOutputOp *__pyx_v_self, PyObject *__pyx_v_op) {
  unsigned PY_LONG_LONG __pyx_v_ptr;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  unsigned PY_LONG_LONG __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "yirage/_cython/core.pyx":638
 *     def __cinit__(self, op):
 *         cdef unsigned long long ptr
 *         if op is None:             # <<<<<<<<<<<<<<
 *             self.c_output_ptr = <CppTBOutputOp*>(NULL)
 *         else:
*/
  __pyx_t_1 = (__pyx_v_op == Py_None);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":639
 *         cdef unsigned long long ptr
 *         if op is None:
 *             self.c_output_ptr = <CppTBOutputOp*>(NULL)             # <<<<<<<<<<<<<<
 *         else:
 *             ptr = ctypes.cast(op, ctypes.c_void_p).value
*/
    __pyx_v_self->c_output_ptr = ((yirage::threadblock::TBOutputOp *)NULL);

    /* "yirage/_cython/core.pyx":638
 *     def __cinit__(self, op):
 *         cdef unsigned long long ptr
 *         if op is None:             # <<<<<<<<<<<<<<
 *             self.c_output_ptr = <CppTBOutputOp*>(NULL)
 *         else:
*/
    goto __pyx_L3;
  }

  /* "yirage/_cython/core.pyx":641
 *             self.c_output_ptr = <CppTBOutputOp*>(NULL)
 *         else:
 *             ptr = ctypes.cast(op, ctypes.c_void_p).value             # <<<<<<<<<<<<<<
 *             self.c_output_ptr = <CppTBOutputOp*>(ptr)
 * 
*/
  /*else*/ {
    __pyx_t_3 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      assert(__pyx_t_3);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
      __pyx_t_7 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_op, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 641, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(__pyx_t_5); if (unlikely((__pyx_t_8 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 641, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_ptr = __pyx_t_8;

    /* "yirage/_cython/core.pyx":642
 *         else:
 *             ptr = ctypes.cast(op, ctypes.c_void_p).value
 *             self.c_output_ptr = <CppTBOutputOp*>(ptr)             # <<<<<<<<<<<<<<
 * 
 *     property output_map:
*/
    __pyx_v_self->c_output_ptr = ((yirage::threadblock::TBOutputOp *)__pyx_v_ptr);
  }
  __pyx_L3:;

  /* "yirage/_cython/core.pyx":636
 *     cdef CppTBOutputOp* c_output_ptr
 * 
 *     def __cinit__(self, op):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         if op is None:
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBOutputOp.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":645
 * 
 *     property output_map:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_output_ptr == NULL:
 *                 return None
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_12CyTBOutputOp_10output_map_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_12CyTBOutputOp_10output_map_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_12CyTBOutputOp_10output_map___get__(((struct __pyx_obj_6yirage_4core_CyTBOutputOp *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_12CyTBOutputOp_10output_map___get__(struct __pyx_obj_6yirage_4core_CyTBOutputOp *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":646
 *     property output_map:
 *         def __get__(self):
 *             if self.c_output_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  __pyx_t_1 = (__pyx_v_self->c_output_ptr == NULL);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":647
 *         def __get__(self):
 *             if self.c_output_ptr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return {
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":646
 *     property output_map:
 *         def __get__(self):
 *             if self.c_output_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  }

  /* "yirage/_cython/core.pyx":649
 *                 return None
 *             else:
 *                 return {             # <<<<<<<<<<<<<<
 *                     "x": self.c_output_ptr.output_map.x,
 *                     "y": self.c_output_ptr.output_map.y,
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);

    /* "yirage/_cython/core.pyx":650
 *             else:
 *                 return {
 *                     "x": self.c_output_ptr.output_map.x,             # <<<<<<<<<<<<<<
 *                     "y": self.c_output_ptr.output_map.y,
 *                     "z": self.c_output_ptr.output_map.z
*/
    __pyx_t_2 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 650, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyLong_From_int(__pyx_v_self->c_output_ptr->output_map.x); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 650, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_x, __pyx_t_3) < 0) __PYX_ERR(0, 650, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "yirage/_cython/core.pyx":651
 *                 return {
 *                     "x": self.c_output_ptr.output_map.x,
 *                     "y": self.c_output_ptr.output_map.y,             # <<<<<<<<<<<<<<
 *                     "z": self.c_output_ptr.output_map.z
 *                 }
*/
    __pyx_t_3 = __Pyx_PyLong_From_int(__pyx_v_self->c_output_ptr->output_map.y); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 651, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_y, __pyx_t_3) < 0) __PYX_ERR(0, 650, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "yirage/_cython/core.pyx":652
 *                     "x": self.c_output_ptr.output_map.x,
 *                     "y": self.c_output_ptr.output_map.y,
 *                     "z": self.c_output_ptr.output_map.z             # <<<<<<<<<<<<<<
 *                 }
 * 
*/
    __pyx_t_3 = __Pyx_PyLong_From_int(__pyx_v_self->c_output_ptr->output_map.z); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 652, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_z, __pyx_t_3) < 0) __PYX_ERR(0, 650, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":645
 * 
 *     property output_map:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_output_ptr == NULL:
 *                 return None
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("yirage.core.CyTBOutputOp.output_map.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":656
 * 
 *     property forloop_dim:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_output_ptr == NULL:
 *                 return None
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_12CyTBOutputOp_11forloop_dim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_12CyTBOutputOp_11forloop_dim_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_12CyTBOutputOp_11forloop_dim___get__(((struct __pyx_obj_6yirage_4core_CyTBOutputOp *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_12CyTBOutputOp_11forloop_dim___get__(struct __pyx_obj_6yirage_4core_CyTBOutputOp *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":657
 *     property forloop_dim:
 *         def __get__(self):
 *             if self.c_output_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  __pyx_t_1 = (__pyx_v_self->c_output_ptr == NULL);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":658
 *         def __get__(self):
 *             if self.c_output_ptr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.c_output_ptr.forloop_dim
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":657
 *     property forloop_dim:
 *         def __get__(self):
 *             if self.c_output_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  }

  /* "yirage/_cython/core.pyx":660
 *                 return None
 *             else:
 *                 return self.c_output_ptr.forloop_dim             # <<<<<<<<<<<<<<
 * 
 *     property dtensor_guid:
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_From_int(__pyx_v_self->c_output_ptr->forloop_dim); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 660, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":656
 * 
 *     property forloop_dim:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_output_ptr == NULL:
 *                 return None
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.CyTBOutputOp.forloop_dim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":663
 * 
 *     property dtensor_guid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_output_ptr == NULL:
 *                 return None
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_12CyTBOutputOp_12dtensor_guid_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_12CyTBOutputOp_12dtensor_guid_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_12CyTBOutputOp_12dtensor_guid___get__(((struct __pyx_obj_6yirage_4core_CyTBOutputOp *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_12CyTBOutputOp_12dtensor_guid___get__(struct __pyx_obj_6yirage_4core_CyTBOutputOp *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":664
 *     property dtensor_guid:
 *         def __get__(self):
 *             if self.c_output_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  __pyx_t_1 = (__pyx_v_self->c_output_ptr == NULL);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":665
 *         def __get__(self):
 *             if self.c_output_ptr == NULL:
 *                 return None             # <<<<<<<<<<<<<<
 *             else:
 *                 return self.c_output_ptr.get_dtensor_guid()
*/
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":664
 *     property dtensor_guid:
 *         def __get__(self):
 *             if self.c_output_ptr == NULL:             # <<<<<<<<<<<<<<
 *                 return None
 *             else:
*/
  }

  /* "yirage/_cython/core.pyx":667
 *                 return None
 *             else:
 *                 return self.c_output_ptr.get_dtensor_guid()             # <<<<<<<<<<<<<<
 * 
 * cdef class CyKNGraph:
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyLong_FromSize_t(__pyx_v_self->c_output_ptr->get_dtensor_guid()); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 667, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":663
 * 
 *     property dtensor_guid:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c_output_ptr == NULL:
 *                 return None
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.CyTBOutputOp.dtensor_guid.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_12CyTBOutputOp_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_12CyTBOutputOp_3__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyTBOutputOp_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_12CyTBOutputOp_3__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_12CyTBOutputOp_2__reduce_cython__(((struct __pyx_obj_6yirage_4core_CyTBOutputOp *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_12CyTBOutputOp_2__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBOutputOp *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.CyTBOutputOp.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_12CyTBOutputOp_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_12CyTBOutputOp_5__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyTBOutputOp_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_12CyTBOutputOp_5__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBOutputOp.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_12CyTBOutputOp_4__setstate_cython__(((struct __pyx_obj_6yirage_4core_CyTBOutputOp *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_12CyTBOutputOp_4__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBOutputOp *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.CyTBOutputOp.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":672
 *     cdef CppKNGraph *p_kgraph #Hold a CppKNGraph instance
 * 
 *     def __cinit__(self, graph = None, bool disable_fingerprint = False):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         cdef dim3 c_gpu_dim
*/

/* Python wrapper */
static int __pyx_pw_6yirage_4core_9CyKNGraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6yirage_4core_9CyKNGraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_graph = 0;
  bool __pyx_v_disable_fingerprint;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_graph,&__pyx_mstate_global->__pyx_n_u_disable_fingerprint,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 672, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 672, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 672, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 672, __pyx_L3_error)
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject *)Py_None));
    } else {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 672, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 672, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject *)Py_None));
    }
    __pyx_v_graph = values[0];
    if (values[1]) {
      __pyx_v_disable_fingerprint = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_disable_fingerprint == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 672, __pyx_L3_error)
    } else {
      __pyx_v_disable_fingerprint = ((bool)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, __pyx_nargs); __PYX_ERR(0, 672, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph___cinit__(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_graph, __pyx_v_disable_fingerprint);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6yirage_4core_9CyKNGraph___cinit__(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, PyObject *__pyx_v_graph, bool __pyx_v_disable_fingerprint) {
  unsigned PY_LONG_LONG __pyx_v_ptr;
  dim3 __pyx_v_c_gpu_dim;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  unsigned PY_LONG_LONG __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "yirage/_cython/core.pyx":675
 *         cdef unsigned long long ptr
 *         cdef dim3 c_gpu_dim
 *         if graph is None:             # <<<<<<<<<<<<<<
 *             c_gpu_dim.x = 1
 *             c_gpu_dim.y = 1
*/
  __pyx_t_1 = (__pyx_v_graph == Py_None);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":676
 *         cdef dim3 c_gpu_dim
 *         if graph is None:
 *             c_gpu_dim.x = 1             # <<<<<<<<<<<<<<
 *             c_gpu_dim.y = 1
 *             c_gpu_dim.z = 1
*/
    __pyx_v_c_gpu_dim.x = 1;

    /* "yirage/_cython/core.pyx":677
 *         if graph is None:
 *             c_gpu_dim.x = 1
 *             c_gpu_dim.y = 1             # <<<<<<<<<<<<<<
 *             c_gpu_dim.z = 1
 *             self.p_kgraph = new CppKNGraph(c_gpu_dim, disable_fingerprint)
*/
    __pyx_v_c_gpu_dim.y = 1;

    /* "yirage/_cython/core.pyx":678
 *             c_gpu_dim.x = 1
 *             c_gpu_dim.y = 1
 *             c_gpu_dim.z = 1             # <<<<<<<<<<<<<<
 *             self.p_kgraph = new CppKNGraph(c_gpu_dim, disable_fingerprint)
 *         else:
*/
    __pyx_v_c_gpu_dim.z = 1;

    /* "yirage/_cython/core.pyx":679
 *             c_gpu_dim.y = 1
 *             c_gpu_dim.z = 1
 *             self.p_kgraph = new CppKNGraph(c_gpu_dim, disable_fingerprint)             # <<<<<<<<<<<<<<
 *         else:
 *             ptr = ctypes.cast(graph, ctypes.c_void_p).value
*/
    __pyx_v_self->p_kgraph = new yirage::kernel::Graph(__pyx_v_c_gpu_dim, __pyx_v_disable_fingerprint);

    /* "yirage/_cython/core.pyx":675
 *         cdef unsigned long long ptr
 *         cdef dim3 c_gpu_dim
 *         if graph is None:             # <<<<<<<<<<<<<<
 *             c_gpu_dim.x = 1
 *             c_gpu_dim.y = 1
*/
    goto __pyx_L3;
  }

  /* "yirage/_cython/core.pyx":681
 *             self.p_kgraph = new CppKNGraph(c_gpu_dim, disable_fingerprint)
 *         else:
 *             ptr = ctypes.cast(graph, ctypes.c_void_p).value             # <<<<<<<<<<<<<<
 *             self.p_kgraph = <CppKNGraph*>(ptr)
 * 
*/
  /*else*/ {
    __pyx_t_3 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_7 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
      assert(__pyx_t_3);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
      __pyx_t_7 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_v_graph, __pyx_t_6};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 681, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(__pyx_t_5); if (unlikely((__pyx_t_8 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 681, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_ptr = __pyx_t_8;

    /* "yirage/_cython/core.pyx":682
 *         else:
 *             ptr = ctypes.cast(graph, ctypes.c_void_p).value
 *             self.p_kgraph = <CppKNGraph*>(ptr)             # <<<<<<<<<<<<<<
 * 
 *     def new_input(self, tuple dims, tuple strides, dtype : dtype = float16):
*/
    __pyx_v_self->p_kgraph = ((yirage::kernel::Graph *)__pyx_v_ptr);
  }
  __pyx_L3:;

  /* "yirage/_cython/core.pyx":672
 *     cdef CppKNGraph *p_kgraph #Hold a CppKNGraph instance
 * 
 *     def __cinit__(self, graph = None, bool disable_fingerprint = False):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         cdef dim3 c_gpu_dim
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":684
 *             self.p_kgraph = <CppKNGraph*>(ptr)
 * 
 *     def new_input(self, tuple dims, tuple strides, dtype : dtype = float16):             # <<<<<<<<<<<<<<
 *         cdef vector[int] cdims
 *         cdef vector[size_t] cstrides
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_3new_input(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_3new_input = {"new_input", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_3new_input, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_3new_input(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_dims = 0;
  PyObject *__pyx_v_strides = 0;
  PyObject *__pyx_v_dtype = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_input (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_dims,&__pyx_mstate_global->__pyx_n_u_strides,&__pyx_mstate_global->__pyx_n_u_dtype,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 684, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 684, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 684, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 684, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "new_input", 0) < 0) __PYX_ERR(0, 684, __pyx_L3_error)
      if (!values[2]) values[2] = __Pyx_NewRef(__pyx_mstate_global->__pyx_k_);
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("new_input", 0, 2, 3, i); __PYX_ERR(0, 684, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 684, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 684, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 684, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[2]) values[2] = __Pyx_NewRef(__pyx_mstate_global->__pyx_k_);
    }
    __pyx_v_dims = ((PyObject*)values[0]);
    __pyx_v_strides = ((PyObject*)values[1]);
    __pyx_v_dtype = values[2];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("new_input", 0, 2, 3, __pyx_nargs); __PYX_ERR(0, 684, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.new_input", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dims), (&PyTuple_Type), 1, "dims", 1))) __PYX_ERR(0, 684, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_strides), (&PyTuple_Type), 1, "strides", 1))) __PYX_ERR(0, 684, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_2new_input(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_dims, __pyx_v_strides, __pyx_v_dtype);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_2new_input(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, PyObject *__pyx_v_dims, PyObject *__pyx_v_strides, PyObject *__pyx_v_dtype) {
  std::vector<int>  __pyx_v_cdims;
  std::vector<size_t>  __pyx_v_cstrides;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_v_c_type = NULL;
  struct yirage::kernel::DTensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  size_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  enum yirage::type::DataType __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_input", 0);

  /* "yirage/_cython/core.pyx":687
 *         cdef vector[int] cdims
 *         cdef vector[size_t] cstrides
 *         cdims.resize(len(dims))             # <<<<<<<<<<<<<<
 *         for i in range(len(dims)):
 *             cdims[i] = dims[i]
*/
  if (unlikely(__pyx_v_dims == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 687, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_dims); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 687, __pyx_L1_error)
  try {
    __pyx_v_cdims.resize(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 687, __pyx_L1_error)
  }

  /* "yirage/_cython/core.pyx":688
 *         cdef vector[size_t] cstrides
 *         cdims.resize(len(dims))
 *         for i in range(len(dims)):             # <<<<<<<<<<<<<<
 *             cdims[i] = dims[i]
 *         cstrides.resize(len(strides))
*/
  if (unlikely(__pyx_v_dims == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 688, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_dims); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 688, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yirage/_cython/core.pyx":689
 *         cdims.resize(len(dims))
 *         for i in range(len(dims)):
 *             cdims[i] = dims[i]             # <<<<<<<<<<<<<<
 *         cstrides.resize(len(strides))
 *         for i in range(len(strides)):
*/
    if (unlikely(__pyx_v_dims == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 689, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_dims, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 0, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyLong_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 689, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    (__pyx_v_cdims[__pyx_v_i]) = __pyx_t_5;
  }

  /* "yirage/_cython/core.pyx":690
 *         for i in range(len(dims)):
 *             cdims[i] = dims[i]
 *         cstrides.resize(len(strides))             # <<<<<<<<<<<<<<
 *         for i in range(len(strides)):
 *             cstrides[i] = strides[i]
*/
  if (unlikely(__pyx_v_strides == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 690, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_strides); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 690, __pyx_L1_error)
  try {
    __pyx_v_cstrides.resize(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 690, __pyx_L1_error)
  }

  /* "yirage/_cython/core.pyx":691
 *             cdims[i] = dims[i]
 *         cstrides.resize(len(strides))
 *         for i in range(len(strides)):             # <<<<<<<<<<<<<<
 *             cstrides[i] = strides[i]
 * 
*/
  if (unlikely(__pyx_v_strides == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 691, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_strides); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 691, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yirage/_cython/core.pyx":692
 *         cstrides.resize(len(strides))
 *         for i in range(len(strides)):
 *             cstrides[i] = strides[i]             # <<<<<<<<<<<<<<
 * 
 *         c_type = convert_dtype_to_ctype(dtype)
*/
    if (unlikely(__pyx_v_strides == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 692, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_strides, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 0, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyLong_As_size_t(__pyx_t_4); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 692, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    (__pyx_v_cstrides[__pyx_v_i]) = __pyx_t_6;
  }

  /* "yirage/_cython/core.pyx":694
 *             cstrides[i] = strides[i]
 * 
 *         c_type = convert_dtype_to_ctype(dtype)             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.new_input_ptr(cdims, cstrides, c_type, DmemRowMajor)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_7 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_convert_dtype_to_ctype); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 694, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_6 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
    assert(__pyx_t_7);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_8);
    __Pyx_INCREF(__pyx_t_7);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_8, __pyx__function);
    __pyx_t_6 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_dtype};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 694, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_v_c_type = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":695
 * 
 *         c_type = convert_dtype_to_ctype(dtype)
 *         cdef CppDTensor* ptr = self.p_kgraph.new_input_ptr(cdims, cstrides, c_type, DmemRowMajor)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)
*/
  __pyx_t_9 = ((enum yirage::type::DataType)__Pyx_PyLong_As_enum__yirage_3a__3a_type_3a__3a_DataType(__pyx_v_c_type)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 695, __pyx_L1_error)
  __pyx_v_ptr = __pyx_v_self->p_kgraph->new_input_ptr(__pyx_v_cdims, __pyx_v_cstrides, __pyx_t_9, yirage::layout::DmemRowMajor);

  /* "yirage/_cython/core.pyx":696
 *         c_type = convert_dtype_to_ctype(dtype)
 *         cdef CppDTensor* ptr = self.p_kgraph.new_input_ptr(cdims, cstrides, c_type, DmemRowMajor)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return DTensor(t)
 * 
*/
  __pyx_t_8 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 696, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_6 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_10);
    assert(__pyx_t_8);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_10);
    __Pyx_INCREF(__pyx_t_8);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_10, __pyx__function);
    __pyx_t_6 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_t_7, __pyx_t_12};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 696, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_v_t = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":697
 *         cdef CppDTensor* ptr = self.p_kgraph.new_input_ptr(cdims, cstrides, c_type, DmemRowMajor)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def mark_output(self, DTensor A, tuple strides):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_10 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
  __pyx_t_12 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
  __pyx_t_6 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_v_t};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 697, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_4);
  }
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":684
 *             self.p_kgraph = <CppKNGraph*>(ptr)
 * 
 *     def new_input(self, tuple dims, tuple strides, dtype : dtype = float16):             # <<<<<<<<<<<<<<
 *         cdef vector[int] cdims
 *         cdef vector[size_t] cstrides
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.new_input", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_c_type);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":699
 *         return DTensor(t)
 * 
 *     def mark_output(self, DTensor A, tuple strides):             # <<<<<<<<<<<<<<
 *         cdef vector[size_t] cstrides
 *         if strides is None:
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_5mark_output(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_5mark_output = {"mark_output", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_5mark_output, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_5mark_output(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A = 0;
  PyObject *__pyx_v_strides = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mark_output (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_strides,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 699, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 699, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 699, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "mark_output", 0) < 0) __PYX_ERR(0, 699, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("mark_output", 1, 2, 2, i); __PYX_ERR(0, 699, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 699, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 699, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
    __pyx_v_strides = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mark_output", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 699, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.mark_output", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "A", 0))) __PYX_ERR(0, 699, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_strides), (&PyTuple_Type), 1, "strides", 1))) __PYX_ERR(0, 699, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_4mark_output(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_strides);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_4mark_output(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A, PyObject *__pyx_v_strides) {
  std::vector<size_t>  __pyx_v_cstrides;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mark_output", 0);

  /* "yirage/_cython/core.pyx":701
 *     def mark_output(self, DTensor A, tuple strides):
 *         cdef vector[size_t] cstrides
 *         if strides is None:             # <<<<<<<<<<<<<<
 *             cstrides.resize(0)
 *         else:
*/
  __pyx_t_1 = (__pyx_v_strides == ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":702
 *         cdef vector[size_t] cstrides
 *         if strides is None:
 *             cstrides.resize(0)             # <<<<<<<<<<<<<<
 *         else:
 *             cstrides.resize(len(strides))
*/
    try {
      __pyx_v_cstrides.resize(0);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 702, __pyx_L1_error)
    }

    /* "yirage/_cython/core.pyx":701
 *     def mark_output(self, DTensor A, tuple strides):
 *         cdef vector[size_t] cstrides
 *         if strides is None:             # <<<<<<<<<<<<<<
 *             cstrides.resize(0)
 *         else:
*/
    goto __pyx_L3;
  }

  /* "yirage/_cython/core.pyx":704
 *             cstrides.resize(0)
 *         else:
 *             cstrides.resize(len(strides))             # <<<<<<<<<<<<<<
 *             for i in range(len(strides)):
 *                 cstrides[i] = strides[i]
*/
  /*else*/ {
    if (unlikely(__pyx_v_strides == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 704, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v_strides); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 704, __pyx_L1_error)
    try {
      __pyx_v_cstrides.resize(__pyx_t_2);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 704, __pyx_L1_error)
    }

    /* "yirage/_cython/core.pyx":705
 *         else:
 *             cstrides.resize(len(strides))
 *             for i in range(len(strides)):             # <<<<<<<<<<<<<<
 *                 cstrides[i] = strides[i]
 *         self.p_kgraph.mark_output(A.c_ptr, cstrides)
*/
    if (unlikely(__pyx_v_strides == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 705, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v_strides); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 705, __pyx_L1_error)
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "yirage/_cython/core.pyx":706
 *             cstrides.resize(len(strides))
 *             for i in range(len(strides)):
 *                 cstrides[i] = strides[i]             # <<<<<<<<<<<<<<
 *         self.p_kgraph.mark_output(A.c_ptr, cstrides)
 * 
*/
      if (unlikely(__pyx_v_strides == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 706, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_strides, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 0, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 706, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = __Pyx_PyLong_As_size_t(__pyx_t_5); if (unlikely((__pyx_t_6 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 706, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_cstrides[__pyx_v_i]) = __pyx_t_6;
    }
  }
  __pyx_L3:;

  /* "yirage/_cython/core.pyx":707
 *             for i in range(len(strides)):
 *                 cstrides[i] = strides[i]
 *         self.p_kgraph.mark_output(A.c_ptr, cstrides)             # <<<<<<<<<<<<<<
 * 
 *     def matmul(self, DTensor A, DTensor B):
*/
  __pyx_v_self->p_kgraph->mark_output(__pyx_v_A->c_ptr, __pyx_v_cstrides);

  /* "yirage/_cython/core.pyx":699
 *         return DTensor(t)
 * 
 *     def mark_output(self, DTensor A, tuple strides):             # <<<<<<<<<<<<<<
 *         cdef vector[size_t] cstrides
 *         if strides is None:
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.mark_output", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":709
 *         self.p_kgraph.mark_output(A.c_ptr, cstrides)
 * 
 *     def matmul(self, DTensor A, DTensor B):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.matmul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_7matmul(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_7matmul = {"matmul", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_7matmul, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_7matmul(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A = 0;
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_B = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("matmul (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_B,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 709, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 709, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 709, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "matmul", 0) < 0) __PYX_ERR(0, 709, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("matmul", 1, 2, 2, i); __PYX_ERR(0, 709, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 709, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 709, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
    __pyx_v_B = ((struct __pyx_obj_6yirage_4core_DTensor *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("matmul", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 709, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.matmul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "A", 0))) __PYX_ERR(0, 709, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "B", 0))) __PYX_ERR(0, 709, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_6matmul(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_B);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_6matmul(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_B) {
  struct yirage::kernel::DTensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("matmul", 0);

  /* "yirage/_cython/core.pyx":710
 * 
 *     def matmul(self, DTensor A, DTensor B):
 *         cdef CppDTensor* ptr = self.p_kgraph.matmul(A.c_ptr, B.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_kgraph->matmul(__pyx_v_A->c_ptr, __pyx_v_B->c_ptr);

  /* "yirage/_cython/core.pyx":711
 *     def matmul(self, DTensor A, DTensor B):
 *         cdef CppDTensor* ptr = self.p_kgraph.matmul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return DTensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 711, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 711, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":712
 *         cdef CppDTensor* ptr = self.p_kgraph.matmul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def reduction(self, DTensor input, int dim):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 712, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":709
 *         self.p_kgraph.mark_output(A.c_ptr, cstrides)
 * 
 *     def matmul(self, DTensor A, DTensor B):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.matmul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.matmul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":714
 *         return DTensor(t)
 * 
 *     def reduction(self, DTensor input, int dim):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.reduction(input.c_ptr, dim, 1)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_9reduction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_9reduction = {"reduction", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_9reduction, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_9reduction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input = 0;
  int __pyx_v_dim;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reduction (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_input,&__pyx_mstate_global->__pyx_n_u_dim,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 714, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 714, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 714, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "reduction", 0) < 0) __PYX_ERR(0, 714, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("reduction", 1, 2, 2, i); __PYX_ERR(0, 714, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 714, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 714, __pyx_L3_error)
    }
    __pyx_v_input = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
    __pyx_v_dim = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_dim == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 714, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reduction", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 714, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.reduction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "input", 0))) __PYX_ERR(0, 714, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_8reduction(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_input, __pyx_v_dim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_8reduction(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input, int __pyx_v_dim) {
  struct yirage::kernel::DTensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reduction", 0);

  /* "yirage/_cython/core.pyx":715
 * 
 *     def reduction(self, DTensor input, int dim):
 *         cdef CppDTensor* ptr = self.p_kgraph.reduction(input.c_ptr, dim, 1)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_kgraph->reduction(__pyx_v_input->c_ptr, __pyx_v_dim, 1);

  /* "yirage/_cython/core.pyx":716
 *     def reduction(self, DTensor input, int dim):
 *         cdef CppDTensor* ptr = self.p_kgraph.reduction(input.c_ptr, dim, 1)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return DTensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 716, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 716, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":717
 *         cdef CppDTensor* ptr = self.p_kgraph.reduction(input.c_ptr, dim, 1)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def rms_norm(self, DTensor input, tuple normalized_shape):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 717, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":714
 *         return DTensor(t)
 * 
 *     def reduction(self, DTensor input, int dim):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.reduction(input.c_ptr, dim, 1)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.reduction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":719
 *         return DTensor(t)
 * 
 *     def rms_norm(self, DTensor input, tuple normalized_shape):             # <<<<<<<<<<<<<<
 *         cdef vector[int] cshape
 *         cshape.resize(len(normalized_shape))
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_11rms_norm(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_11rms_norm = {"rms_norm", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_11rms_norm, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_11rms_norm(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input = 0;
  PyObject *__pyx_v_normalized_shape = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rms_norm (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_input,&__pyx_mstate_global->__pyx_n_u_normalized_shape,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 719, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 719, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 719, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "rms_norm", 0) < 0) __PYX_ERR(0, 719, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("rms_norm", 1, 2, 2, i); __PYX_ERR(0, 719, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 719, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 719, __pyx_L3_error)
    }
    __pyx_v_input = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
    __pyx_v_normalized_shape = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rms_norm", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 719, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.rms_norm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "input", 0))) __PYX_ERR(0, 719, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_normalized_shape), (&PyTuple_Type), 1, "normalized_shape", 1))) __PYX_ERR(0, 719, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_10rms_norm(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_input, __pyx_v_normalized_shape);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_10rms_norm(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input, PyObject *__pyx_v_normalized_shape) {
  std::vector<int>  __pyx_v_cshape;
  Py_ssize_t __pyx_v_i;
  struct yirage::kernel::DTensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rms_norm", 0);

  /* "yirage/_cython/core.pyx":721
 *     def rms_norm(self, DTensor input, tuple normalized_shape):
 *         cdef vector[int] cshape
 *         cshape.resize(len(normalized_shape))             # <<<<<<<<<<<<<<
 *         for i in range(len(normalized_shape)):
 *             cshape[i] = normalized_shape[i]
*/
  if (unlikely(__pyx_v_normalized_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 721, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_normalized_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 721, __pyx_L1_error)
  try {
    __pyx_v_cshape.resize(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 721, __pyx_L1_error)
  }

  /* "yirage/_cython/core.pyx":722
 *         cdef vector[int] cshape
 *         cshape.resize(len(normalized_shape))
 *         for i in range(len(normalized_shape)):             # <<<<<<<<<<<<<<
 *             cshape[i] = normalized_shape[i]
 *         cdef CppDTensor* ptr = self.p_kgraph.rms_norm(input.c_ptr, cshape)
*/
  if (unlikely(__pyx_v_normalized_shape == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 722, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_normalized_shape); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 722, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yirage/_cython/core.pyx":723
 *         cshape.resize(len(normalized_shape))
 *         for i in range(len(normalized_shape)):
 *             cshape[i] = normalized_shape[i]             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.rms_norm(input.c_ptr, cshape)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
    if (unlikely(__pyx_v_normalized_shape == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 723, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_normalized_shape, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 0, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyLong_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 723, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    (__pyx_v_cshape[__pyx_v_i]) = __pyx_t_5;
  }

  /* "yirage/_cython/core.pyx":724
 *         for i in range(len(normalized_shape)):
 *             cshape[i] = normalized_shape[i]
 *         cdef CppDTensor* ptr = self.p_kgraph.rms_norm(input.c_ptr, cshape)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_kgraph->rms_norm(__pyx_v_input->c_ptr, __pyx_v_cshape);

  /* "yirage/_cython/core.pyx":725
 *             cshape[i] = normalized_shape[i]
 *         cdef CppDTensor* ptr = self.p_kgraph.rms_norm(input.c_ptr, cshape)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return DTensor(t)
 * 
*/
  __pyx_t_6 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 725, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_11 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
    assert(__pyx_t_6);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_8);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_8, __pyx__function);
    __pyx_t_11 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_t_7, __pyx_t_10};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_11, (3-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 725, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_v_t = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":726
 *         cdef CppDTensor* ptr = self.p_kgraph.rms_norm(input.c_ptr, cshape)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def exp(self, DTensor input):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
  __pyx_t_10 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
  __pyx_t_11 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_t};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 726, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_4);
  }
  __pyx_r = ((PyObject *)__pyx_t_4);
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":719
 *         return DTensor(t)
 * 
 *     def rms_norm(self, DTensor input, tuple normalized_shape):             # <<<<<<<<<<<<<<
 *         cdef vector[int] cshape
 *         cshape.resize(len(normalized_shape))
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.rms_norm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":728
 *         return DTensor(t)
 * 
 *     def exp(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.exp(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_13exp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_13exp = {"exp", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_13exp, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_13exp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exp (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_input,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 728, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 728, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "exp", 0) < 0) __PYX_ERR(0, 728, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("exp", 1, 1, 1, i); __PYX_ERR(0, 728, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 728, __pyx_L3_error)
    }
    __pyx_v_input = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("exp", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 728, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "input", 0))) __PYX_ERR(0, 728, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_12exp(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_input);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_12exp(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input) {
  struct yirage::kernel::DTensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exp", 0);

  /* "yirage/_cython/core.pyx":729
 * 
 *     def exp(self, DTensor input):
 *         cdef CppDTensor* ptr = self.p_kgraph.exp(input.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_kgraph->exp(__pyx_v_input->c_ptr);

  /* "yirage/_cython/core.pyx":730
 *     def exp(self, DTensor input):
 *         cdef CppDTensor* ptr = self.p_kgraph.exp(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return DTensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 730, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 730, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":731
 *         cdef CppDTensor* ptr = self.p_kgraph.exp(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def silu(self, DTensor input):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 731, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":728
 *         return DTensor(t)
 * 
 *     def exp(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.exp(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":733
 *         return DTensor(t)
 * 
 *     def silu(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.silu(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_15silu(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_15silu = {"silu", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_15silu, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_15silu(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("silu (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_input,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 733, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 733, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "silu", 0) < 0) __PYX_ERR(0, 733, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("silu", 1, 1, 1, i); __PYX_ERR(0, 733, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 733, __pyx_L3_error)
    }
    __pyx_v_input = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("silu", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 733, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.silu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "input", 0))) __PYX_ERR(0, 733, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_14silu(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_input);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_14silu(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input) {
  struct yirage::kernel::DTensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("silu", 0);

  /* "yirage/_cython/core.pyx":734
 * 
 *     def silu(self, DTensor input):
 *         cdef CppDTensor* ptr = self.p_kgraph.silu(input.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_kgraph->silu(__pyx_v_input->c_ptr);

  /* "yirage/_cython/core.pyx":735
 *     def silu(self, DTensor input):
 *         cdef CppDTensor* ptr = self.p_kgraph.silu(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return DTensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 735, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 735, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":736
 *         cdef CppDTensor* ptr = self.p_kgraph.silu(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def gelu(self, DTensor input):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 736, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":733
 *         return DTensor(t)
 * 
 *     def silu(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.silu(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.silu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":738
 *         return DTensor(t)
 * 
 *     def gelu(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.gelu(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_17gelu(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_17gelu = {"gelu", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_17gelu, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_17gelu(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gelu (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_input,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 738, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 738, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "gelu", 0) < 0) __PYX_ERR(0, 738, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("gelu", 1, 1, 1, i); __PYX_ERR(0, 738, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 738, __pyx_L3_error)
    }
    __pyx_v_input = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("gelu", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 738, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.gelu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "input", 0))) __PYX_ERR(0, 738, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_16gelu(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_input);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_16gelu(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input) {
  struct yirage::kernel::DTensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("gelu", 0);

  /* "yirage/_cython/core.pyx":739
 * 
 *     def gelu(self, DTensor input):
 *         cdef CppDTensor* ptr = self.p_kgraph.gelu(input.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_kgraph->gelu(__pyx_v_input->c_ptr);

  /* "yirage/_cython/core.pyx":740
 *     def gelu(self, DTensor input):
 *         cdef CppDTensor* ptr = self.p_kgraph.gelu(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return DTensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 740, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 740, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":741
 *         cdef CppDTensor* ptr = self.p_kgraph.gelu(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def relu(self, DTensor input):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 741, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":738
 *         return DTensor(t)
 * 
 *     def gelu(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.gelu(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.gelu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":743
 *         return DTensor(t)
 * 
 *     def relu(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.relu(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_19relu(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_19relu = {"relu", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_19relu, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_19relu(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("relu (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_input,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 743, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 743, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "relu", 0) < 0) __PYX_ERR(0, 743, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("relu", 1, 1, 1, i); __PYX_ERR(0, 743, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 743, __pyx_L3_error)
    }
    __pyx_v_input = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("relu", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 743, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.relu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "input", 0))) __PYX_ERR(0, 743, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_18relu(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_input);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_18relu(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input) {
  struct yirage::kernel::DTensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("relu", 0);

  /* "yirage/_cython/core.pyx":744
 * 
 *     def relu(self, DTensor input):
 *         cdef CppDTensor* ptr = self.p_kgraph.relu(input.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_kgraph->relu(__pyx_v_input->c_ptr);

  /* "yirage/_cython/core.pyx":745
 *     def relu(self, DTensor input):
 *         cdef CppDTensor* ptr = self.p_kgraph.relu(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return DTensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 745, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 745, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":746
 *         cdef CppDTensor* ptr = self.p_kgraph.relu(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def clamp(self, DTensor input, float min_val, float max_val):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 746, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":743
 *         return DTensor(t)
 * 
 *     def relu(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.relu(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.relu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":748
 *         return DTensor(t)
 * 
 *     def clamp(self, DTensor input, float min_val, float max_val):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.clamp(input.c_ptr, min_val, max_val)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_21clamp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_21clamp = {"clamp", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_21clamp, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_21clamp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input = 0;
  float __pyx_v_min_val;
  float __pyx_v_max_val;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clamp (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_input,&__pyx_mstate_global->__pyx_n_u_min_val,&__pyx_mstate_global->__pyx_n_u_max_val,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 748, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 748, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 748, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 748, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "clamp", 0) < 0) __PYX_ERR(0, 748, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("clamp", 1, 3, 3, i); __PYX_ERR(0, 748, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 748, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 748, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 748, __pyx_L3_error)
    }
    __pyx_v_input = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
    __pyx_v_min_val = __Pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_min_val == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L3_error)
    __pyx_v_max_val = __Pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_max_val == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 748, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("clamp", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 748, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.clamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "input", 0))) __PYX_ERR(0, 748, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_20clamp(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_input, __pyx_v_min_val, __pyx_v_max_val);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_20clamp(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input, float __pyx_v_min_val, float __pyx_v_max_val) {
  struct yirage::kernel::DTensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clamp", 0);

  /* "yirage/_cython/core.pyx":749
 * 
 *     def clamp(self, DTensor input, float min_val, float max_val):
 *         cdef CppDTensor* ptr = self.p_kgraph.clamp(input.c_ptr, min_val, max_val)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_kgraph->clamp(__pyx_v_input->c_ptr, __pyx_v_min_val, __pyx_v_max_val);

  /* "yirage/_cython/core.pyx":750
 *     def clamp(self, DTensor input, float min_val, float max_val):
 *         cdef CppDTensor* ptr = self.p_kgraph.clamp(input.c_ptr, min_val, max_val)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return DTensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 750, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 750, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":751
 *         cdef CppDTensor* ptr = self.p_kgraph.clamp(input.c_ptr, min_val, max_val)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def sqrt(self, DTensor input):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 751, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":748
 *         return DTensor(t)
 * 
 *     def clamp(self, DTensor input, float min_val, float max_val):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.clamp(input.c_ptr, min_val, max_val)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.clamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":753
 *         return DTensor(t)
 * 
 *     def sqrt(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.sqrt(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_23sqrt(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_23sqrt = {"sqrt", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_23sqrt, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_23sqrt(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sqrt (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_input,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 753, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 753, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "sqrt", 0) < 0) __PYX_ERR(0, 753, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("sqrt", 1, 1, 1, i); __PYX_ERR(0, 753, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 753, __pyx_L3_error)
    }
    __pyx_v_input = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sqrt", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 753, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.sqrt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "input", 0))) __PYX_ERR(0, 753, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_22sqrt(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_input);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_22sqrt(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input) {
  struct yirage::kernel::DTensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sqrt", 0);

  /* "yirage/_cython/core.pyx":754
 * 
 *     def sqrt(self, DTensor input):
 *         cdef CppDTensor* ptr = self.p_kgraph.sqrt(input.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_kgraph->sqrt(__pyx_v_input->c_ptr);

  /* "yirage/_cython/core.pyx":755
 *     def sqrt(self, DTensor input):
 *         cdef CppDTensor* ptr = self.p_kgraph.sqrt(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return DTensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 755, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 755, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":756
 *         cdef CppDTensor* ptr = self.p_kgraph.sqrt(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def square(self, DTensor input):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 756, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":753
 *         return DTensor(t)
 * 
 *     def sqrt(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.sqrt(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.sqrt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":758
 *         return DTensor(t)
 * 
 *     def square(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.square(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_25square(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_25square = {"square", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_25square, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_25square(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("square (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_input,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 758, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 758, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "square", 0) < 0) __PYX_ERR(0, 758, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("square", 1, 1, 1, i); __PYX_ERR(0, 758, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 758, __pyx_L3_error)
    }
    __pyx_v_input = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("square", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 758, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.square", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "input", 0))) __PYX_ERR(0, 758, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_24square(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_input);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_24square(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_input) {
  struct yirage::kernel::DTensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("square", 0);

  /* "yirage/_cython/core.pyx":759
 * 
 *     def square(self, DTensor input):
 *         cdef CppDTensor* ptr = self.p_kgraph.square(input.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_kgraph->square(__pyx_v_input->c_ptr);

  /* "yirage/_cython/core.pyx":760
 *     def square(self, DTensor input):
 *         cdef CppDTensor* ptr = self.p_kgraph.square(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return DTensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 760, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 760, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":761
 *         cdef CppDTensor* ptr = self.p_kgraph.square(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def add(self, DTensor A, DTensor B):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 761, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":758
 *         return DTensor(t)
 * 
 *     def square(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.square(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.square", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":763
 *         return DTensor(t)
 * 
 *     def add(self, DTensor A, DTensor B):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.add(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_27add(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_27add = {"add", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_27add, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_27add(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A = 0;
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_B = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_B,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 763, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 763, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 763, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "add", 0) < 0) __PYX_ERR(0, 763, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, i); __PYX_ERR(0, 763, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 763, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 763, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
    __pyx_v_B = ((struct __pyx_obj_6yirage_4core_DTensor *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 763, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "A", 0))) __PYX_ERR(0, 763, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "B", 0))) __PYX_ERR(0, 763, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_26add(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_B);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_26add(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_B) {
  struct yirage::kernel::DTensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);

  /* "yirage/_cython/core.pyx":764
 * 
 *     def add(self, DTensor A, DTensor B):
 *         cdef CppDTensor* ptr = self.p_kgraph.add(A.c_ptr, B.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_kgraph->add(__pyx_v_A->c_ptr, __pyx_v_B->c_ptr);

  /* "yirage/_cython/core.pyx":765
 *     def add(self, DTensor A, DTensor B):
 *         cdef CppDTensor* ptr = self.p_kgraph.add(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return DTensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 765, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 765, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":766
 *         cdef CppDTensor* ptr = self.p_kgraph.add(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def mul(self, DTensor A, DTensor B):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 766, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":763
 *         return DTensor(t)
 * 
 *     def add(self, DTensor A, DTensor B):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.add(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":768
 *         return DTensor(t)
 * 
 *     def mul(self, DTensor A, DTensor B):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.mul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_29mul(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_29mul = {"mul", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_29mul, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_29mul(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A = 0;
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_B = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mul (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_B,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 768, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 768, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 768, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "mul", 0) < 0) __PYX_ERR(0, 768, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("mul", 1, 2, 2, i); __PYX_ERR(0, 768, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 768, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 768, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
    __pyx_v_B = ((struct __pyx_obj_6yirage_4core_DTensor *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mul", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 768, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.mul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "A", 0))) __PYX_ERR(0, 768, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "B", 0))) __PYX_ERR(0, 768, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_28mul(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_B);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_28mul(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_B) {
  struct yirage::kernel::DTensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mul", 0);

  /* "yirage/_cython/core.pyx":769
 * 
 *     def mul(self, DTensor A, DTensor B):
 *         cdef CppDTensor* ptr = self.p_kgraph.mul(A.c_ptr, B.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_kgraph->mul(__pyx_v_A->c_ptr, __pyx_v_B->c_ptr);

  /* "yirage/_cython/core.pyx":770
 *     def mul(self, DTensor A, DTensor B):
 *         cdef CppDTensor* ptr = self.p_kgraph.mul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return DTensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 770, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 770, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":771
 *         cdef CppDTensor* ptr = self.p_kgraph.mul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def div(self, DTensor A, DTensor B):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 771, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":768
 *         return DTensor(t)
 * 
 *     def mul(self, DTensor A, DTensor B):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.mul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.mul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":773
 *         return DTensor(t)
 * 
 *     def div(self, DTensor A, DTensor B):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.div(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_31div(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_31div = {"div", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_31div, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_31div(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A = 0;
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_B = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("div (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_B,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 773, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 773, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 773, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "div", 0) < 0) __PYX_ERR(0, 773, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("div", 1, 2, 2, i); __PYX_ERR(0, 773, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 773, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 773, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
    __pyx_v_B = ((struct __pyx_obj_6yirage_4core_DTensor *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("div", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 773, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.div", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "A", 0))) __PYX_ERR(0, 773, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "B", 0))) __PYX_ERR(0, 773, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_30div(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_B);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_30div(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_B) {
  struct yirage::kernel::DTensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("div", 0);

  /* "yirage/_cython/core.pyx":774
 * 
 *     def div(self, DTensor A, DTensor B):
 *         cdef CppDTensor* ptr = self.p_kgraph.div(A.c_ptr, B.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_kgraph->div(__pyx_v_A->c_ptr, __pyx_v_B->c_ptr);

  /* "yirage/_cython/core.pyx":775
 *     def div(self, DTensor A, DTensor B):
 *         cdef CppDTensor* ptr = self.p_kgraph.div(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return DTensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 775, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 775, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":776
 *         cdef CppDTensor* ptr = self.p_kgraph.div(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def pow(self, DTensor A, DTensor B):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 776, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":773
 *         return DTensor(t)
 * 
 *     def div(self, DTensor A, DTensor B):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.div(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.div", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":778
 *         return DTensor(t)
 * 
 *     def pow(self, DTensor A, DTensor B):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.pow(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_33pow(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_33pow = {"pow", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_33pow, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_33pow(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A = 0;
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_B = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("pow (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_B,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 778, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 778, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 778, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "pow", 0) < 0) __PYX_ERR(0, 778, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("pow", 1, 2, 2, i); __PYX_ERR(0, 778, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 778, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 778, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
    __pyx_v_B = ((struct __pyx_obj_6yirage_4core_DTensor *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("pow", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 778, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "A", 0))) __PYX_ERR(0, 778, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "B", 0))) __PYX_ERR(0, 778, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_32pow(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_B);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_32pow(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_B) {
  struct yirage::kernel::DTensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("pow", 0);

  /* "yirage/_cython/core.pyx":779
 * 
 *     def pow(self, DTensor A, DTensor B):
 *         cdef CppDTensor* ptr = self.p_kgraph.pow(A.c_ptr, B.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_kgraph->pow(__pyx_v_A->c_ptr, __pyx_v_B->c_ptr);

  /* "yirage/_cython/core.pyx":780
 *     def pow(self, DTensor A, DTensor B):
 *         cdef CppDTensor* ptr = self.p_kgraph.pow(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return DTensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 780, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 780, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":781
 *         cdef CppDTensor* ptr = self.p_kgraph.pow(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def customized(self, list inputs, CyTBGraph bgraph):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 781, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":778
 *         return DTensor(t)
 * 
 *     def pow(self, DTensor A, DTensor B):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.pow(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.pow", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":783
 *         return DTensor(t)
 * 
 *     def customized(self, list inputs, CyTBGraph bgraph):             # <<<<<<<<<<<<<<
 *         cdef vector[const CppDTensor*] cinputs
 *         cinputs.resize(len(inputs))
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_35customized(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_35customized = {"customized", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_35customized, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_35customized(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_inputs = 0;
  struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_bgraph = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("customized (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_inputs,&__pyx_mstate_global->__pyx_n_u_bgraph,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 783, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 783, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 783, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "customized", 0) < 0) __PYX_ERR(0, 783, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("customized", 1, 2, 2, i); __PYX_ERR(0, 783, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 783, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 783, __pyx_L3_error)
    }
    __pyx_v_inputs = ((PyObject*)values[0]);
    __pyx_v_bgraph = ((struct __pyx_obj_6yirage_4core_CyTBGraph *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("customized", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 783, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.customized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inputs), (&PyList_Type), 1, "inputs", 1))) __PYX_ERR(0, 783, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bgraph), __pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, 1, "bgraph", 0))) __PYX_ERR(0, 783, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_34customized(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_inputs, __pyx_v_bgraph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_34customized(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, PyObject *__pyx_v_inputs, struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_bgraph) {
  std::vector<struct yirage::kernel::DTensor const *>  __pyx_v_cinputs;
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_t = 0;
  Py_ssize_t __pyx_v_i;
  struct yirage::kernel::DTensor *__pyx_v_coutputs[0x400];
  int __pyx_v_num_outputs;
  PyObject *__pyx_v_outputs = NULL;
  PyObject *__pyx_v_ptr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  struct yirage::kernel::DTensor *__pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  size_t __pyx_t_14;
  int __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("customized", 0);

  /* "yirage/_cython/core.pyx":785
 *     def customized(self, list inputs, CyTBGraph bgraph):
 *         cdef vector[const CppDTensor*] cinputs
 *         cinputs.resize(len(inputs))             # <<<<<<<<<<<<<<
 *         cdef DTensor t
 *         for i in range(len(inputs)):
*/
  if (unlikely(__pyx_v_inputs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 785, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_GET_SIZE(__pyx_v_inputs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 785, __pyx_L1_error)
  try {
    __pyx_v_cinputs.resize(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 785, __pyx_L1_error)
  }

  /* "yirage/_cython/core.pyx":787
 *         cinputs.resize(len(inputs))
 *         cdef DTensor t
 *         for i in range(len(inputs)):             # <<<<<<<<<<<<<<
 *             if inputs[i] is None:
 *                 cinputs[i] = NULL
*/
  if (unlikely(__pyx_v_inputs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 787, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_GET_SIZE(__pyx_v_inputs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 787, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yirage/_cython/core.pyx":788
 *         cdef DTensor t
 *         for i in range(len(inputs)):
 *             if inputs[i] is None:             # <<<<<<<<<<<<<<
 *                 cinputs[i] = NULL
 *             else:
*/
    if (unlikely(__pyx_v_inputs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 788, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_inputs, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 788, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = (__pyx_t_4 == Py_None);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_5) {

      /* "yirage/_cython/core.pyx":789
 *         for i in range(len(inputs)):
 *             if inputs[i] is None:
 *                 cinputs[i] = NULL             # <<<<<<<<<<<<<<
 *             else:
 *                 assert (type(inputs[i]) == DTensor)
*/
      (__pyx_v_cinputs[__pyx_v_i]) = NULL;

      /* "yirage/_cython/core.pyx":788
 *         cdef DTensor t
 *         for i in range(len(inputs)):
 *             if inputs[i] is None:             # <<<<<<<<<<<<<<
 *                 cinputs[i] = NULL
 *             else:
*/
      goto __pyx_L5;
    }

    /* "yirage/_cython/core.pyx":791
 *                 cinputs[i] = NULL
 *             else:
 *                 assert (type(inputs[i]) == DTensor)             # <<<<<<<<<<<<<<
 *                 t = inputs[i]
 *                 cinputs[i] = t.c_ptr
*/
    /*else*/ {
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(__pyx_assertions_enabled())) {
        if (unlikely(__pyx_v_inputs == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 791, __pyx_L1_error)
        }
        __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_inputs, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 791, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_4)), ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor), Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 791, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_5 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely((__pyx_t_5 < 0))) __PYX_ERR(0, 791, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_5)) {
          __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
          __PYX_ERR(0, 791, __pyx_L1_error)
        }
      }
      #else
      if ((1)); else __PYX_ERR(0, 791, __pyx_L1_error)
      #endif

      /* "yirage/_cython/core.pyx":792
 *             else:
 *                 assert (type(inputs[i]) == DTensor)
 *                 t = inputs[i]             # <<<<<<<<<<<<<<
 *                 cinputs[i] = t.c_ptr
 *         cdef CppDTensor* coutputs[1024]
*/
      if (unlikely(__pyx_v_inputs == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 792, __pyx_L1_error)
      }
      __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_inputs, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 792, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      if (!(likely(((__pyx_t_6) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_6, __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor))))) __PYX_ERR(0, 792, __pyx_L1_error)
      __Pyx_XDECREF_SET(__pyx_v_t, ((struct __pyx_obj_6yirage_4core_DTensor *)__pyx_t_6));
      __pyx_t_6 = 0;

      /* "yirage/_cython/core.pyx":793
 *                 assert (type(inputs[i]) == DTensor)
 *                 t = inputs[i]
 *                 cinputs[i] = t.c_ptr             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* coutputs[1024]
 *         num_outputs = self.p_kgraph.customized(cinputs, coutputs, bgraph.p_bgraph)
*/
      __pyx_t_7 = __pyx_v_t->c_ptr;
      (__pyx_v_cinputs[__pyx_v_i]) = __pyx_t_7;
    }
    __pyx_L5:;
  }

  /* "yirage/_cython/core.pyx":795
 *                 cinputs[i] = t.c_ptr
 *         cdef CppDTensor* coutputs[1024]
 *         num_outputs = self.p_kgraph.customized(cinputs, coutputs, bgraph.p_bgraph)             # <<<<<<<<<<<<<<
 *         outputs = list()
 *         for i in range(num_outputs):
*/
  __pyx_v_num_outputs = __pyx_v_self->p_kgraph->customized(__pyx_v_cinputs, __pyx_v_coutputs, __pyx_v_bgraph->p_bgraph);

  /* "yirage/_cython/core.pyx":796
 *         cdef CppDTensor* coutputs[1024]
 *         num_outputs = self.p_kgraph.customized(cinputs, coutputs, bgraph.p_bgraph)
 *         outputs = list()             # <<<<<<<<<<<<<<
 *         for i in range(num_outputs):
 *             ptr = ctypes.cast(<unsigned long long>coutputs[i], ctypes.c_void_p)
*/
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 796, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_v_outputs = ((PyObject*)__pyx_t_6);
  __pyx_t_6 = 0;

  /* "yirage/_cython/core.pyx":797
 *         num_outputs = self.p_kgraph.customized(cinputs, coutputs, bgraph.p_bgraph)
 *         outputs = list()
 *         for i in range(num_outputs):             # <<<<<<<<<<<<<<
 *             ptr = ctypes.cast(<unsigned long long>coutputs[i], ctypes.c_void_p)
 *             outputs.append(DTensor(ptr))
*/
  __pyx_t_8 = __pyx_v_num_outputs;
  __pyx_t_9 = __pyx_t_8;
  for (__pyx_t_1 = 0; __pyx_t_1 < __pyx_t_9; __pyx_t_1+=1) {
    __pyx_v_i = __pyx_t_1;

    /* "yirage/_cython/core.pyx":798
 *         outputs = list()
 *         for i in range(num_outputs):
 *             ptr = ctypes.cast(<unsigned long long>coutputs[i], ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *             outputs.append(DTensor(ptr))
 *         return outputs
*/
    __pyx_t_4 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)(__pyx_v_coutputs[__pyx_v_i]))); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 798, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_14 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_11);
      assert(__pyx_t_4);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_11, __pyx__function);
      __pyx_t_14 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_10, __pyx_t_13};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_14, (3-__pyx_t_14) | (__pyx_t_14*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 798, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_ptr, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "yirage/_cython/core.pyx":799
 *         for i in range(num_outputs):
 *             ptr = ctypes.cast(<unsigned long long>coutputs[i], ctypes.c_void_p)
 *             outputs.append(DTensor(ptr))             # <<<<<<<<<<<<<<
 *         return outputs
 * 
*/
    __pyx_t_11 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
    __pyx_t_13 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
    __pyx_t_14 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_11, __pyx_v_ptr};
      __pyx_t_6 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+__pyx_t_14, (2-__pyx_t_14) | (__pyx_t_14*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 799, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_6);
    }
    __pyx_t_15 = __Pyx_PyList_Append(__pyx_v_outputs, ((PyObject *)__pyx_t_6)); if (unlikely(__pyx_t_15 == ((int)-1))) __PYX_ERR(0, 799, __pyx_L1_error)
    __Pyx_DECREF((PyObject *)__pyx_t_6); __pyx_t_6 = 0;
  }

  /* "yirage/_cython/core.pyx":800
 *             ptr = ctypes.cast(<unsigned long long>coutputs[i], ctypes.c_void_p)
 *             outputs.append(DTensor(ptr))
 *         return outputs             # <<<<<<<<<<<<<<
 * 
 *     def generate_triton_program(self, str filepath):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_outputs);
  __pyx_r = __pyx_v_outputs;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":783
 *         return DTensor(t)
 * 
 *     def customized(self, list inputs, CyTBGraph bgraph):             # <<<<<<<<<<<<<<
 *         cdef vector[const CppDTensor*] cinputs
 *         cinputs.resize(len(inputs))
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.customized", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_outputs);
  __Pyx_XDECREF(__pyx_v_ptr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":802
 *         return outputs
 * 
 *     def generate_triton_program(self, str filepath):             # <<<<<<<<<<<<<<
 *         assert filepath is not None, "filepath cannot be empty"
 *         py_byte_string = filepath.encode('UTF-8')
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_37generate_triton_program(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_37generate_triton_program = {"generate_triton_program", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_37generate_triton_program, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_37generate_triton_program(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filepath = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_triton_program (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filepath,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 802, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 802, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "generate_triton_program", 0) < 0) __PYX_ERR(0, 802, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("generate_triton_program", 1, 1, 1, i); __PYX_ERR(0, 802, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 802, __pyx_L3_error)
    }
    __pyx_v_filepath = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate_triton_program", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 802, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.generate_triton_program", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filepath), (&PyUnicode_Type), 1, "filepath", 1))) __PYX_ERR(0, 802, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_36generate_triton_program(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_filepath);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_36generate_triton_program(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, PyObject *__pyx_v_filepath) {
  PyObject *__pyx_v_py_byte_string = NULL;
  char *__pyx_v_cfilepath;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_triton_program", 0);

  /* "yirage/_cython/core.pyx":803
 * 
 *     def generate_triton_program(self, str filepath):
 *         assert filepath is not None, "filepath cannot be empty"             # <<<<<<<<<<<<<<
 *         py_byte_string = filepath.encode('UTF-8')
 *         cdef char* cfilepath = NULL
*/
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = (__pyx_v_filepath != ((PyObject*)Py_None));
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_filepath_cannot_be_empty, 0, 0);
      __PYX_ERR(0, 803, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 803, __pyx_L1_error)
  #endif

  /* "yirage/_cython/core.pyx":804
 *     def generate_triton_program(self, str filepath):
 *         assert filepath is not None, "filepath cannot be empty"
 *         py_byte_string = filepath.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         cdef char* cfilepath = NULL
 *         cfilepath = py_byte_string
*/
  if (unlikely(__pyx_v_filepath == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 804, __pyx_L1_error)
  }
  __pyx_t_2 = PyUnicode_AsUTF8String(__pyx_v_filepath); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 804, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_py_byte_string = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":805
 *         assert filepath is not None, "filepath cannot be empty"
 *         py_byte_string = filepath.encode('UTF-8')
 *         cdef char* cfilepath = NULL             # <<<<<<<<<<<<<<
 *         cfilepath = py_byte_string
 *         self.p_kgraph.generate_triton_program(cfilepath)
*/
  __pyx_v_cfilepath = NULL;

  /* "yirage/_cython/core.pyx":806
 *         py_byte_string = filepath.encode('UTF-8')
 *         cdef char* cfilepath = NULL
 *         cfilepath = py_byte_string             # <<<<<<<<<<<<<<
 *         self.p_kgraph.generate_triton_program(cfilepath)
 * 
*/
  __pyx_t_3 = __Pyx_PyBytes_AsWritableString(__pyx_v_py_byte_string); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 806, __pyx_L1_error)
  __pyx_v_cfilepath = __pyx_t_3;

  /* "yirage/_cython/core.pyx":807
 *         cdef char* cfilepath = NULL
 *         cfilepath = py_byte_string
 *         self.p_kgraph.generate_triton_program(cfilepath)             # <<<<<<<<<<<<<<
 * 
 *     def get_input_dtensors(self):
*/
  __pyx_v_self->p_kgraph->generate_triton_program(__pyx_v_cfilepath);

  /* "yirage/_cython/core.pyx":802
 *         return outputs
 * 
 *     def generate_triton_program(self, str filepath):             # <<<<<<<<<<<<<<
 *         assert filepath is not None, "filepath cannot be empty"
 *         py_byte_string = filepath.encode('UTF-8')
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.generate_triton_program", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_byte_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":809
 *         self.p_kgraph.generate_triton_program(cfilepath)
 * 
 *     def get_input_dtensors(self):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* cinputs[1024]
 *         num = self.p_kgraph.get_input_dtensors(cinputs)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_39get_input_dtensors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_39get_input_dtensors = {"get_input_dtensors", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_39get_input_dtensors, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_39get_input_dtensors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_input_dtensors (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_input_dtensors", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_input_dtensors", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_38get_input_dtensors(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_38get_input_dtensors(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self) {
  struct yirage::kernel::DTensor *__pyx_v_cinputs[0x400];
  int __pyx_v_num;
  PyObject *__pyx_v_inputs = NULL;
  int __pyx_v_i;
  PyObject *__pyx_v_ptr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_input_dtensors", 0);

  /* "yirage/_cython/core.pyx":811
 *     def get_input_dtensors(self):
 *         cdef CppDTensor* cinputs[1024]
 *         num = self.p_kgraph.get_input_dtensors(cinputs)             # <<<<<<<<<<<<<<
 *         inputs = list()
 *         for i in range(num):
*/
  __pyx_v_num = __pyx_v_self->p_kgraph->get_input_dtensors(__pyx_v_cinputs);

  /* "yirage/_cython/core.pyx":812
 *         cdef CppDTensor* cinputs[1024]
 *         num = self.p_kgraph.get_input_dtensors(cinputs)
 *         inputs = list()             # <<<<<<<<<<<<<<
 *         for i in range(num):
 *             ptr = ctypes.cast(<unsigned long long>cinputs[i], ctypes.c_void_p)
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 812, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_inputs = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":813
 *         num = self.p_kgraph.get_input_dtensors(cinputs)
 *         inputs = list()
 *         for i in range(num):             # <<<<<<<<<<<<<<
 *             ptr = ctypes.cast(<unsigned long long>cinputs[i], ctypes.c_void_p)
 *             inputs.append(DTensor(ptr))
*/
  __pyx_t_2 = __pyx_v_num;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "yirage/_cython/core.pyx":814
 *         inputs = list()
 *         for i in range(num):
 *             ptr = ctypes.cast(<unsigned long long>cinputs[i], ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *             inputs.append(DTensor(ptr))
 *         return inputs
*/
    __pyx_t_5 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)(__pyx_v_cinputs[__pyx_v_i]))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 814, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_10 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
      assert(__pyx_t_5);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);
      __pyx_t_10 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_6, __pyx_t_9};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_10, (3-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 814, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_ptr, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "yirage/_cython/core.pyx":815
 *         for i in range(num):
 *             ptr = ctypes.cast(<unsigned long long>cinputs[i], ctypes.c_void_p)
 *             inputs.append(DTensor(ptr))             # <<<<<<<<<<<<<<
 *         return inputs
 * 
*/
    __pyx_t_7 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
    __pyx_t_9 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
    __pyx_t_10 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_v_ptr};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_9, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 815, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_1);
    }
    __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_inputs, ((PyObject *)__pyx_t_1)); if (unlikely(__pyx_t_11 == ((int)-1))) __PYX_ERR(0, 815, __pyx_L1_error)
    __Pyx_DECREF((PyObject *)__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "yirage/_cython/core.pyx":816
 *             ptr = ctypes.cast(<unsigned long long>cinputs[i], ctypes.c_void_p)
 *             inputs.append(DTensor(ptr))
 *         return inputs             # <<<<<<<<<<<<<<
 * 
 *     def get_owner_independent_hash(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_inputs);
  __pyx_r = __pyx_v_inputs;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":809
 *         self.p_kgraph.generate_triton_program(cfilepath)
 * 
 *     def get_input_dtensors(self):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* cinputs[1024]
 *         num = self.p_kgraph.get_input_dtensors(cinputs)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.get_input_dtensors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_inputs);
  __Pyx_XDECREF(__pyx_v_ptr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":818
 *         return inputs
 * 
 *     def get_owner_independent_hash(self):             # <<<<<<<<<<<<<<
 *         return self.p_kgraph.get_owner_independent_hash()
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_41get_owner_independent_hash(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_41get_owner_independent_hash = {"get_owner_independent_hash", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_41get_owner_independent_hash, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_41get_owner_independent_hash(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_owner_independent_hash (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_owner_independent_hash", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_owner_independent_hash", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_40get_owner_independent_hash(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_40get_owner_independent_hash(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_owner_independent_hash", 0);

  /* "yirage/_cython/core.pyx":819
 * 
 *     def get_owner_independent_hash(self):
 *         return self.p_kgraph.get_owner_independent_hash()             # <<<<<<<<<<<<<<
 * 
 *     # visualizer utils
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_FromSize_t(__pyx_v_self->p_kgraph->get_owner_independent_hash()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 819, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":818
 *         return inputs
 * 
 *     def get_owner_independent_hash(self):             # <<<<<<<<<<<<<<
 *         return self.p_kgraph.get_owner_independent_hash()
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.get_owner_independent_hash", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":823
 *     # visualizer utils
 * 
 *     def _kn_tensor_to_dict(self, DTensor t):             # <<<<<<<<<<<<<<
 *         return {
 *             "num_dims": t.num_dims,
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_43_kn_tensor_to_dict(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_43_kn_tensor_to_dict = {"_kn_tensor_to_dict", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_43_kn_tensor_to_dict, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_43_kn_tensor_to_dict(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_t = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_kn_tensor_to_dict (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_t,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 823, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 823, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_kn_tensor_to_dict", 0) < 0) __PYX_ERR(0, 823, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_kn_tensor_to_dict", 1, 1, 1, i); __PYX_ERR(0, 823, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 823, __pyx_L3_error)
    }
    __pyx_v_t = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_kn_tensor_to_dict", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 823, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph._kn_tensor_to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_t), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "t", 0))) __PYX_ERR(0, 823, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_42_kn_tensor_to_dict(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_t);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_42_kn_tensor_to_dict(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_t) {
  PyObject *__pyx_7genexpr__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_kn_tensor_to_dict", 0);

  /* "yirage/_cython/core.pyx":824
 * 
 *     def _kn_tensor_to_dict(self, DTensor t):
 *         return {             # <<<<<<<<<<<<<<
 *             "num_dims": t.num_dims,
 *             "dim": [t.dim(i) for i in range(t.num_dims)],
*/
  __Pyx_XDECREF(__pyx_r);

  /* "yirage/_cython/core.pyx":825
 *     def _kn_tensor_to_dict(self, DTensor t):
 *         return {
 *             "num_dims": t.num_dims,             # <<<<<<<<<<<<<<
 *             "dim": [t.dim(i) for i in range(t.num_dims)],
 *             "guid": t.guid
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_t), __pyx_mstate_global->__pyx_n_u_num_dims); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_num_dims, __pyx_t_2) < 0) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  { /* enter inner scope */

    /* "yirage/_cython/core.pyx":826
 *         return {
 *             "num_dims": t.num_dims,
 *             "dim": [t.dim(i) for i in range(t.num_dims)],             # <<<<<<<<<<<<<<
 *             "guid": t.guid
 *         }
*/
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 826, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_5 = __pyx_builtin_range; 
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_t), __pyx_mstate_global->__pyx_n_u_num_dims); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 826, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 826, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5);
      __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 826, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 826, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 826, __pyx_L5_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_8);
          ++__pyx_t_8;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 826, __pyx_L5_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_8));
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_8);
          #endif
          ++__pyx_t_8;
        }
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 826, __pyx_L5_error)
      } else {
        __pyx_t_3 = __pyx_t_9(__pyx_t_5);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 826, __pyx_L5_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_7genexpr__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_6 = ((PyObject *)__pyx_v_t);
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_7 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_7genexpr__pyx_v_i};
        __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_dim, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 826, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_3);
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 826, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i); __pyx_7genexpr__pyx_v_i = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i); __pyx_7genexpr__pyx_v_i = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_dim, __pyx_t_2) < 0) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":827
 *             "num_dims": t.num_dims,
 *             "dim": [t.dim(i) for i in range(t.num_dims)],
 *             "guid": t.guid             # <<<<<<<<<<<<<<
 *         }
 * 
*/
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_t), __pyx_mstate_global->__pyx_n_u_guid); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 827, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_guid, __pyx_t_2) < 0) __PYX_ERR(0, 825, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":823
 *     # visualizer utils
 * 
 *     def _kn_tensor_to_dict(self, DTensor t):             # <<<<<<<<<<<<<<
 *         return {
 *             "num_dims": t.num_dims,
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNGraph._kn_tensor_to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_7genexpr__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":830
 *         }
 * 
 *     def _tb_tensor_to_dict(self, STensor t):             # <<<<<<<<<<<<<<
 *         return {
 *             "num_dims": t.num_dims,
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_45_tb_tensor_to_dict(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_45_tb_tensor_to_dict = {"_tb_tensor_to_dict", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_45_tb_tensor_to_dict, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_45_tb_tensor_to_dict(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_t = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_tb_tensor_to_dict (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_t,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 830, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 830, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_tb_tensor_to_dict", 0) < 0) __PYX_ERR(0, 830, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_tb_tensor_to_dict", 1, 1, 1, i); __PYX_ERR(0, 830, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 830, __pyx_L3_error)
    }
    __pyx_v_t = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_tb_tensor_to_dict", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 830, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph._tb_tensor_to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_t), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "t", 0))) __PYX_ERR(0, 830, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_44_tb_tensor_to_dict(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_t);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_44_tb_tensor_to_dict(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_t) {
  PyObject *__pyx_8genexpr1__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_tb_tensor_to_dict", 0);

  /* "yirage/_cython/core.pyx":831
 * 
 *     def _tb_tensor_to_dict(self, STensor t):
 *         return {             # <<<<<<<<<<<<<<
 *             "num_dims": t.num_dims,
 *             "dim": [t.dim(i) for i in range(t.num_dims)],
*/
  __Pyx_XDECREF(__pyx_r);

  /* "yirage/_cython/core.pyx":832
 *     def _tb_tensor_to_dict(self, STensor t):
 *         return {
 *             "num_dims": t.num_dims,             # <<<<<<<<<<<<<<
 *             "dim": [t.dim(i) for i in range(t.num_dims)],
 *             "guid": t.guid
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_t), __pyx_mstate_global->__pyx_n_u_num_dims); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_num_dims, __pyx_t_2) < 0) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  { /* enter inner scope */

    /* "yirage/_cython/core.pyx":833
 *         return {
 *             "num_dims": t.num_dims,
 *             "dim": [t.dim(i) for i in range(t.num_dims)],             # <<<<<<<<<<<<<<
 *             "guid": t.guid
 *         }
*/
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 833, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_builtin_range);
    __pyx_t_5 = __pyx_builtin_range; 
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_t), __pyx_mstate_global->__pyx_n_u_num_dims); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 833, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_t_6};
      __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 833, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_5 = __pyx_t_3; __Pyx_INCREF(__pyx_t_5);
      __pyx_t_8 = 0;
      __pyx_t_9 = NULL;
    } else {
      __pyx_t_8 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 833, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 833, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_9)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 833, __pyx_L5_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_8);
          ++__pyx_t_8;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 833, __pyx_L5_error)
            #endif
            if (__pyx_t_8 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_8));
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_8);
          #endif
          ++__pyx_t_8;
        }
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 833, __pyx_L5_error)
      } else {
        __pyx_t_3 = __pyx_t_9(__pyx_t_5);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 833, __pyx_L5_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_8genexpr1__pyx_v_i, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_6 = ((PyObject *)__pyx_v_t);
      __Pyx_INCREF(__pyx_t_6);
      __pyx_t_7 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_8genexpr1__pyx_v_i};
        __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_dim, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 833, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_3);
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 833, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i); __pyx_8genexpr1__pyx_v_i = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i); __pyx_8genexpr1__pyx_v_i = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_dim, __pyx_t_2) < 0) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":834
 *             "num_dims": t.num_dims,
 *             "dim": [t.dim(i) for i in range(t.num_dims)],
 *             "guid": t.guid             # <<<<<<<<<<<<<<
 *         }
 * 
*/
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_t), __pyx_mstate_global->__pyx_n_u_guid); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 834, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_guid, __pyx_t_2) < 0) __PYX_ERR(0, 832, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":830
 *         }
 * 
 *     def _tb_tensor_to_dict(self, STensor t):             # <<<<<<<<<<<<<<
 *         return {
 *             "num_dims": t.num_dims,
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyKNGraph._tb_tensor_to_dict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr1__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":837
 *         }
 * 
 *     def _get_tb_operator_info(self, CyTBOperator op):             # <<<<<<<<<<<<<<
 *         ans = {
 *             "op_type": op.op_type,
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_47_get_tb_operator_info(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_47_get_tb_operator_info = {"_get_tb_operator_info", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_47_get_tb_operator_info, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_47_get_tb_operator_info(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_op = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_tb_operator_info (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_op,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 837, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 837, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_get_tb_operator_info", 0) < 0) __PYX_ERR(0, 837, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_get_tb_operator_info", 1, 1, 1, i); __PYX_ERR(0, 837, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 837, __pyx_L3_error)
    }
    __pyx_v_op = ((struct __pyx_obj_6yirage_4core_CyTBOperator *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_get_tb_operator_info", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 837, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph._get_tb_operator_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBOperator, 1, "op", 0))) __PYX_ERR(0, 837, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_46_get_tb_operator_info(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_op);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_46_get_tb_operator_info(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_CyTBOperator *__pyx_v_op) {
  PyObject *__pyx_v_ans = NULL;
  struct __pyx_obj_6yirage_4core_CyTBInputOp *__pyx_v_input_op = NULL;
  struct __pyx_obj_6yirage_4core_CyTBOutputOp *__pyx_v_output_op = NULL;
  PyObject *__pyx_8genexpr2__pyx_v_t = NULL;
  PyObject *__pyx_8genexpr3__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_tb_operator_info", 0);

  /* "yirage/_cython/core.pyx":839
 *     def _get_tb_operator_info(self, CyTBOperator op):
 *         ans = {
 *             "op_type": op.op_type,             # <<<<<<<<<<<<<<
 *             "input_tensors": [self._tb_tensor_to_dict(t) for t in op.get_input_stensors()],
 *             "output_tensors": [self._tb_tensor_to_dict(t) for t in op.get_output_stensors()],
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_op), __pyx_mstate_global->__pyx_n_u_op_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_op_type, __pyx_t_2) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  { /* enter inner scope */

    /* "yirage/_cython/core.pyx":840
 *         ans = {
 *             "op_type": op.op_type,
 *             "input_tensors": [self._tb_tensor_to_dict(t) for t in op.get_input_stensors()],             # <<<<<<<<<<<<<<
 *             "output_tensors": [self._tb_tensor_to_dict(t) for t in op.get_output_stensors()],
 *         }
*/
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 840, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = ((PyObject *)__pyx_v_op);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_5 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_input_stensors, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 840, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
      __pyx_t_4 = __pyx_t_3; __Pyx_INCREF(__pyx_t_4);
      __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 840, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 840, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 840, __pyx_L5_error)
            #endif
            if (__pyx_t_6 >= __pyx_temp) break;
          }
          __pyx_t_3 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_6);
          ++__pyx_t_6;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 840, __pyx_L5_error)
            #endif
            if (__pyx_t_6 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_3 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6));
          #else
          __pyx_t_3 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_6);
          #endif
          ++__pyx_t_6;
        }
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 840, __pyx_L5_error)
      } else {
        __pyx_t_3 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_3)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 840, __pyx_L5_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_8genexpr2__pyx_v_t, __pyx_t_3);
      __pyx_t_3 = 0;
      __pyx_t_8 = ((PyObject *)__pyx_v_self);
      __Pyx_INCREF(__pyx_t_8);
      __pyx_t_5 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_8genexpr2__pyx_v_t};
        __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_tb_tensor_to_dict, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 840, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_3);
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_3))) __PYX_ERR(0, 840, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_t); __pyx_8genexpr2__pyx_v_t = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_t); __pyx_8genexpr2__pyx_v_t = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_input_tensors, __pyx_t_2) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  { /* enter inner scope */

    /* "yirage/_cython/core.pyx":841
 *             "op_type": op.op_type,
 *             "input_tensors": [self._tb_tensor_to_dict(t) for t in op.get_input_stensors()],
 *             "output_tensors": [self._tb_tensor_to_dict(t) for t in op.get_output_stensors()],             # <<<<<<<<<<<<<<
 *         }
 *         if "input" in op.op_type:
*/
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 841, __pyx_L12_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = ((PyObject *)__pyx_v_op);
    __Pyx_INCREF(__pyx_t_3);
    __pyx_t_5 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
      __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_output_stensors, __pyx_callargs+__pyx_t_5, (1-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 841, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_3 = __pyx_t_4; __Pyx_INCREF(__pyx_t_3);
      __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 841, __pyx_L12_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_7 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_3); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 841, __pyx_L12_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_3))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 841, __pyx_L12_error)
            #endif
            if (__pyx_t_6 >= __pyx_temp) break;
          }
          __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_3, __pyx_t_6);
          ++__pyx_t_6;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_3);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 841, __pyx_L12_error)
            #endif
            if (__pyx_t_6 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6));
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_3, __pyx_t_6);
          #endif
          ++__pyx_t_6;
        }
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 841, __pyx_L12_error)
      } else {
        __pyx_t_4 = __pyx_t_7(__pyx_t_3);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 841, __pyx_L12_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_8genexpr3__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_8 = ((PyObject *)__pyx_v_self);
      __Pyx_INCREF(__pyx_t_8);
      __pyx_t_5 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_8genexpr3__pyx_v_t};
        __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_tb_tensor_to_dict, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 841, __pyx_L12_error)
        __Pyx_GOTREF(__pyx_t_4);
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_2, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 841, __pyx_L12_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_t); __pyx_8genexpr3__pyx_v_t = 0;
    goto __pyx_L16_exit_scope;
    __pyx_L12_error:;
    __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_t); __pyx_8genexpr3__pyx_v_t = 0;
    goto __pyx_L1_error;
    __pyx_L16_exit_scope:;
  } /* exit inner scope */
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_output_tensors, __pyx_t_2) < 0) __PYX_ERR(0, 839, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_ans = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":843
 *             "output_tensors": [self._tb_tensor_to_dict(t) for t in op.get_output_stensors()],
 *         }
 *         if "input" in op.op_type:             # <<<<<<<<<<<<<<
 *             input_op = CyTBInputOp(ctypes.cast(<unsigned long long>(op.c_ptr), ctypes.c_void_p))
 *             ans["input_map"] = input_op.input_map
*/
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_op), __pyx_mstate_global->__pyx_n_u_op_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_n_u_input, __pyx_t_1, Py_EQ)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 843, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_9) {

    /* "yirage/_cython/core.pyx":844
 *         }
 *         if "input" in op.op_type:
 *             input_op = CyTBInputOp(ctypes.cast(<unsigned long long>(op.c_ptr), ctypes.c_void_p))             # <<<<<<<<<<<<<<
 *             ans["input_map"] = input_op.input_map
 *             ans["forloop_dim"] = input_op.forloop_dim
*/
    __pyx_t_2 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBInputOp);
    __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBInputOp); 
    __pyx_t_8 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_10 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_op->c_ptr)); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 844, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_5 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_11))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_11);
      assert(__pyx_t_8);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_11);
      __Pyx_INCREF(__pyx_t_8);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_11, __pyx__function);
      __pyx_t_5 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_8, __pyx_t_10, __pyx_t_13};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_11, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_4};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 844, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_1);
    }
    __pyx_v_input_op = ((struct __pyx_obj_6yirage_4core_CyTBInputOp *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "yirage/_cython/core.pyx":845
 *         if "input" in op.op_type:
 *             input_op = CyTBInputOp(ctypes.cast(<unsigned long long>(op.c_ptr), ctypes.c_void_p))
 *             ans["input_map"] = input_op.input_map             # <<<<<<<<<<<<<<
 *             ans["forloop_dim"] = input_op.forloop_dim
 *             ans["dtensor"] = {
*/
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_input_op), __pyx_mstate_global->__pyx_n_u_input_map); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_ans, __pyx_mstate_global->__pyx_n_u_input_map, __pyx_t_1) < 0))) __PYX_ERR(0, 845, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "yirage/_cython/core.pyx":846
 *             input_op = CyTBInputOp(ctypes.cast(<unsigned long long>(op.c_ptr), ctypes.c_void_p))
 *             ans["input_map"] = input_op.input_map
 *             ans["forloop_dim"] = input_op.forloop_dim             # <<<<<<<<<<<<<<
 *             ans["dtensor"] = {
 *                 "guid": input_op.dtensor_guid
*/
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_input_op), __pyx_mstate_global->__pyx_n_u_forloop_dim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 846, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_ans, __pyx_mstate_global->__pyx_n_u_forloop_dim, __pyx_t_1) < 0))) __PYX_ERR(0, 846, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "yirage/_cython/core.pyx":848
 *             ans["forloop_dim"] = input_op.forloop_dim
 *             ans["dtensor"] = {
 *                 "guid": input_op.dtensor_guid             # <<<<<<<<<<<<<<
 *             }
 *         elif "output" in op.op_type:
*/
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_input_op), __pyx_mstate_global->__pyx_n_u_dtensor_guid); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 848, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_guid, __pyx_t_3) < 0) __PYX_ERR(0, 848, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "yirage/_cython/core.pyx":847
 *             ans["input_map"] = input_op.input_map
 *             ans["forloop_dim"] = input_op.forloop_dim
 *             ans["dtensor"] = {             # <<<<<<<<<<<<<<
 *                 "guid": input_op.dtensor_guid
 *             }
*/
    if (unlikely((PyDict_SetItem(__pyx_v_ans, __pyx_mstate_global->__pyx_n_u_dtensor, __pyx_t_1) < 0))) __PYX_ERR(0, 847, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "yirage/_cython/core.pyx":843
 *             "output_tensors": [self._tb_tensor_to_dict(t) for t in op.get_output_stensors()],
 *         }
 *         if "input" in op.op_type:             # <<<<<<<<<<<<<<
 *             input_op = CyTBInputOp(ctypes.cast(<unsigned long long>(op.c_ptr), ctypes.c_void_p))
 *             ans["input_map"] = input_op.input_map
*/
    goto __pyx_L17;
  }

  /* "yirage/_cython/core.pyx":850
 *                 "guid": input_op.dtensor_guid
 *             }
 *         elif "output" in op.op_type:             # <<<<<<<<<<<<<<
 *             output_op = CyTBOutputOp(ctypes.cast(<unsigned long long>(op.c_ptr), ctypes.c_void_p))
 *             ans["output_map"] = output_op.output_map
*/
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_op), __pyx_mstate_global->__pyx_n_u_op_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_9 = (__Pyx_PySequence_ContainsTF(__pyx_mstate_global->__pyx_n_u_output, __pyx_t_1, Py_EQ)); if (unlikely((__pyx_t_9 < 0))) __PYX_ERR(0, 850, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_9) {

    /* "yirage/_cython/core.pyx":851
 *             }
 *         elif "output" in op.op_type:
 *             output_op = CyTBOutputOp(ctypes.cast(<unsigned long long>(op.c_ptr), ctypes.c_void_p))             # <<<<<<<<<<<<<<
 *             ans["output_map"] = output_op.output_map
 *             ans["forloop_dim"] = output_op.forloop_dim
*/
    __pyx_t_3 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBOutputOp);
    __pyx_t_4 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBOutputOp); 
    __pyx_t_11 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_13, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_op->c_ptr)); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 851, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_5 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_10))) {
      __pyx_t_11 = PyMethod_GET_SELF(__pyx_t_10);
      assert(__pyx_t_11);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_10);
      __Pyx_INCREF(__pyx_t_11);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_10, __pyx__function);
      __pyx_t_5 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_11, __pyx_t_13, __pyx_t_12};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_5, (3-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 851, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __pyx_t_5 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_t_2};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 851, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_1);
    }
    __pyx_v_output_op = ((struct __pyx_obj_6yirage_4core_CyTBOutputOp *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "yirage/_cython/core.pyx":852
 *         elif "output" in op.op_type:
 *             output_op = CyTBOutputOp(ctypes.cast(<unsigned long long>(op.c_ptr), ctypes.c_void_p))
 *             ans["output_map"] = output_op.output_map             # <<<<<<<<<<<<<<
 *             ans["forloop_dim"] = output_op.forloop_dim
 *             ans["dtensor"] = {
*/
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_output_op), __pyx_mstate_global->__pyx_n_u_output_map); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 852, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_ans, __pyx_mstate_global->__pyx_n_u_output_map, __pyx_t_1) < 0))) __PYX_ERR(0, 852, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "yirage/_cython/core.pyx":853
 *             output_op = CyTBOutputOp(ctypes.cast(<unsigned long long>(op.c_ptr), ctypes.c_void_p))
 *             ans["output_map"] = output_op.output_map
 *             ans["forloop_dim"] = output_op.forloop_dim             # <<<<<<<<<<<<<<
 *             ans["dtensor"] = {
 *                 "guid": output_op.dtensor_guid
*/
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_output_op), __pyx_mstate_global->__pyx_n_u_forloop_dim); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 853, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    if (unlikely((PyDict_SetItem(__pyx_v_ans, __pyx_mstate_global->__pyx_n_u_forloop_dim, __pyx_t_1) < 0))) __PYX_ERR(0, 853, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "yirage/_cython/core.pyx":855
 *             ans["forloop_dim"] = output_op.forloop_dim
 *             ans["dtensor"] = {
 *                 "guid": output_op.dtensor_guid             # <<<<<<<<<<<<<<
 *             }
 *         return ans
*/
    __pyx_t_1 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_output_op), __pyx_mstate_global->__pyx_n_u_dtensor_guid); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 855, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_guid, __pyx_t_4) < 0) __PYX_ERR(0, 855, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "yirage/_cython/core.pyx":854
 *             ans["output_map"] = output_op.output_map
 *             ans["forloop_dim"] = output_op.forloop_dim
 *             ans["dtensor"] = {             # <<<<<<<<<<<<<<
 *                 "guid": output_op.dtensor_guid
 *             }
*/
    if (unlikely((PyDict_SetItem(__pyx_v_ans, __pyx_mstate_global->__pyx_n_u_dtensor, __pyx_t_1) < 0))) __PYX_ERR(0, 854, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "yirage/_cython/core.pyx":850
 *                 "guid": input_op.dtensor_guid
 *             }
 *         elif "output" in op.op_type:             # <<<<<<<<<<<<<<
 *             output_op = CyTBOutputOp(ctypes.cast(<unsigned long long>(op.c_ptr), ctypes.c_void_p))
 *             ans["output_map"] = output_op.output_map
*/
  }
  __pyx_L17:;

  /* "yirage/_cython/core.pyx":857
 *                 "guid": output_op.dtensor_guid
 *             }
 *         return ans             # <<<<<<<<<<<<<<
 * 
 *     def _get_bgraph_info(self, CyKNOperator op):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ans);
  __pyx_r = __pyx_v_ans;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":837
 *         }
 * 
 *     def _get_tb_operator_info(self, CyTBOperator op):             # <<<<<<<<<<<<<<
 *         ans = {
 *             "op_type": op.op_type,
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("yirage.core.CyKNGraph._get_tb_operator_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_ans);
  __Pyx_XDECREF((PyObject *)__pyx_v_input_op);
  __Pyx_XDECREF((PyObject *)__pyx_v_output_op);
  __Pyx_XDECREF(__pyx_8genexpr2__pyx_v_t);
  __Pyx_XDECREF(__pyx_8genexpr3__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":859
 *         return ans
 * 
 *     def _get_bgraph_info(self, CyKNOperator op):             # <<<<<<<<<<<<<<
 *         cop = CyKNCustomizedOp(ctypes.cast(<unsigned long long>(op.c_ptr), ctypes.c_void_p))
 *         bgraph = cop.get_bgraph()
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_49_get_bgraph_info(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_49_get_bgraph_info = {"_get_bgraph_info", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_49_get_bgraph_info, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_49_get_bgraph_info(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_op = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_bgraph_info (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_op,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 859, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 859, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_get_bgraph_info", 0) < 0) __PYX_ERR(0, 859, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_get_bgraph_info", 1, 1, 1, i); __PYX_ERR(0, 859, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 859, __pyx_L3_error)
    }
    __pyx_v_op = ((struct __pyx_obj_6yirage_4core_CyKNOperator *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_get_bgraph_info", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 859, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph._get_bgraph_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNOperator, 1, "op", 0))) __PYX_ERR(0, 859, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_48_get_bgraph_info(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_op);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_48_get_bgraph_info(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_op) {
  struct __pyx_obj_6yirage_4core_CyKNCustomizedOp *__pyx_v_cop = NULL;
  PyObject *__pyx_v_bgraph = NULL;
  PyObject *__pyx_8genexpr4__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  Py_ssize_t __pyx_t_11;
  PyObject *(*__pyx_t_12)(PyObject *);
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_bgraph_info", 0);

  /* "yirage/_cython/core.pyx":860
 * 
 *     def _get_bgraph_info(self, CyKNOperator op):
 *         cop = CyKNCustomizedOp(ctypes.cast(<unsigned long long>(op.c_ptr), ctypes.c_void_p))             # <<<<<<<<<<<<<<
 *         bgraph = cop.get_bgraph()
 *         return {
*/
  __pyx_t_2 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNCustomizedOp);
  __pyx_t_3 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNCustomizedOp); 
  __pyx_t_5 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_op->c_ptr)); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 860, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_10 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_7))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_7);
    assert(__pyx_t_5);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_7);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_7, __pyx__function);
    __pyx_t_10 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_6, __pyx_t_9};
    __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_10, (3-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  }
  __pyx_t_10 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_t_4};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 860, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_v_cop = ((struct __pyx_obj_6yirage_4core_CyKNCustomizedOp *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":861
 *     def _get_bgraph_info(self, CyKNOperator op):
 *         cop = CyKNCustomizedOp(ctypes.cast(<unsigned long long>(op.c_ptr), ctypes.c_void_p))
 *         bgraph = cop.get_bgraph()             # <<<<<<<<<<<<<<
 *         return {
 *             "grid_dim": bgraph.grid_dim,
*/
  __pyx_t_3 = ((PyObject *)__pyx_v_cop);
  __Pyx_INCREF(__pyx_t_3);
  __pyx_t_10 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, NULL};
    __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_bgraph, __pyx_callargs+__pyx_t_10, (1-__pyx_t_10) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 861, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_bgraph = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":862
 *         cop = CyKNCustomizedOp(ctypes.cast(<unsigned long long>(op.c_ptr), ctypes.c_void_p))
 *         bgraph = cop.get_bgraph()
 *         return {             # <<<<<<<<<<<<<<
 *             "grid_dim": bgraph.grid_dim,
 *             "forloop_range": bgraph.forloop_range,
*/
  __Pyx_XDECREF(__pyx_r);

  /* "yirage/_cython/core.pyx":863
 *         bgraph = cop.get_bgraph()
 *         return {
 *             "grid_dim": bgraph.grid_dim,             # <<<<<<<<<<<<<<
 *             "forloop_range": bgraph.forloop_range,
 *             "operators": [self._get_tb_operator_info(i) for i in bgraph.operators]
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_bgraph, __pyx_mstate_global->__pyx_n_u_grid_dim); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_grid_dim, __pyx_t_3) < 0) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":864
 *         return {
 *             "grid_dim": bgraph.grid_dim,
 *             "forloop_range": bgraph.forloop_range,             # <<<<<<<<<<<<<<
 *             "operators": [self._get_tb_operator_info(i) for i in bgraph.operators]
 *         }
*/
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_bgraph, __pyx_mstate_global->__pyx_n_u_forloop_range); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 864, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_forloop_range, __pyx_t_3) < 0) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  { /* enter inner scope */

    /* "yirage/_cython/core.pyx":865
 *             "grid_dim": bgraph.grid_dim,
 *             "forloop_range": bgraph.forloop_range,
 *             "operators": [self._get_tb_operator_info(i) for i in bgraph.operators]             # <<<<<<<<<<<<<<
 *         }
 * 
*/
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 865, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_bgraph, __pyx_mstate_global->__pyx_n_u_operators); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 865, __pyx_L5_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_2 = __pyx_t_4; __Pyx_INCREF(__pyx_t_2);
      __pyx_t_11 = 0;
      __pyx_t_12 = NULL;
    } else {
      __pyx_t_11 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 865, __pyx_L5_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_12 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_2); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 865, __pyx_L5_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_12)) {
        if (likely(PyList_CheckExact(__pyx_t_2))) {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 865, __pyx_L5_error)
            #endif
            if (__pyx_t_11 >= __pyx_temp) break;
          }
          __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_2, __pyx_t_11);
          ++__pyx_t_11;
        } else {
          {
            Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_2);
            #if !CYTHON_ASSUME_SAFE_SIZE
            if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 865, __pyx_L5_error)
            #endif
            if (__pyx_t_11 >= __pyx_temp) break;
          }
          #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
          __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_11));
          #else
          __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_2, __pyx_t_11);
          #endif
          ++__pyx_t_11;
        }
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 865, __pyx_L5_error)
      } else {
        __pyx_t_4 = __pyx_t_12(__pyx_t_2);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 865, __pyx_L5_error)
            PyErr_Clear();
          }
          break;
        }
      }
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_8genexpr4__pyx_v_i, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_7 = ((PyObject *)__pyx_v_self);
      __Pyx_INCREF(__pyx_t_7);
      __pyx_t_10 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_7, __pyx_8genexpr4__pyx_v_i};
        __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_tb_operator_info, __pyx_callargs+__pyx_t_10, (2-__pyx_t_10) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 865, __pyx_L5_error)
        __Pyx_GOTREF(__pyx_t_4);
      }
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 865, __pyx_L5_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_i); __pyx_8genexpr4__pyx_v_i = 0;
    goto __pyx_L9_exit_scope;
    __pyx_L5_error:;
    __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_i); __pyx_8genexpr4__pyx_v_i = 0;
    goto __pyx_L1_error;
    __pyx_L9_exit_scope:;
  } /* exit inner scope */
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_operators, __pyx_t_3) < 0) __PYX_ERR(0, 863, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":859
 *         return ans
 * 
 *     def _get_bgraph_info(self, CyKNOperator op):             # <<<<<<<<<<<<<<
 *         cop = CyKNCustomizedOp(ctypes.cast(<unsigned long long>(op.c_ptr), ctypes.c_void_p))
 *         bgraph = cop.get_bgraph()
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("yirage.core.CyKNGraph._get_bgraph_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_cop);
  __Pyx_XDECREF(__pyx_v_bgraph);
  __Pyx_XDECREF(__pyx_8genexpr4__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":868
 *         }
 * 
 *     def _get_kn_operator_info(self, CyKNOperator op):             # <<<<<<<<<<<<<<
 *         if op.op_type == "kn_customized_op":
 *             return {
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_51_get_kn_operator_info(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_51_get_kn_operator_info = {"_get_kn_operator_info", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_51_get_kn_operator_info, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_51_get_kn_operator_info(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_op = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_kn_operator_info (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_op,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 868, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 868, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "_get_kn_operator_info", 0) < 0) __PYX_ERR(0, 868, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("_get_kn_operator_info", 1, 1, 1, i); __PYX_ERR(0, 868, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 868, __pyx_L3_error)
    }
    __pyx_v_op = ((struct __pyx_obj_6yirage_4core_CyKNOperator *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_get_kn_operator_info", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 868, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph._get_kn_operator_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_op), __pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNOperator, 1, "op", 0))) __PYX_ERR(0, 868, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_50_get_kn_operator_info(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_op);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_50_get_kn_operator_info(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_op) {
  PyObject *__pyx_8genexpr5__pyx_v_t = NULL;
  PyObject *__pyx_8genexpr6__pyx_v_t = NULL;
  PyObject *__pyx_8genexpr7__pyx_v_t = NULL;
  PyObject *__pyx_8genexpr8__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_get_kn_operator_info", 0);

  /* "yirage/_cython/core.pyx":869
 * 
 *     def _get_kn_operator_info(self, CyKNOperator op):
 *         if op.op_type == "kn_customized_op":             # <<<<<<<<<<<<<<
 *             return {
 *                 "op_type": op.op_type,
*/
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_op), __pyx_mstate_global->__pyx_n_u_op_type); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = (__Pyx_PyUnicode_Equals(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_kn_customized_op, Py_EQ)); if (unlikely((__pyx_t_2 < 0))) __PYX_ERR(0, 869, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "yirage/_cython/core.pyx":870
 *     def _get_kn_operator_info(self, CyKNOperator op):
 *         if op.op_type == "kn_customized_op":
 *             return {             # <<<<<<<<<<<<<<
 *                 "op_type": op.op_type,
 *                 "input_tensors": [self._kn_tensor_to_dict(t) for t in op.get_input_dtensors()],
*/
    __Pyx_XDECREF(__pyx_r);

    /* "yirage/_cython/core.pyx":871
 *         if op.op_type == "kn_customized_op":
 *             return {
 *                 "op_type": op.op_type,             # <<<<<<<<<<<<<<
 *                 "input_tensors": [self._kn_tensor_to_dict(t) for t in op.get_input_dtensors()],
 *                 "output_tensors": [self._kn_tensor_to_dict(t) for t in op.get_output_dtensors()],
*/
    __pyx_t_1 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_op), __pyx_mstate_global->__pyx_n_u_op_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 871, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_op_type, __pyx_t_3) < 0) __PYX_ERR(0, 871, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    { /* enter inner scope */

      /* "yirage/_cython/core.pyx":872
 *             return {
 *                 "op_type": op.op_type,
 *                 "input_tensors": [self._kn_tensor_to_dict(t) for t in op.get_input_dtensors()],             # <<<<<<<<<<<<<<
 *                 "output_tensors": [self._kn_tensor_to_dict(t) for t in op.get_output_dtensors()],
 *                 "bgraph": self._get_bgraph_info(op)
*/
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 872, __pyx_L6_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = ((PyObject *)__pyx_v_op);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_6 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_input_dtensors, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 872, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_4);
      }
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5);
        __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 872, __pyx_L6_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 872, __pyx_L6_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 872, __pyx_L6_error)
              #endif
              if (__pyx_t_7 >= __pyx_temp) break;
            }
            __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_7);
            ++__pyx_t_7;
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 872, __pyx_L6_error)
              #endif
              if (__pyx_t_7 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7));
            #else
            __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_7);
            #endif
            ++__pyx_t_7;
          }
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 872, __pyx_L6_error)
        } else {
          __pyx_t_4 = __pyx_t_8(__pyx_t_5);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 872, __pyx_L6_error)
              PyErr_Clear();
            }
            break;
          }
        }
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_8genexpr5__pyx_v_t, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_9 = ((PyObject *)__pyx_v_self);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_6 = 0;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_8genexpr5__pyx_v_t};
          __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_kn_tensor_to_dict, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 872, __pyx_L6_error)
          __Pyx_GOTREF(__pyx_t_4);
        }
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 872, __pyx_L6_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_t); __pyx_8genexpr5__pyx_v_t = 0;
      goto __pyx_L10_exit_scope;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_t); __pyx_8genexpr5__pyx_v_t = 0;
      goto __pyx_L1_error;
      __pyx_L10_exit_scope:;
    } /* exit inner scope */
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_input_tensors, __pyx_t_3) < 0) __PYX_ERR(0, 871, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    { /* enter inner scope */

      /* "yirage/_cython/core.pyx":873
 *                 "op_type": op.op_type,
 *                 "input_tensors": [self._kn_tensor_to_dict(t) for t in op.get_input_dtensors()],
 *                 "output_tensors": [self._kn_tensor_to_dict(t) for t in op.get_output_dtensors()],             # <<<<<<<<<<<<<<
 *                 "bgraph": self._get_bgraph_info(op)
 *             }
*/
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 873, __pyx_L13_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = ((PyObject *)__pyx_v_op);
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_6 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
        __pyx_t_5 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_output_dtensors, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 873, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_5);
      }
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4);
        __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 873, __pyx_L13_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 873, __pyx_L13_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 873, __pyx_L13_error)
              #endif
              if (__pyx_t_7 >= __pyx_temp) break;
            }
            __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_7);
            ++__pyx_t_7;
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 873, __pyx_L13_error)
              #endif
              if (__pyx_t_7 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_7));
            #else
            __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_7);
            #endif
            ++__pyx_t_7;
          }
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 873, __pyx_L13_error)
        } else {
          __pyx_t_5 = __pyx_t_8(__pyx_t_4);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 873, __pyx_L13_error)
              PyErr_Clear();
            }
            break;
          }
        }
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_8genexpr6__pyx_v_t, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_9 = ((PyObject *)__pyx_v_self);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_6 = 0;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_8genexpr6__pyx_v_t};
          __pyx_t_5 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_kn_tensor_to_dict, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 873, __pyx_L13_error)
          __Pyx_GOTREF(__pyx_t_5);
        }
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 873, __pyx_L13_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_t); __pyx_8genexpr6__pyx_v_t = 0;
      goto __pyx_L17_exit_scope;
      __pyx_L13_error:;
      __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_t); __pyx_8genexpr6__pyx_v_t = 0;
      goto __pyx_L1_error;
      __pyx_L17_exit_scope:;
    } /* exit inner scope */
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_output_tensors, __pyx_t_3) < 0) __PYX_ERR(0, 871, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "yirage/_cython/core.pyx":874
 *                 "input_tensors": [self._kn_tensor_to_dict(t) for t in op.get_input_dtensors()],
 *                 "output_tensors": [self._kn_tensor_to_dict(t) for t in op.get_output_dtensors()],
 *                 "bgraph": self._get_bgraph_info(op)             # <<<<<<<<<<<<<<
 *             }
 *         else:
*/
    __pyx_t_4 = ((PyObject *)__pyx_v_self);
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_6 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_4, ((PyObject *)__pyx_v_op)};
      __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_bgraph_info, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 874, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    }
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_bgraph, __pyx_t_3) < 0) __PYX_ERR(0, 871, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "yirage/_cython/core.pyx":869
 * 
 *     def _get_kn_operator_info(self, CyKNOperator op):
 *         if op.op_type == "kn_customized_op":             # <<<<<<<<<<<<<<
 *             return {
 *                 "op_type": op.op_type,
*/
  }

  /* "yirage/_cython/core.pyx":877
 *             }
 *         else:
 *             return {             # <<<<<<<<<<<<<<
 *                 "op_type": op.op_type,
 *                 "input_tensors": [self._kn_tensor_to_dict(t) for t in op.get_input_dtensors()],
*/
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);

    /* "yirage/_cython/core.pyx":878
 *         else:
 *             return {
 *                 "op_type": op.op_type,             # <<<<<<<<<<<<<<
 *                 "input_tensors": [self._kn_tensor_to_dict(t) for t in op.get_input_dtensors()],
 *                 "output_tensors": [self._kn_tensor_to_dict(t) for t in op.get_output_dtensors()],
*/
    __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_op), __pyx_mstate_global->__pyx_n_u_op_type); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_op_type, __pyx_t_3) < 0) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    { /* enter inner scope */

      /* "yirage/_cython/core.pyx":879
 *             return {
 *                 "op_type": op.op_type,
 *                 "input_tensors": [self._kn_tensor_to_dict(t) for t in op.get_input_dtensors()],             # <<<<<<<<<<<<<<
 *                 "output_tensors": [self._kn_tensor_to_dict(t) for t in op.get_output_dtensors()],
 *             }
*/
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 879, __pyx_L20_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_5 = ((PyObject *)__pyx_v_op);
      __Pyx_INCREF(__pyx_t_5);
      __pyx_t_6 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
        __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_input_dtensors, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 879, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_4);
      }
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5);
        __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 879, __pyx_L20_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_5); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 879, __pyx_L20_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_5))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_5);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 879, __pyx_L20_error)
              #endif
              if (__pyx_t_7 >= __pyx_temp) break;
            }
            __pyx_t_4 = __Pyx_PyList_GetItemRef(__pyx_t_5, __pyx_t_7);
            ++__pyx_t_7;
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_5);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 879, __pyx_L20_error)
              #endif
              if (__pyx_t_7 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_4 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7));
            #else
            __pyx_t_4 = __Pyx_PySequence_ITEM(__pyx_t_5, __pyx_t_7);
            #endif
            ++__pyx_t_7;
          }
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 879, __pyx_L20_error)
        } else {
          __pyx_t_4 = __pyx_t_8(__pyx_t_5);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 879, __pyx_L20_error)
              PyErr_Clear();
            }
            break;
          }
        }
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_XDECREF_SET(__pyx_8genexpr7__pyx_v_t, __pyx_t_4);
        __pyx_t_4 = 0;
        __pyx_t_9 = ((PyObject *)__pyx_v_self);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_6 = 0;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_8genexpr7__pyx_v_t};
          __pyx_t_4 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_kn_tensor_to_dict, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 879, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_4);
        }
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 879, __pyx_L20_error)
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_t); __pyx_8genexpr7__pyx_v_t = 0;
      goto __pyx_L24_exit_scope;
      __pyx_L20_error:;
      __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_t); __pyx_8genexpr7__pyx_v_t = 0;
      goto __pyx_L1_error;
      __pyx_L24_exit_scope:;
    } /* exit inner scope */
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_input_tensors, __pyx_t_3) < 0) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    { /* enter inner scope */

      /* "yirage/_cython/core.pyx":880
 *                 "op_type": op.op_type,
 *                 "input_tensors": [self._kn_tensor_to_dict(t) for t in op.get_input_dtensors()],
 *                 "output_tensors": [self._kn_tensor_to_dict(t) for t in op.get_output_dtensors()],             # <<<<<<<<<<<<<<
 *             }
 * 
*/
      __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 880, __pyx_L27_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = ((PyObject *)__pyx_v_op);
      __Pyx_INCREF(__pyx_t_4);
      __pyx_t_6 = 0;
      {
        PyObject *__pyx_callargs[2] = {__pyx_t_4, NULL};
        __pyx_t_5 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_output_dtensors, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
        __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
        if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 880, __pyx_L27_error)
        __Pyx_GOTREF(__pyx_t_5);
      }
      if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
        __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4);
        __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
      } else {
        __pyx_t_7 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 880, __pyx_L27_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_8 = (CYTHON_COMPILING_IN_LIMITED_API) ? PyIter_Next : __Pyx_PyObject_GetIterNextFunc(__pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 880, __pyx_L27_error)
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      for (;;) {
        if (likely(!__pyx_t_8)) {
          if (likely(PyList_CheckExact(__pyx_t_4))) {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyList_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 880, __pyx_L27_error)
              #endif
              if (__pyx_t_7 >= __pyx_temp) break;
            }
            __pyx_t_5 = __Pyx_PyList_GetItemRef(__pyx_t_4, __pyx_t_7);
            ++__pyx_t_7;
          } else {
            {
              Py_ssize_t __pyx_temp = __Pyx_PyTuple_GET_SIZE(__pyx_t_4);
              #if !CYTHON_ASSUME_SAFE_SIZE
              if (unlikely((__pyx_temp < 0))) __PYX_ERR(0, 880, __pyx_L27_error)
              #endif
              if (__pyx_t_7 >= __pyx_temp) break;
            }
            #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
            __pyx_t_5 = __Pyx_NewRef(PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_7));
            #else
            __pyx_t_5 = __Pyx_PySequence_ITEM(__pyx_t_4, __pyx_t_7);
            #endif
            ++__pyx_t_7;
          }
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 880, __pyx_L27_error)
        } else {
          __pyx_t_5 = __pyx_t_8(__pyx_t_4);
          if (unlikely(!__pyx_t_5)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (unlikely(!__Pyx_PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) __PYX_ERR(0, 880, __pyx_L27_error)
              PyErr_Clear();
            }
            break;
          }
        }
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_XDECREF_SET(__pyx_8genexpr8__pyx_v_t, __pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_9 = ((PyObject *)__pyx_v_self);
        __Pyx_INCREF(__pyx_t_9);
        __pyx_t_6 = 0;
        {
          PyObject *__pyx_callargs[2] = {__pyx_t_9, __pyx_8genexpr8__pyx_v_t};
          __pyx_t_5 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_kn_tensor_to_dict, __pyx_callargs+__pyx_t_6, (2-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
          __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
          if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 880, __pyx_L27_error)
          __Pyx_GOTREF(__pyx_t_5);
        }
        if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_5))) __PYX_ERR(0, 880, __pyx_L27_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_t); __pyx_8genexpr8__pyx_v_t = 0;
      goto __pyx_L31_exit_scope;
      __pyx_L27_error:;
      __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_t); __pyx_8genexpr8__pyx_v_t = 0;
      goto __pyx_L1_error;
      __pyx_L31_exit_scope:;
    } /* exit inner scope */
    if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_output_tensors, __pyx_t_3) < 0) __PYX_ERR(0, 878, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "yirage/_cython/core.pyx":868
 *         }
 * 
 *     def _get_kn_operator_info(self, CyKNOperator op):             # <<<<<<<<<<<<<<
 *         if op.op_type == "kn_customized_op":
 *             return {
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("yirage.core.CyKNGraph._get_kn_operator_info", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_8genexpr5__pyx_v_t);
  __Pyx_XDECREF(__pyx_8genexpr6__pyx_v_t);
  __Pyx_XDECREF(__pyx_8genexpr7__pyx_v_t);
  __Pyx_XDECREF(__pyx_8genexpr8__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":883
 *             }
 * 
 *     def get_graph_structure(self):             # <<<<<<<<<<<<<<
 *         operators = []
 *         ops = self.p_kgraph.operators
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_53get_graph_structure(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_53get_graph_structure = {"get_graph_structure", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_53get_graph_structure, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_53get_graph_structure(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_graph_structure (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_graph_structure", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_graph_structure", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_52get_graph_structure(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_52get_graph_structure(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self) {
  PyObject *__pyx_v_operators = NULL;
  std::vector<yirage::kernel::KNOperator *>  __pyx_v_ops;
  std::vector<yirage::kernel::KNOperator *> ::size_type __pyx_v_i;
  struct __pyx_obj_6yirage_4core_CyKNOperator *__pyx_v_op = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<yirage::kernel::KNOperator *>  __pyx_t_2;
  std::vector<yirage::kernel::KNOperator *> ::size_type __pyx_t_3;
  std::vector<yirage::kernel::KNOperator *> ::size_type __pyx_t_4;
  std::vector<yirage::kernel::KNOperator *> ::size_type __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  size_t __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_graph_structure", 0);

  /* "yirage/_cython/core.pyx":884
 * 
 *     def get_graph_structure(self):
 *         operators = []             # <<<<<<<<<<<<<<
 *         ops = self.p_kgraph.operators
 *         for i in range(ops.size()):
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 884, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_operators = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":885
 *     def get_graph_structure(self):
 *         operators = []
 *         ops = self.p_kgraph.operators             # <<<<<<<<<<<<<<
 *         for i in range(ops.size()):
 *             op = CyKNOperator(None)
*/
  __pyx_t_2 = __pyx_v_self->p_kgraph->operators;
  __pyx_v_ops = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_2);

  /* "yirage/_cython/core.pyx":886
 *         operators = []
 *         ops = self.p_kgraph.operators
 *         for i in range(ops.size()):             # <<<<<<<<<<<<<<
 *             op = CyKNOperator(None)
 *             op.c_ptr = ops[i]
*/
  __pyx_t_3 = __pyx_v_ops.size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "yirage/_cython/core.pyx":887
 *         ops = self.p_kgraph.operators
 *         for i in range(ops.size()):
 *             op = CyKNOperator(None)             # <<<<<<<<<<<<<<
 *             op.c_ptr = ops[i]
 *             operators.append(self._get_kn_operator_info(op))
*/
    __pyx_t_6 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNOperator);
    __pyx_t_7 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNOperator); 
    __pyx_t_8 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_6, Py_None};
      __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_8, (2-__pyx_t_8) | (__pyx_t_8*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 887, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_op, ((struct __pyx_obj_6yirage_4core_CyKNOperator *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "yirage/_cython/core.pyx":888
 *         for i in range(ops.size()):
 *             op = CyKNOperator(None)
 *             op.c_ptr = ops[i]             # <<<<<<<<<<<<<<
 *             operators.append(self._get_kn_operator_info(op))
 *         return operators
*/
    __pyx_v_op->c_ptr = (__pyx_v_ops[__pyx_v_i]);

    /* "yirage/_cython/core.pyx":889
 *             op = CyKNOperator(None)
 *             op.c_ptr = ops[i]
 *             operators.append(self._get_kn_operator_info(op))             # <<<<<<<<<<<<<<
 *         return operators
 * 
*/
    __pyx_t_7 = ((PyObject *)__pyx_v_self);
    __Pyx_INCREF(__pyx_t_7);
    __pyx_t_8 = 0;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_7, ((PyObject *)__pyx_v_op)};
      __pyx_t_1 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_get_kn_operator_info, __pyx_callargs+__pyx_t_8, (2-__pyx_t_8) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 889, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
    }
    __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_operators, __pyx_t_1); if (unlikely(__pyx_t_9 == ((int)-1))) __PYX_ERR(0, 889, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "yirage/_cython/core.pyx":890
 *             op.c_ptr = ops[i]
 *             operators.append(self._get_kn_operator_info(op))
 *         return operators             # <<<<<<<<<<<<<<
 * 
 *     def get_num_inputs(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_operators);
  __pyx_r = __pyx_v_operators;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":883
 *             }
 * 
 *     def get_graph_structure(self):             # <<<<<<<<<<<<<<
 *         operators = []
 *         ops = self.p_kgraph.operators
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.get_graph_structure", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_operators);
  __Pyx_XDECREF((PyObject *)__pyx_v_op);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":892
 *         return operators
 * 
 *     def get_num_inputs(self):             # <<<<<<<<<<<<<<
 *         return self.p_kgraph.get_num_input_dtensors()
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_55get_num_inputs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_55get_num_inputs = {"get_num_inputs", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_55get_num_inputs, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_55get_num_inputs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_num_inputs (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_num_inputs", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_num_inputs", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_54get_num_inputs(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_54get_num_inputs(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_num_inputs", 0);

  /* "yirage/_cython/core.pyx":893
 * 
 *     def get_num_inputs(self):
 *         return self.p_kgraph.get_num_input_dtensors()             # <<<<<<<<<<<<<<
 * 
 *     def get_num_outputs(self):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_int(__pyx_v_self->p_kgraph->get_num_input_dtensors()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 893, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":892
 *         return operators
 * 
 *     def get_num_inputs(self):             # <<<<<<<<<<<<<<
 *         return self.p_kgraph.get_num_input_dtensors()
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.get_num_inputs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":895
 *         return self.p_kgraph.get_num_input_dtensors()
 * 
 *     def get_num_outputs(self):             # <<<<<<<<<<<<<<
 *         return self.p_kgraph.get_num_output_dtensors()
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_57get_num_outputs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_57get_num_outputs = {"get_num_outputs", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_57get_num_outputs, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_57get_num_outputs(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_num_outputs (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("get_num_outputs", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("get_num_outputs", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_56get_num_outputs(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_56get_num_outputs(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_num_outputs", 0);

  /* "yirage/_cython/core.pyx":896
 * 
 *     def get_num_outputs(self):
 *         return self.p_kgraph.get_num_output_dtensors()             # <<<<<<<<<<<<<<
 * 
 *     def get_input_dtensor_shape_and_stride(self, DTensor A):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_int(__pyx_v_self->p_kgraph->get_num_output_dtensors()); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 896, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":895
 *         return self.p_kgraph.get_num_input_dtensors()
 * 
 *     def get_num_outputs(self):             # <<<<<<<<<<<<<<
 *         return self.p_kgraph.get_num_output_dtensors()
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.get_num_outputs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":898
 *         return self.p_kgraph.get_num_output_dtensors()
 * 
 *     def get_input_dtensor_shape_and_stride(self, DTensor A):             # <<<<<<<<<<<<<<
 *         cdef int cstrides[128]
 *         cdef int cdims[128]
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_59get_input_dtensor_shape_and_stride(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_59get_input_dtensor_shape_and_stride = {"get_input_dtensor_shape_and_stride", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_59get_input_dtensor_shape_and_stride, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_59get_input_dtensor_shape_and_stride(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_input_dtensor_shape_and_stride (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 898, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 898, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "get_input_dtensor_shape_and_stride", 0) < 0) __PYX_ERR(0, 898, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("get_input_dtensor_shape_and_stride", 1, 1, 1, i); __PYX_ERR(0, 898, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 898, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("get_input_dtensor_shape_and_stride", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 898, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.get_input_dtensor_shape_and_stride", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "A", 0))) __PYX_ERR(0, 898, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_58get_input_dtensor_shape_and_stride(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_58get_input_dtensor_shape_and_stride(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_A) {
  int __pyx_v_cstrides[0x80];
  int __pyx_v_cdims[0x80];
  int __pyx_v_num;
  PyObject *__pyx_v_strides = NULL;
  PyObject *__pyx_v_dims = NULL;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_input_dtensor_shape_and_stride", 0);

  /* "yirage/_cython/core.pyx":901
 *         cdef int cstrides[128]
 *         cdef int cdims[128]
 *         num = self.p_kgraph.get_input_dtensor_shape_and_stride(A.c_ptr, cstrides, cdims)             # <<<<<<<<<<<<<<
 *         strides = list()
 *         dims = list()
*/
  __pyx_v_num = __pyx_v_self->p_kgraph->get_input_dtensor_shape_and_stride(__pyx_v_A->c_ptr, __pyx_v_cstrides, __pyx_v_cdims);

  /* "yirage/_cython/core.pyx":902
 *         cdef int cdims[128]
 *         num = self.p_kgraph.get_input_dtensor_shape_and_stride(A.c_ptr, cstrides, cdims)
 *         strides = list()             # <<<<<<<<<<<<<<
 *         dims = list()
 *         for i in range(num):
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 902, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_strides = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":903
 *         num = self.p_kgraph.get_input_dtensor_shape_and_stride(A.c_ptr, cstrides, cdims)
 *         strides = list()
 *         dims = list()             # <<<<<<<<<<<<<<
 *         for i in range(num):
 *             strides.append(cstrides[i])
*/
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 903, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dims = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":904
 *         strides = list()
 *         dims = list()
 *         for i in range(num):             # <<<<<<<<<<<<<<
 *             strides.append(cstrides[i])
 *             dims.append(cdims[i])
*/
  __pyx_t_2 = __pyx_v_num;
  __pyx_t_3 = __pyx_t_2;
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "yirage/_cython/core.pyx":905
 *         dims = list()
 *         for i in range(num):
 *             strides.append(cstrides[i])             # <<<<<<<<<<<<<<
 *             dims.append(cdims[i])
 *         return tuple(dims), tuple(strides)
*/
    __pyx_t_1 = __Pyx_PyLong_From_int((__pyx_v_cstrides[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 905, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_strides, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 905, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "yirage/_cython/core.pyx":906
 *         for i in range(num):
 *             strides.append(cstrides[i])
 *             dims.append(cdims[i])             # <<<<<<<<<<<<<<
 *         return tuple(dims), tuple(strides)
 * 
*/
    __pyx_t_1 = __Pyx_PyLong_From_int((__pyx_v_cdims[__pyx_v_i])); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 906, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_dims, __pyx_t_1); if (unlikely(__pyx_t_5 == ((int)-1))) __PYX_ERR(0, 906, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "yirage/_cython/core.pyx":907
 *             strides.append(cstrides[i])
 *             dims.append(cdims[i])
 *         return tuple(dims), tuple(strides)             # <<<<<<<<<<<<<<
 * 
 *     # Functions for ersistent kernels
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_AsTuple(__pyx_v_dims); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyList_AsTuple(__pyx_v_strides); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(2); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 907, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_1) != (0)) __PYX_ERR(0, 907, __pyx_L1_error);
  __Pyx_GIVEREF(__pyx_t_6);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_6) != (0)) __PYX_ERR(0, 907, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":898
 *         return self.p_kgraph.get_num_output_dtensors()
 * 
 *     def get_input_dtensor_shape_and_stride(self, DTensor A):             # <<<<<<<<<<<<<<
 *         cdef int cstrides[128]
 *         cdef int cdims[128]
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.get_input_dtensor_shape_and_stride", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_strides);
  __Pyx_XDECREF(__pyx_v_dims);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":910
 * 
 *     # Functions for ersistent kernels
 *     def attach_torch_tensor(self, DTensor tensor, torch_tensor, str name):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long torch_data_ptr = ctypes.cast(torch_tensor.data_ptr(), ctypes.c_void_p).value
 *         cdef char* cname = NULL
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_61attach_torch_tensor(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_61attach_torch_tensor = {"attach_torch_tensor", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_61attach_torch_tensor, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_61attach_torch_tensor(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_tensor = 0;
  PyObject *__pyx_v_torch_tensor = 0;
  PyObject *__pyx_v_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attach_torch_tensor (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_tensor,&__pyx_mstate_global->__pyx_n_u_torch_tensor,&__pyx_mstate_global->__pyx_n_u_name,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 910, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 910, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 910, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 910, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "attach_torch_tensor", 0) < 0) __PYX_ERR(0, 910, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("attach_torch_tensor", 1, 3, 3, i); __PYX_ERR(0, 910, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 910, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 910, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 910, __pyx_L3_error)
    }
    __pyx_v_tensor = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
    __pyx_v_torch_tensor = values[1];
    __pyx_v_name = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("attach_torch_tensor", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 910, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.attach_torch_tensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tensor), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "tensor", 0))) __PYX_ERR(0, 910, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 1, "name", 1))) __PYX_ERR(0, 910, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_60attach_torch_tensor(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_tensor, __pyx_v_torch_tensor, __pyx_v_name);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_60attach_torch_tensor(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_tensor, PyObject *__pyx_v_torch_tensor, PyObject *__pyx_v_name) {
  unsigned PY_LONG_LONG __pyx_v_torch_data_ptr;
  char *__pyx_v_cname;
  PyObject *__pyx_v_py_byte_string = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  size_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  unsigned PY_LONG_LONG __pyx_t_8;
  int __pyx_t_9;
  char *__pyx_t_10;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("attach_torch_tensor", 0);

  /* "yirage/_cython/core.pyx":911
 *     # Functions for ersistent kernels
 *     def attach_torch_tensor(self, DTensor tensor, torch_tensor, str name):
 *         cdef unsigned long long torch_data_ptr = ctypes.cast(torch_tensor.data_ptr(), ctypes.c_void_p).value             # <<<<<<<<<<<<<<
 *         cdef char* cname = NULL
 *         if name is not None:
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_v_torch_tensor;
  __Pyx_INCREF(__pyx_t_5);
  __pyx_t_6 = 0;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, NULL};
    __pyx_t_3 = __Pyx_PyObject_FastCallMethod(__pyx_mstate_global->__pyx_n_u_data_ptr, __pyx_callargs+__pyx_t_6, (1-__pyx_t_6) | (1*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_6 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_6 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_7};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_6, (3-__pyx_t_6) | (__pyx_t_6*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 911, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_8 = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(__pyx_t_4); if (unlikely((__pyx_t_8 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 911, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_torch_data_ptr = __pyx_t_8;

  /* "yirage/_cython/core.pyx":912
 *     def attach_torch_tensor(self, DTensor tensor, torch_tensor, str name):
 *         cdef unsigned long long torch_data_ptr = ctypes.cast(torch_tensor.data_ptr(), ctypes.c_void_p).value
 *         cdef char* cname = NULL             # <<<<<<<<<<<<<<
 *         if name is not None:
 *             py_byte_string = name.encode('UTF-8')
*/
  __pyx_v_cname = NULL;

  /* "yirage/_cython/core.pyx":913
 *         cdef unsigned long long torch_data_ptr = ctypes.cast(torch_tensor.data_ptr(), ctypes.c_void_p).value
 *         cdef char* cname = NULL
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             py_byte_string = name.encode('UTF-8')
 *             cname = py_byte_string
*/
  __pyx_t_9 = (__pyx_v_name != ((PyObject*)Py_None));
  if (__pyx_t_9) {

    /* "yirage/_cython/core.pyx":914
 *         cdef char* cname = NULL
 *         if name is not None:
 *             py_byte_string = name.encode('UTF-8')             # <<<<<<<<<<<<<<
 *             cname = py_byte_string
 *         self.p_kgraph.attach_torch_tensor(tensor.c_ptr, <void *>torch_data_ptr, cname)
*/
    if (unlikely(__pyx_v_name == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 914, __pyx_L1_error)
    }
    __pyx_t_4 = PyUnicode_AsUTF8String(__pyx_v_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 914, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_py_byte_string = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "yirage/_cython/core.pyx":915
 *         if name is not None:
 *             py_byte_string = name.encode('UTF-8')
 *             cname = py_byte_string             # <<<<<<<<<<<<<<
 *         self.p_kgraph.attach_torch_tensor(tensor.c_ptr, <void *>torch_data_ptr, cname)
 * 
*/
    __pyx_t_10 = __Pyx_PyBytes_AsWritableString(__pyx_v_py_byte_string); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) __PYX_ERR(0, 915, __pyx_L1_error)
    __pyx_v_cname = __pyx_t_10;

    /* "yirage/_cython/core.pyx":913
 *         cdef unsigned long long torch_data_ptr = ctypes.cast(torch_tensor.data_ptr(), ctypes.c_void_p).value
 *         cdef char* cname = NULL
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             py_byte_string = name.encode('UTF-8')
 *             cname = py_byte_string
*/
  }

  /* "yirage/_cython/core.pyx":916
 *             py_byte_string = name.encode('UTF-8')
 *             cname = py_byte_string
 *         self.p_kgraph.attach_torch_tensor(tensor.c_ptr, <void *>torch_data_ptr, cname)             # <<<<<<<<<<<<<<
 * 
 *     def attach_cuda_tensor(self, DTensor tensor, str name):
*/
  __pyx_v_self->p_kgraph->attach_torch_tensor(__pyx_v_tensor->c_ptr, ((void *)__pyx_v_torch_data_ptr), __pyx_v_cname);

  /* "yirage/_cython/core.pyx":910
 * 
 *     # Functions for ersistent kernels
 *     def attach_torch_tensor(self, DTensor tensor, torch_tensor, str name):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long torch_data_ptr = ctypes.cast(torch_tensor.data_ptr(), ctypes.c_void_p).value
 *         cdef char* cname = NULL
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.attach_torch_tensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_byte_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":918
 *         self.p_kgraph.attach_torch_tensor(tensor.c_ptr, <void *>torch_data_ptr, cname)
 * 
 *     def attach_cuda_tensor(self, DTensor tensor, str name):             # <<<<<<<<<<<<<<
 *         cdef char* cname = NULL
 *         if name is not None:
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_63attach_cuda_tensor(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_63attach_cuda_tensor = {"attach_cuda_tensor", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_63attach_cuda_tensor, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_63attach_cuda_tensor(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_tensor = 0;
  PyObject *__pyx_v_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attach_cuda_tensor (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_tensor,&__pyx_mstate_global->__pyx_n_u_name,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 918, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 918, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 918, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "attach_cuda_tensor", 0) < 0) __PYX_ERR(0, 918, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("attach_cuda_tensor", 1, 2, 2, i); __PYX_ERR(0, 918, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 918, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 918, __pyx_L3_error)
    }
    __pyx_v_tensor = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
    __pyx_v_name = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("attach_cuda_tensor", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 918, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.attach_cuda_tensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tensor), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "tensor", 0))) __PYX_ERR(0, 918, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 1, "name", 1))) __PYX_ERR(0, 918, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_62attach_cuda_tensor(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_tensor, __pyx_v_name);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_62attach_cuda_tensor(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_tensor, PyObject *__pyx_v_name) {
  char *__pyx_v_cname;
  PyObject *__pyx_v_py_byte_string = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("attach_cuda_tensor", 0);

  /* "yirage/_cython/core.pyx":919
 * 
 *     def attach_cuda_tensor(self, DTensor tensor, str name):
 *         cdef char* cname = NULL             # <<<<<<<<<<<<<<
 *         if name is not None:
 *             py_byte_string = name.encode('UTF-8')
*/
  __pyx_v_cname = NULL;

  /* "yirage/_cython/core.pyx":920
 *     def attach_cuda_tensor(self, DTensor tensor, str name):
 *         cdef char* cname = NULL
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             py_byte_string = name.encode('UTF-8')
 *             cname = py_byte_string
*/
  __pyx_t_1 = (__pyx_v_name != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":921
 *         cdef char* cname = NULL
 *         if name is not None:
 *             py_byte_string = name.encode('UTF-8')             # <<<<<<<<<<<<<<
 *             cname = py_byte_string
 *         self.p_kgraph.attach_cuda_tensor(tensor.c_ptr, cname)
*/
    if (unlikely(__pyx_v_name == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 921, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(__pyx_v_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 921, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_py_byte_string = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "yirage/_cython/core.pyx":922
 *         if name is not None:
 *             py_byte_string = name.encode('UTF-8')
 *             cname = py_byte_string             # <<<<<<<<<<<<<<
 *         self.p_kgraph.attach_cuda_tensor(tensor.c_ptr, cname)
 * 
*/
    __pyx_t_3 = __Pyx_PyBytes_AsWritableString(__pyx_v_py_byte_string); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 922, __pyx_L1_error)
    __pyx_v_cname = __pyx_t_3;

    /* "yirage/_cython/core.pyx":920
 *     def attach_cuda_tensor(self, DTensor tensor, str name):
 *         cdef char* cname = NULL
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             py_byte_string = name.encode('UTF-8')
 *             cname = py_byte_string
*/
  }

  /* "yirage/_cython/core.pyx":923
 *             py_byte_string = name.encode('UTF-8')
 *             cname = py_byte_string
 *         self.p_kgraph.attach_cuda_tensor(tensor.c_ptr, cname)             # <<<<<<<<<<<<<<
 * 
 *     def attach_nvshmem_tensor(self, DTensor tensor, str name):
*/
  __pyx_v_self->p_kgraph->attach_cuda_tensor(__pyx_v_tensor->c_ptr, __pyx_v_cname);

  /* "yirage/_cython/core.pyx":918
 *         self.p_kgraph.attach_torch_tensor(tensor.c_ptr, <void *>torch_data_ptr, cname)
 * 
 *     def attach_cuda_tensor(self, DTensor tensor, str name):             # <<<<<<<<<<<<<<
 *         cdef char* cname = NULL
 *         if name is not None:
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.attach_cuda_tensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_byte_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":925
 *         self.p_kgraph.attach_cuda_tensor(tensor.c_ptr, cname)
 * 
 *     def attach_nvshmem_tensor(self, DTensor tensor, str name):             # <<<<<<<<<<<<<<
 *         cdef char* cname = NULL
 *         if name is not None:
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_65attach_nvshmem_tensor(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_65attach_nvshmem_tensor = {"attach_nvshmem_tensor", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_65attach_nvshmem_tensor, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_65attach_nvshmem_tensor(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_tensor = 0;
  PyObject *__pyx_v_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("attach_nvshmem_tensor (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_tensor,&__pyx_mstate_global->__pyx_n_u_name,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 925, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 925, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 925, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "attach_nvshmem_tensor", 0) < 0) __PYX_ERR(0, 925, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("attach_nvshmem_tensor", 1, 2, 2, i); __PYX_ERR(0, 925, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 925, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 925, __pyx_L3_error)
    }
    __pyx_v_tensor = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
    __pyx_v_name = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("attach_nvshmem_tensor", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 925, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.attach_nvshmem_tensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_tensor), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "tensor", 0))) __PYX_ERR(0, 925, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 1, "name", 1))) __PYX_ERR(0, 925, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_64attach_nvshmem_tensor(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_tensor, __pyx_v_name);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_64attach_nvshmem_tensor(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_tensor, PyObject *__pyx_v_name) {
  char *__pyx_v_cname;
  PyObject *__pyx_v_py_byte_string = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("attach_nvshmem_tensor", 0);

  /* "yirage/_cython/core.pyx":926
 * 
 *     def attach_nvshmem_tensor(self, DTensor tensor, str name):
 *         cdef char* cname = NULL             # <<<<<<<<<<<<<<
 *         if name is not None:
 *             py_byte_string = name.encode('UTF-8')
*/
  __pyx_v_cname = NULL;

  /* "yirage/_cython/core.pyx":927
 *     def attach_nvshmem_tensor(self, DTensor tensor, str name):
 *         cdef char* cname = NULL
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             py_byte_string = name.encode('UTF-8')
 *             cname = py_byte_string
*/
  __pyx_t_1 = (__pyx_v_name != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":928
 *         cdef char* cname = NULL
 *         if name is not None:
 *             py_byte_string = name.encode('UTF-8')             # <<<<<<<<<<<<<<
 *             cname = py_byte_string
 *         self.p_kgraph.attach_nvshmem_tensor(tensor.c_ptr, cname)
*/
    if (unlikely(__pyx_v_name == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 928, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(__pyx_v_name); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 928, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_py_byte_string = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "yirage/_cython/core.pyx":929
 *         if name is not None:
 *             py_byte_string = name.encode('UTF-8')
 *             cname = py_byte_string             # <<<<<<<<<<<<<<
 *         self.p_kgraph.attach_nvshmem_tensor(tensor.c_ptr, cname)
 * 
*/
    __pyx_t_3 = __Pyx_PyBytes_AsWritableString(__pyx_v_py_byte_string); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 929, __pyx_L1_error)
    __pyx_v_cname = __pyx_t_3;

    /* "yirage/_cython/core.pyx":927
 *     def attach_nvshmem_tensor(self, DTensor tensor, str name):
 *         cdef char* cname = NULL
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             py_byte_string = name.encode('UTF-8')
 *             cname = py_byte_string
*/
  }

  /* "yirage/_cython/core.pyx":930
 *             py_byte_string = name.encode('UTF-8')
 *             cname = py_byte_string
 *         self.p_kgraph.attach_nvshmem_tensor(tensor.c_ptr, cname)             # <<<<<<<<<<<<<<
 * 
 *     def fuse_tensors(self, list[DTensor] inputs, int fused_dim, int num_groups, str name):
*/
  __pyx_v_self->p_kgraph->attach_nvshmem_tensor(__pyx_v_tensor->c_ptr, __pyx_v_cname);

  /* "yirage/_cython/core.pyx":925
 *         self.p_kgraph.attach_cuda_tensor(tensor.c_ptr, cname)
 * 
 *     def attach_nvshmem_tensor(self, DTensor tensor, str name):             # <<<<<<<<<<<<<<
 *         cdef char* cname = NULL
 *         if name is not None:
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.attach_nvshmem_tensor", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_byte_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":932
 *         self.p_kgraph.attach_nvshmem_tensor(tensor.c_ptr, cname)
 * 
 *     def fuse_tensors(self, list[DTensor] inputs, int fused_dim, int num_groups, str name):             # <<<<<<<<<<<<<<
 *         cdef vector[const CppDTensor*] cinputs
 *         cinputs.resize(len(inputs))
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_67fuse_tensors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_67fuse_tensors = {"fuse_tensors", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_67fuse_tensors, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_67fuse_tensors(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_inputs = 0;
  int __pyx_v_fused_dim;
  int __pyx_v_num_groups;
  PyObject *__pyx_v_name = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fuse_tensors (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_inputs,&__pyx_mstate_global->__pyx_n_u_fused_dim,&__pyx_mstate_global->__pyx_n_u_num_groups,&__pyx_mstate_global->__pyx_n_u_name,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 932, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 932, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 932, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 932, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 932, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "fuse_tensors", 0) < 0) __PYX_ERR(0, 932, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 4; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("fuse_tensors", 1, 4, 4, i); __PYX_ERR(0, 932, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 4)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 932, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 932, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 932, __pyx_L3_error)
      values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 932, __pyx_L3_error)
    }
    __pyx_v_inputs = ((PyObject*)values[0]);
    __pyx_v_fused_dim = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_fused_dim == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L3_error)
    __pyx_v_num_groups = __Pyx_PyLong_As_int(values[2]); if (unlikely((__pyx_v_num_groups == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 932, __pyx_L3_error)
    __pyx_v_name = ((PyObject*)values[3]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("fuse_tensors", 1, 4, 4, __pyx_nargs); __PYX_ERR(0, 932, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.fuse_tensors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_inputs), (&PyList_Type), 1, "inputs", 1))) __PYX_ERR(0, 932, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_name), (&PyUnicode_Type), 1, "name", 1))) __PYX_ERR(0, 932, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_66fuse_tensors(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_inputs, __pyx_v_fused_dim, __pyx_v_num_groups, __pyx_v_name);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_66fuse_tensors(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, PyObject *__pyx_v_inputs, int __pyx_v_fused_dim, int __pyx_v_num_groups, PyObject *__pyx_v_name) {
  std::vector<struct yirage::kernel::DTensor const *>  __pyx_v_cinputs;
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_t = 0;
  Py_ssize_t __pyx_v_i;
  char *__pyx_v_cname;
  PyObject *__pyx_v_py_byte_string = NULL;
  struct yirage::kernel::DTensor *__pyx_v_ptr;
  PyObject *__pyx_v_output = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  struct yirage::kernel::DTensor *__pyx_t_7;
  char *__pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  size_t __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fuse_tensors", 0);

  /* "yirage/_cython/core.pyx":934
 *     def fuse_tensors(self, list[DTensor] inputs, int fused_dim, int num_groups, str name):
 *         cdef vector[const CppDTensor*] cinputs
 *         cinputs.resize(len(inputs))             # <<<<<<<<<<<<<<
 *         cdef DTensor t
 *         for i in range(len(inputs)):
*/
  if (unlikely(__pyx_v_inputs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 934, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_GET_SIZE(__pyx_v_inputs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 934, __pyx_L1_error)
  try {
    __pyx_v_cinputs.resize(__pyx_t_1);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 934, __pyx_L1_error)
  }

  /* "yirage/_cython/core.pyx":936
 *         cinputs.resize(len(inputs))
 *         cdef DTensor t
 *         for i in range(len(inputs)):             # <<<<<<<<<<<<<<
 *             assert(type(inputs[i]) == DTensor)
 *             t = inputs[i]
*/
  if (unlikely(__pyx_v_inputs == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 936, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyList_GET_SIZE(__pyx_v_inputs); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 936, __pyx_L1_error)
  __pyx_t_2 = __pyx_t_1;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;

    /* "yirage/_cython/core.pyx":937
 *         cdef DTensor t
 *         for i in range(len(inputs)):
 *             assert(type(inputs[i]) == DTensor)             # <<<<<<<<<<<<<<
 *             t = inputs[i]
 *             cinputs[i] = t.c_ptr
*/
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(__pyx_assertions_enabled())) {
      if (unlikely(__pyx_v_inputs == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 937, __pyx_L1_error)
      }
      __pyx_t_4 = __Pyx_GetItemInt_List(__pyx_v_inputs, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 937, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_4)), ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor), Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 937, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 < 0))) __PYX_ERR(0, 937, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(!__pyx_t_6)) {
        __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
        __PYX_ERR(0, 937, __pyx_L1_error)
      }
    }
    #else
    if ((1)); else __PYX_ERR(0, 937, __pyx_L1_error)
    #endif

    /* "yirage/_cython/core.pyx":938
 *         for i in range(len(inputs)):
 *             assert(type(inputs[i]) == DTensor)
 *             t = inputs[i]             # <<<<<<<<<<<<<<
 *             cinputs[i] = t.c_ptr
 *         cdef char* cname = NULL
*/
    if (unlikely(__pyx_v_inputs == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 938, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_inputs, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor))))) __PYX_ERR(0, 938, __pyx_L1_error)
    __Pyx_XDECREF_SET(__pyx_v_t, ((struct __pyx_obj_6yirage_4core_DTensor *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "yirage/_cython/core.pyx":939
 *             assert(type(inputs[i]) == DTensor)
 *             t = inputs[i]
 *             cinputs[i] = t.c_ptr             # <<<<<<<<<<<<<<
 *         cdef char* cname = NULL
 *         if name is not None:
*/
    __pyx_t_7 = __pyx_v_t->c_ptr;
    (__pyx_v_cinputs[__pyx_v_i]) = __pyx_t_7;
  }

  /* "yirage/_cython/core.pyx":940
 *             t = inputs[i]
 *             cinputs[i] = t.c_ptr
 *         cdef char* cname = NULL             # <<<<<<<<<<<<<<
 *         if name is not None:
 *             py_byte_string = name.encode('UTF-8')
*/
  __pyx_v_cname = NULL;

  /* "yirage/_cython/core.pyx":941
 *             cinputs[i] = t.c_ptr
 *         cdef char* cname = NULL
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             py_byte_string = name.encode('UTF-8')
 *             cname = py_byte_string
*/
  __pyx_t_6 = (__pyx_v_name != ((PyObject*)Py_None));
  if (__pyx_t_6) {

    /* "yirage/_cython/core.pyx":942
 *         cdef char* cname = NULL
 *         if name is not None:
 *             py_byte_string = name.encode('UTF-8')             # <<<<<<<<<<<<<<
 *             cname = py_byte_string
 *         cdef CppDTensor* ptr = self.p_kgraph.fuse_tensors(cinputs, fused_dim, num_groups, cname)
*/
    if (unlikely(__pyx_v_name == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 942, __pyx_L1_error)
    }
    __pyx_t_5 = PyUnicode_AsUTF8String(__pyx_v_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 942, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_py_byte_string = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "yirage/_cython/core.pyx":943
 *         if name is not None:
 *             py_byte_string = name.encode('UTF-8')
 *             cname = py_byte_string             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.fuse_tensors(cinputs, fused_dim, num_groups, cname)
 *         output = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
    __pyx_t_8 = __Pyx_PyBytes_AsWritableString(__pyx_v_py_byte_string); if (unlikely((!__pyx_t_8) && PyErr_Occurred())) __PYX_ERR(0, 943, __pyx_L1_error)
    __pyx_v_cname = __pyx_t_8;

    /* "yirage/_cython/core.pyx":941
 *             cinputs[i] = t.c_ptr
 *         cdef char* cname = NULL
 *         if name is not None:             # <<<<<<<<<<<<<<
 *             py_byte_string = name.encode('UTF-8')
 *             cname = py_byte_string
*/
  }

  /* "yirage/_cython/core.pyx":944
 *             py_byte_string = name.encode('UTF-8')
 *             cname = py_byte_string
 *         cdef CppDTensor* ptr = self.p_kgraph.fuse_tensors(cinputs, fused_dim, num_groups, cname)             # <<<<<<<<<<<<<<
 *         output = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(output)
*/
  __pyx_v_ptr = __pyx_v_self->p_kgraph->fuse_tensors(__pyx_v_cinputs, __pyx_v_fused_dim, __pyx_v_num_groups, __pyx_v_cname);

  /* "yirage/_cython/core.pyx":945
 *             cname = py_byte_string
 *         cdef CppDTensor* ptr = self.p_kgraph.fuse_tensors(cinputs, fused_dim, num_groups, cname)
 *         output = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return DTensor(output)
 * 
*/
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_GetModuleGlobalName(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 945, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_13 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_10))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_10);
    assert(__pyx_t_4);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_10);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_10, __pyx__function);
    __pyx_t_13 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_9, __pyx_t_12};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_13, (3-__pyx_t_13) | (__pyx_t_13*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 945, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  }
  __pyx_v_output = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "yirage/_cython/core.pyx":946
 *         cdef CppDTensor* ptr = self.p_kgraph.fuse_tensors(cinputs, fused_dim, num_groups, cname)
 *         output = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return DTensor(output)             # <<<<<<<<<<<<<<
 * 
 *     def register_task(self, CyTBGraph bgraph, str task_type, list[int] params):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_10 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor);
  __pyx_t_12 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor); 
  __pyx_t_13 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_10, __pyx_v_output};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_12, __pyx_callargs+__pyx_t_13, (2-__pyx_t_13) | (__pyx_t_13*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 946, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_5);
  }
  __pyx_r = ((PyObject *)__pyx_t_5);
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":932
 *         self.p_kgraph.attach_nvshmem_tensor(tensor.c_ptr, cname)
 * 
 *     def fuse_tensors(self, list[DTensor] inputs, int fused_dim, int num_groups, str name):             # <<<<<<<<<<<<<<
 *         cdef vector[const CppDTensor*] cinputs
 *         cinputs.resize(len(inputs))
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.fuse_tensors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_t);
  __Pyx_XDECREF(__pyx_v_py_byte_string);
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":948
 *         return DTensor(output)
 * 
 *     def register_task(self, CyTBGraph bgraph, str task_type, list[int] params):             # <<<<<<<<<<<<<<
 *         cdef char* cname = NULL
 *         if task_type is not None:
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_69register_task(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_69register_task = {"register_task", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_69register_task, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_69register_task(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_bgraph = 0;
  PyObject *__pyx_v_task_type = 0;
  PyObject *__pyx_v_params = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("register_task (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_bgraph,&__pyx_mstate_global->__pyx_n_u_task_type,&__pyx_mstate_global->__pyx_n_u_params,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 948, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 948, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 948, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 948, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "register_task", 0) < 0) __PYX_ERR(0, 948, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("register_task", 1, 3, 3, i); __PYX_ERR(0, 948, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 948, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 948, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 948, __pyx_L3_error)
    }
    __pyx_v_bgraph = ((struct __pyx_obj_6yirage_4core_CyTBGraph *)values[0]);
    __pyx_v_task_type = ((PyObject*)values[1]);
    __pyx_v_params = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("register_task", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 948, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.register_task", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_bgraph), __pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, 1, "bgraph", 0))) __PYX_ERR(0, 948, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_task_type), (&PyUnicode_Type), 1, "task_type", 1))) __PYX_ERR(0, 948, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_params), (&PyList_Type), 1, "params", 1))) __PYX_ERR(0, 948, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_68register_task(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_bgraph, __pyx_v_task_type, __pyx_v_params);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_68register_task(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_bgraph, PyObject *__pyx_v_task_type, PyObject *__pyx_v_params) {
  char *__pyx_v_cname;
  PyObject *__pyx_v_py_byte_string = NULL;
  std::vector<int>  __pyx_v_cparams;
  Py_ssize_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  char *__pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("register_task", 0);

  /* "yirage/_cython/core.pyx":949
 * 
 *     def register_task(self, CyTBGraph bgraph, str task_type, list[int] params):
 *         cdef char* cname = NULL             # <<<<<<<<<<<<<<
 *         if task_type is not None:
 *             py_byte_string = task_type.encode('UTF-8')
*/
  __pyx_v_cname = NULL;

  /* "yirage/_cython/core.pyx":950
 *     def register_task(self, CyTBGraph bgraph, str task_type, list[int] params):
 *         cdef char* cname = NULL
 *         if task_type is not None:             # <<<<<<<<<<<<<<
 *             py_byte_string = task_type.encode('UTF-8')
 *             cname = py_byte_string
*/
  __pyx_t_1 = (__pyx_v_task_type != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":951
 *         cdef char* cname = NULL
 *         if task_type is not None:
 *             py_byte_string = task_type.encode('UTF-8')             # <<<<<<<<<<<<<<
 *             cname = py_byte_string
 *         cdef vector[int] cparams
*/
    if (unlikely(__pyx_v_task_type == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 951, __pyx_L1_error)
    }
    __pyx_t_2 = PyUnicode_AsUTF8String(__pyx_v_task_type); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 951, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_py_byte_string = ((PyObject*)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "yirage/_cython/core.pyx":952
 *         if task_type is not None:
 *             py_byte_string = task_type.encode('UTF-8')
 *             cname = py_byte_string             # <<<<<<<<<<<<<<
 *         cdef vector[int] cparams
 *         cparams.resize(0)
*/
    __pyx_t_3 = __Pyx_PyBytes_AsWritableString(__pyx_v_py_byte_string); if (unlikely((!__pyx_t_3) && PyErr_Occurred())) __PYX_ERR(0, 952, __pyx_L1_error)
    __pyx_v_cname = __pyx_t_3;

    /* "yirage/_cython/core.pyx":950
 *     def register_task(self, CyTBGraph bgraph, str task_type, list[int] params):
 *         cdef char* cname = NULL
 *         if task_type is not None:             # <<<<<<<<<<<<<<
 *             py_byte_string = task_type.encode('UTF-8')
 *             cname = py_byte_string
*/
  }

  /* "yirage/_cython/core.pyx":954
 *             cname = py_byte_string
 *         cdef vector[int] cparams
 *         cparams.resize(0)             # <<<<<<<<<<<<<<
 *         if params is not None:
 *             cparams.resize(len(params))
*/
  try {
    __pyx_v_cparams.resize(0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 954, __pyx_L1_error)
  }

  /* "yirage/_cython/core.pyx":955
 *         cdef vector[int] cparams
 *         cparams.resize(0)
 *         if params is not None:             # <<<<<<<<<<<<<<
 *             cparams.resize(len(params))
 *             for i in range(len(params)):
*/
  __pyx_t_1 = (__pyx_v_params != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":956
 *         cparams.resize(0)
 *         if params is not None:
 *             cparams.resize(len(params))             # <<<<<<<<<<<<<<
 *             for i in range(len(params)):
 *                 cparams[i] = params[i]
*/
    if (unlikely(__pyx_v_params == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 956, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyList_GET_SIZE(__pyx_v_params); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 956, __pyx_L1_error)
    try {
      __pyx_v_cparams.resize(__pyx_t_4);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 956, __pyx_L1_error)
    }

    /* "yirage/_cython/core.pyx":957
 *         if params is not None:
 *             cparams.resize(len(params))
 *             for i in range(len(params)):             # <<<<<<<<<<<<<<
 *                 cparams[i] = params[i]
 *         self.p_kgraph.register_task(cname, cparams)
*/
    if (unlikely(__pyx_v_params == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 957, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyList_GET_SIZE(__pyx_v_params); if (unlikely(__pyx_t_4 == ((Py_ssize_t)-1))) __PYX_ERR(0, 957, __pyx_L1_error)
    __pyx_t_5 = __pyx_t_4;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "yirage/_cython/core.pyx":958
 *             cparams.resize(len(params))
 *             for i in range(len(params)):
 *                 cparams[i] = params[i]             # <<<<<<<<<<<<<<
 *         self.p_kgraph.register_task(cname, cparams)
 * 
*/
      if (unlikely(__pyx_v_params == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 958, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_GetItemInt_List(__pyx_v_params, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 958, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_7 = __Pyx_PyLong_As_int(__pyx_t_2); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 958, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      (__pyx_v_cparams[__pyx_v_i]) = __pyx_t_7;
    }

    /* "yirage/_cython/core.pyx":955
 *         cdef vector[int] cparams
 *         cparams.resize(0)
 *         if params is not None:             # <<<<<<<<<<<<<<
 *             cparams.resize(len(params))
 *             for i in range(len(params)):
*/
  }

  /* "yirage/_cython/core.pyx":959
 *             for i in range(len(params)):
 *                 cparams[i] = params[i]
 *         self.p_kgraph.register_task(cname, cparams)             # <<<<<<<<<<<<<<
 * 
 *     def generate_task_graph(self, int num_gpus, int my_gpu_id):
*/
  __pyx_v_self->p_kgraph->register_task(__pyx_v_cname, __pyx_v_cparams);

  /* "yirage/_cython/core.pyx":948
 *         return DTensor(output)
 * 
 *     def register_task(self, CyTBGraph bgraph, str task_type, list[int] params):             # <<<<<<<<<<<<<<
 *         cdef char* cname = NULL
 *         if task_type is not None:
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.register_task", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_byte_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":961
 *         self.p_kgraph.register_task(cname, cparams)
 * 
 *     def generate_task_graph(self, int num_gpus, int my_gpu_id):             # <<<<<<<<<<<<<<
 *         cdef TaskGraphResult result = self.p_kgraph.generate_task_graph(num_gpus, my_gpu_id)
 *         return {
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_71generate_task_graph(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_71generate_task_graph = {"generate_task_graph", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_71generate_task_graph, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_71generate_task_graph(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  int __pyx_v_num_gpus;
  int __pyx_v_my_gpu_id;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_task_graph (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_num_gpus,&__pyx_mstate_global->__pyx_n_u_my_gpu_id,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 961, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 961, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 961, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "generate_task_graph", 0) < 0) __PYX_ERR(0, 961, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("generate_task_graph", 1, 2, 2, i); __PYX_ERR(0, 961, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 961, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 961, __pyx_L3_error)
    }
    __pyx_v_num_gpus = __Pyx_PyLong_As_int(values[0]); if (unlikely((__pyx_v_num_gpus == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 961, __pyx_L3_error)
    __pyx_v_my_gpu_id = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_my_gpu_id == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 961, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate_task_graph", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 961, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.generate_task_graph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_70generate_task_graph(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v_num_gpus, __pyx_v_my_gpu_id);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_70generate_task_graph(struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, int __pyx_v_num_gpus, int __pyx_v_my_gpu_id) {
  yirage::runtime::TaskGraphResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_task_graph", 0);

  /* "yirage/_cython/core.pyx":962
 * 
 *     def generate_task_graph(self, int num_gpus, int my_gpu_id):
 *         cdef TaskGraphResult result = self.p_kgraph.generate_task_graph(num_gpus, my_gpu_id)             # <<<<<<<<<<<<<<
 *         return {
 *             "cuda_code": result.cuda_code.decode("UTF-8"),
*/
  __pyx_v_result = __pyx_v_self->p_kgraph->generate_task_graph(__pyx_v_num_gpus, __pyx_v_my_gpu_id);

  /* "yirage/_cython/core.pyx":963
 *     def generate_task_graph(self, int num_gpus, int my_gpu_id):
 *         cdef TaskGraphResult result = self.p_kgraph.generate_task_graph(num_gpus, my_gpu_id)
 *         return {             # <<<<<<<<<<<<<<
 *             "cuda_code": result.cuda_code.decode("UTF-8"),
 *             "json_file": result.json_file.decode("UTF-8"),
*/
  __Pyx_XDECREF(__pyx_r);

  /* "yirage/_cython/core.pyx":964
 *         cdef TaskGraphResult result = self.p_kgraph.generate_task_graph(num_gpus, my_gpu_id)
 *         return {
 *             "cuda_code": result.cuda_code.decode("UTF-8"),             # <<<<<<<<<<<<<<
 *             "json_file": result.json_file.decode("UTF-8"),
 *         }
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_v_result.cuda_code, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_cuda_code, __pyx_t_2) < 0) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":965
 *         return {
 *             "cuda_code": result.cuda_code.decode("UTF-8"),
 *             "json_file": result.json_file.decode("UTF-8"),             # <<<<<<<<<<<<<<
 *         }
 * 
*/
  __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_v_result.json_file, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 965, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_json_file, __pyx_t_2) < 0) __PYX_ERR(0, 964, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":961
 *         self.p_kgraph.register_task(cname, cparams)
 * 
 *     def generate_task_graph(self, int num_gpus, int my_gpu_id):             # <<<<<<<<<<<<<<
 *         cdef TaskGraphResult result = self.p_kgraph.generate_task_graph(num_gpus, my_gpu_id)
 *         return {
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.CyKNGraph.generate_task_graph", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_73__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_73__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_73__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_73__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_72__reduce_cython__(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_72__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.CyKNGraph.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_75__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyKNGraph_75__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_75__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyKNGraph_75__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyKNGraph.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_9CyKNGraph_74__setstate_cython__(((struct __pyx_obj_6yirage_4core_CyKNGraph *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyKNGraph_74__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.CyKNGraph.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":972
 *     cdef CppTBGraph *p_bgraph #Hold a CppTBGraph instance
 * 
 *     def __cinit__(self, tuple grid_dim = (), tuple block_dim = (), int forloop_range = -1, int dimx = -1, bgraph = None):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         cdef dim3 c_grid_dim
*/

/* Python wrapper */
static int __pyx_pw_6yirage_4core_9CyTBGraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6yirage_4core_9CyTBGraph_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_grid_dim = 0;
  PyObject *__pyx_v_block_dim = 0;
  int __pyx_v_forloop_range;
  int __pyx_v_dimx;
  PyObject *__pyx_v_bgraph = 0;
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[5] = {0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return -1;
  #endif
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_grid_dim,&__pyx_mstate_global->__pyx_n_u_block_dim,&__pyx_mstate_global->__pyx_n_u_forloop_range,&__pyx_mstate_global->__pyx_n_u_dimx,&__pyx_mstate_global->__pyx_n_u_bgraph,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_VARARGS(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 972, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_VARARGS(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 972, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 972, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 972, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 972, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 972, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__cinit__", 0) < 0) __PYX_ERR(0, 972, __pyx_L3_error)
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject*)__pyx_mstate_global->__pyx_empty_tuple));
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject*)__pyx_mstate_global->__pyx_empty_tuple));
      if (!values[4]) values[4] = __Pyx_NewRef(((PyObject *)Py_None));
    } else {
      switch (__pyx_nargs) {
        case  5:
        values[4] = __Pyx_ArgRef_VARARGS(__pyx_args, 4);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[4])) __PYX_ERR(0, 972, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  4:
        values[3] = __Pyx_ArgRef_VARARGS(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 972, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_VARARGS(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 972, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_VARARGS(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 972, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_VARARGS(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 972, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[0]) values[0] = __Pyx_NewRef(((PyObject*)__pyx_mstate_global->__pyx_empty_tuple));
      if (!values[1]) values[1] = __Pyx_NewRef(((PyObject*)__pyx_mstate_global->__pyx_empty_tuple));
      if (!values[4]) values[4] = __Pyx_NewRef(((PyObject *)Py_None));
    }
    __pyx_v_grid_dim = ((PyObject*)values[0]);
    __pyx_v_block_dim = ((PyObject*)values[1]);
    if (values[2]) {
      __pyx_v_forloop_range = __Pyx_PyLong_As_int(values[2]); if (unlikely((__pyx_v_forloop_range == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 972, __pyx_L3_error)
    } else {
      __pyx_v_forloop_range = ((int)-1);
    }
    if (values[3]) {
      __pyx_v_dimx = __Pyx_PyLong_As_int(values[3]); if (unlikely((__pyx_v_dimx == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 972, __pyx_L3_error)
    } else {
      __pyx_v_dimx = ((int)-1);
    }
    __pyx_v_bgraph = values[4];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 5, __pyx_nargs); __PYX_ERR(0, 972, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_grid_dim), (&PyTuple_Type), 1, "grid_dim", 1))) __PYX_ERR(0, 972, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_block_dim), (&PyTuple_Type), 1, "block_dim", 1))) __PYX_ERR(0, 972, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph___cinit__(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_grid_dim, __pyx_v_block_dim, __pyx_v_forloop_range, __pyx_v_dimx, __pyx_v_bgraph);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6yirage_4core_9CyTBGraph___cinit__(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, PyObject *__pyx_v_grid_dim, PyObject *__pyx_v_block_dim, int __pyx_v_forloop_range, int __pyx_v_dimx, PyObject *__pyx_v_bgraph) {
  unsigned PY_LONG_LONG __pyx_v_ptr;
  dim3 __pyx_v_c_grid_dim;
  dim3 __pyx_v_c_block_dim;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  unsigned int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  size_t __pyx_t_10;
  unsigned PY_LONG_LONG __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "yirage/_cython/core.pyx":976
 *         cdef dim3 c_grid_dim
 *         cdef dim3 c_block_dim
 *         if bgraph is None:             # <<<<<<<<<<<<<<
 *             if len(grid_dim) == 0 or len(block_dim) == 0 or forloop_range == -1 or dimx == -1:
 *                 assert False, "grid_dim, block_dim, forloop_range, dimx must be provided"
*/
  __pyx_t_1 = (__pyx_v_bgraph == Py_None);
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":977
 *         cdef dim3 c_block_dim
 *         if bgraph is None:
 *             if len(grid_dim) == 0 or len(block_dim) == 0 or forloop_range == -1 or dimx == -1:             # <<<<<<<<<<<<<<
 *                 assert False, "grid_dim, block_dim, forloop_range, dimx must be provided"
 *             assert len(grid_dim) == 3, "grid_dim must include 3 dimensions"
*/
    if (unlikely(__pyx_v_grid_dim == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 977, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v_grid_dim); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 977, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_2 == 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    if (unlikely(__pyx_v_block_dim == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 977, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v_block_dim); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 977, __pyx_L1_error)
    __pyx_t_3 = (__pyx_t_2 == 0);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_forloop_range == -1L);
    if (!__pyx_t_3) {
    } else {
      __pyx_t_1 = __pyx_t_3;
      goto __pyx_L5_bool_binop_done;
    }
    __pyx_t_3 = (__pyx_v_dimx == -1L);
    __pyx_t_1 = __pyx_t_3;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_1) {

      /* "yirage/_cython/core.pyx":978
 *         if bgraph is None:
 *             if len(grid_dim) == 0 or len(block_dim) == 0 or forloop_range == -1 or dimx == -1:
 *                 assert False, "grid_dim, block_dim, forloop_range, dimx must be provided"             # <<<<<<<<<<<<<<
 *             assert len(grid_dim) == 3, "grid_dim must include 3 dimensions"
 *             assert len(block_dim) == 3, "block_dim must include 3 dimensions"
*/
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(__pyx_assertions_enabled())) {
        if (unlikely(!0)) {
          __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_grid_dim_block_dim_forloop_range, 0, 0);
          __PYX_ERR(0, 978, __pyx_L1_error)
        }
      }
      #else
      if ((1)); else __PYX_ERR(0, 978, __pyx_L1_error)
      #endif

      /* "yirage/_cython/core.pyx":977
 *         cdef dim3 c_block_dim
 *         if bgraph is None:
 *             if len(grid_dim) == 0 or len(block_dim) == 0 or forloop_range == -1 or dimx == -1:             # <<<<<<<<<<<<<<
 *                 assert False, "grid_dim, block_dim, forloop_range, dimx must be provided"
 *             assert len(grid_dim) == 3, "grid_dim must include 3 dimensions"
*/
    }

    /* "yirage/_cython/core.pyx":979
 *             if len(grid_dim) == 0 or len(block_dim) == 0 or forloop_range == -1 or dimx == -1:
 *                 assert False, "grid_dim, block_dim, forloop_range, dimx must be provided"
 *             assert len(grid_dim) == 3, "grid_dim must include 3 dimensions"             # <<<<<<<<<<<<<<
 *             assert len(block_dim) == 3, "block_dim must include 3 dimensions"
 *             c_grid_dim.x = grid_dim[0]
*/
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(__pyx_assertions_enabled())) {
      if (unlikely(__pyx_v_grid_dim == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        __PYX_ERR(0, 979, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v_grid_dim); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 979, __pyx_L1_error)
      __pyx_t_1 = (__pyx_t_2 == 3);
      if (unlikely(!__pyx_t_1)) {
        __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_grid_dim_must_include_3_dimensio, 0, 0);
        __PYX_ERR(0, 979, __pyx_L1_error)
      }
    }
    #else
    if ((1)); else __PYX_ERR(0, 979, __pyx_L1_error)
    #endif

    /* "yirage/_cython/core.pyx":980
 *                 assert False, "grid_dim, block_dim, forloop_range, dimx must be provided"
 *             assert len(grid_dim) == 3, "grid_dim must include 3 dimensions"
 *             assert len(block_dim) == 3, "block_dim must include 3 dimensions"             # <<<<<<<<<<<<<<
 *             c_grid_dim.x = grid_dim[0]
 *             c_grid_dim.y = grid_dim[1]
*/
    #ifndef CYTHON_WITHOUT_ASSERTIONS
    if (unlikely(__pyx_assertions_enabled())) {
      if (unlikely(__pyx_v_block_dim == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
        __PYX_ERR(0, 980, __pyx_L1_error)
      }
      __pyx_t_2 = __Pyx_PyTuple_GET_SIZE(__pyx_v_block_dim); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 980, __pyx_L1_error)
      __pyx_t_1 = (__pyx_t_2 == 3);
      if (unlikely(!__pyx_t_1)) {
        __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_block_dim_must_include_3_dimensi, 0, 0);
        __PYX_ERR(0, 980, __pyx_L1_error)
      }
    }
    #else
    if ((1)); else __PYX_ERR(0, 980, __pyx_L1_error)
    #endif

    /* "yirage/_cython/core.pyx":981
 *             assert len(grid_dim) == 3, "grid_dim must include 3 dimensions"
 *             assert len(block_dim) == 3, "block_dim must include 3 dimensions"
 *             c_grid_dim.x = grid_dim[0]             # <<<<<<<<<<<<<<
 *             c_grid_dim.y = grid_dim[1]
 *             c_grid_dim.z = grid_dim[2]
*/
    if (unlikely(__pyx_v_grid_dim == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 981, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_grid_dim, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 981, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyLong_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 981, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_c_grid_dim.x = __pyx_t_5;

    /* "yirage/_cython/core.pyx":982
 *             assert len(block_dim) == 3, "block_dim must include 3 dimensions"
 *             c_grid_dim.x = grid_dim[0]
 *             c_grid_dim.y = grid_dim[1]             # <<<<<<<<<<<<<<
 *             c_grid_dim.z = grid_dim[2]
 *             c_block_dim.x = block_dim[0]
*/
    if (unlikely(__pyx_v_grid_dim == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 982, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_grid_dim, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 982, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyLong_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 982, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_c_grid_dim.y = __pyx_t_5;

    /* "yirage/_cython/core.pyx":983
 *             c_grid_dim.x = grid_dim[0]
 *             c_grid_dim.y = grid_dim[1]
 *             c_grid_dim.z = grid_dim[2]             # <<<<<<<<<<<<<<
 *             c_block_dim.x = block_dim[0]
 *             c_block_dim.y = block_dim[1]
*/
    if (unlikely(__pyx_v_grid_dim == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 983, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_grid_dim, 2, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 983, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyLong_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 983, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_c_grid_dim.z = __pyx_t_5;

    /* "yirage/_cython/core.pyx":984
 *             c_grid_dim.y = grid_dim[1]
 *             c_grid_dim.z = grid_dim[2]
 *             c_block_dim.x = block_dim[0]             # <<<<<<<<<<<<<<
 *             c_block_dim.y = block_dim[1]
 *             c_block_dim.z = block_dim[2]
*/
    if (unlikely(__pyx_v_block_dim == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 984, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_block_dim, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 984, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyLong_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 984, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_c_block_dim.x = __pyx_t_5;

    /* "yirage/_cython/core.pyx":985
 *             c_grid_dim.z = grid_dim[2]
 *             c_block_dim.x = block_dim[0]
 *             c_block_dim.y = block_dim[1]             # <<<<<<<<<<<<<<
 *             c_block_dim.z = block_dim[2]
 *             self.p_bgraph = new CppTBGraph(c_grid_dim, c_block_dim, forloop_range, dimx)
*/
    if (unlikely(__pyx_v_block_dim == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 985, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_block_dim, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyLong_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 985, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_c_block_dim.y = __pyx_t_5;

    /* "yirage/_cython/core.pyx":986
 *             c_block_dim.x = block_dim[0]
 *             c_block_dim.y = block_dim[1]
 *             c_block_dim.z = block_dim[2]             # <<<<<<<<<<<<<<
 *             self.p_bgraph = new CppTBGraph(c_grid_dim, c_block_dim, forloop_range, dimx)
 *         else:
*/
    if (unlikely(__pyx_v_block_dim == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 986, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_GetItemInt_Tuple(__pyx_v_block_dim, 2, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyLong_As_unsigned_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 986, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_c_block_dim.z = __pyx_t_5;

    /* "yirage/_cython/core.pyx":987
 *             c_block_dim.y = block_dim[1]
 *             c_block_dim.z = block_dim[2]
 *             self.p_bgraph = new CppTBGraph(c_grid_dim, c_block_dim, forloop_range, dimx)             # <<<<<<<<<<<<<<
 *         else:
 *             ptr = ctypes.cast(bgraph, ctypes.c_void_p).value
*/
    __pyx_v_self->p_bgraph = new yirage::threadblock::Graph(__pyx_v_c_grid_dim, __pyx_v_c_block_dim, __pyx_v_forloop_range, __pyx_v_dimx);

    /* "yirage/_cython/core.pyx":976
 *         cdef dim3 c_grid_dim
 *         cdef dim3 c_block_dim
 *         if bgraph is None:             # <<<<<<<<<<<<<<
 *             if len(grid_dim) == 0 or len(block_dim) == 0 or forloop_range == -1 or dimx == -1:
 *                 assert False, "grid_dim, block_dim, forloop_range, dimx must be provided"
*/
    goto __pyx_L3;
  }

  /* "yirage/_cython/core.pyx":989
 *             self.p_bgraph = new CppTBGraph(c_grid_dim, c_block_dim, forloop_range, dimx)
 *         else:
 *             ptr = ctypes.cast(bgraph, ctypes.c_void_p).value             # <<<<<<<<<<<<<<
 *             if isinstance(bgraph, int):
 *                 self.p_bgraph = <CppTBGraph*>(ptr)
*/
  /*else*/ {
    __pyx_t_6 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_10 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
      assert(__pyx_t_6);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_8, __pyx__function);
      __pyx_t_10 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_v_bgraph, __pyx_t_9};
      __pyx_t_4 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_10, (3-__pyx_t_10) | (__pyx_t_10*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 989, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    }
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_value); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_11 = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(__pyx_t_8); if (unlikely((__pyx_t_11 == (unsigned PY_LONG_LONG)-1) && PyErr_Occurred())) __PYX_ERR(0, 989, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_ptr = __pyx_t_11;

    /* "yirage/_cython/core.pyx":990
 *         else:
 *             ptr = ctypes.cast(bgraph, ctypes.c_void_p).value
 *             if isinstance(bgraph, int):             # <<<<<<<<<<<<<<
 *                 self.p_bgraph = <CppTBGraph*>(ptr)
 *             elif isinstance(bgraph, ctypes.c_void_p):
*/
    __pyx_t_1 = PyLong_Check(__pyx_v_bgraph); 
    if (__pyx_t_1) {

      /* "yirage/_cython/core.pyx":991
 *             ptr = ctypes.cast(bgraph, ctypes.c_void_p).value
 *             if isinstance(bgraph, int):
 *                 self.p_bgraph = <CppTBGraph*>(ptr)             # <<<<<<<<<<<<<<
 *             elif isinstance(bgraph, ctypes.c_void_p):
 *                 self.p_bgraph = <CppTBGraph*>(ptr)
*/
      __pyx_v_self->p_bgraph = ((yirage::threadblock::Graph *)__pyx_v_ptr);

      /* "yirage/_cython/core.pyx":990
 *         else:
 *             ptr = ctypes.cast(bgraph, ctypes.c_void_p).value
 *             if isinstance(bgraph, int):             # <<<<<<<<<<<<<<
 *                 self.p_bgraph = <CppTBGraph*>(ptr)
 *             elif isinstance(bgraph, ctypes.c_void_p):
*/
      goto __pyx_L9;
    }

    /* "yirage/_cython/core.pyx":992
 *             if isinstance(bgraph, int):
 *                 self.p_bgraph = <CppTBGraph*>(ptr)
 *             elif isinstance(bgraph, ctypes.c_void_p):             # <<<<<<<<<<<<<<
 *                 self.p_bgraph = <CppTBGraph*>(ptr)
 *             else:
*/
    __Pyx_GetModuleGlobalName(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 992, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_1 = PyObject_IsInstance(__pyx_v_bgraph, __pyx_t_4); if (unlikely(__pyx_t_1 == ((int)-1))) __PYX_ERR(0, 992, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "yirage/_cython/core.pyx":993
 *                 self.p_bgraph = <CppTBGraph*>(ptr)
 *             elif isinstance(bgraph, ctypes.c_void_p):
 *                 self.p_bgraph = <CppTBGraph*>(ptr)             # <<<<<<<<<<<<<<
 *             else:
 *                 assert False, "bgraph must be an integer or ctypes.c_void_p, but got " + str(type(bgraph))
*/
      __pyx_v_self->p_bgraph = ((yirage::threadblock::Graph *)__pyx_v_ptr);

      /* "yirage/_cython/core.pyx":992
 *             if isinstance(bgraph, int):
 *                 self.p_bgraph = <CppTBGraph*>(ptr)
 *             elif isinstance(bgraph, ctypes.c_void_p):             # <<<<<<<<<<<<<<
 *                 self.p_bgraph = <CppTBGraph*>(ptr)
 *             else:
*/
      goto __pyx_L9;
    }

    /* "yirage/_cython/core.pyx":995
 *                 self.p_bgraph = <CppTBGraph*>(ptr)
 *             else:
 *                 assert False, "bgraph must be an integer or ctypes.c_void_p, but got " + str(type(bgraph))             # <<<<<<<<<<<<<<
 * 
 *     def new_input(self, DTensor dtensor, tuple input_map, int forloop_dim, bool store_in_dmem = False):
*/
    /*else*/ {
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(__pyx_assertions_enabled())) {
        if (unlikely(!0)) {
          __pyx_t_4 = __Pyx_PyObject_Unicode(((PyObject *)Py_TYPE(__pyx_v_bgraph))); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 995, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_8 = __Pyx_PyUnicode_Concat(__pyx_mstate_global->__pyx_kp_u_bgraph_must_be_an_integer_or_cty, __pyx_t_4); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 995, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_t_8, 0, 0);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __PYX_ERR(0, 995, __pyx_L1_error)
        }
      }
      #else
      if ((1)); else __PYX_ERR(0, 995, __pyx_L1_error)
      #endif
    }
    __pyx_L9:;
  }
  __pyx_L3:;

  /* "yirage/_cython/core.pyx":972
 *     cdef CppTBGraph *p_bgraph #Hold a CppTBGraph instance
 * 
 *     def __cinit__(self, tuple grid_dim = (), tuple block_dim = (), int forloop_range = -1, int dimx = -1, bgraph = None):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long ptr
 *         cdef dim3 c_grid_dim
*/

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":997
 *                 assert False, "bgraph must be an integer or ctypes.c_void_p, but got " + str(type(bgraph))
 * 
 *     def new_input(self, DTensor dtensor, tuple input_map, int forloop_dim, bool store_in_dmem = False):             # <<<<<<<<<<<<<<
 *         assert len(input_map) == 3, "input_map must be of length 3"
 *         cdef int3 c_input_map
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_3new_input(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_3new_input = {"new_input", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_3new_input, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_3new_input(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_dtensor = 0;
  PyObject *__pyx_v_input_map = 0;
  int __pyx_v_forloop_dim;
  bool __pyx_v_store_in_dmem;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_input (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_dtensor,&__pyx_mstate_global->__pyx_n_u_input_map,&__pyx_mstate_global->__pyx_n_u_forloop_dim,&__pyx_mstate_global->__pyx_n_u_store_in_dmem,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 997, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 997, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 997, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 997, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 997, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "new_input", 0) < 0) __PYX_ERR(0, 997, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("new_input", 0, 3, 4, i); __PYX_ERR(0, 997, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 997, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 997, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 997, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 997, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_dtensor = ((struct __pyx_obj_6yirage_4core_DTensor *)values[0]);
    __pyx_v_input_map = ((PyObject*)values[1]);
    __pyx_v_forloop_dim = __Pyx_PyLong_As_int(values[2]); if (unlikely((__pyx_v_forloop_dim == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 997, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_store_in_dmem = __Pyx_PyObject_IsTrue(values[3]); if (unlikely((__pyx_v_store_in_dmem == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 997, __pyx_L3_error)
    } else {
      __pyx_v_store_in_dmem = ((bool)0);
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("new_input", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 997, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.new_input", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_dtensor), __pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, 1, "dtensor", 0))) __PYX_ERR(0, 997, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input_map), (&PyTuple_Type), 1, "input_map", 1))) __PYX_ERR(0, 997, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_2new_input(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_dtensor, __pyx_v_input_map, __pyx_v_forloop_dim, __pyx_v_store_in_dmem);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_2new_input(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_DTensor *__pyx_v_dtensor, PyObject *__pyx_v_input_map, int __pyx_v_forloop_dim, bool __pyx_v_store_in_dmem) {
  int3 __pyx_v_c_input_map;
  struct yirage::kernel::DTensor *__pyx_v_dtensor_cptr;
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  struct yirage::kernel::DTensor *__pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_input", 0);

  /* "yirage/_cython/core.pyx":998
 * 
 *     def new_input(self, DTensor dtensor, tuple input_map, int forloop_dim, bool store_in_dmem = False):
 *         assert len(input_map) == 3, "input_map must be of length 3"             # <<<<<<<<<<<<<<
 *         cdef int3 c_input_map
 *         c_input_map.x = input_map[0]
*/
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    if (unlikely(__pyx_v_input_map == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 998, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_input_map); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 998, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 3);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_input_map_must_be_of_length_3, 0, 0);
      __PYX_ERR(0, 998, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 998, __pyx_L1_error)
  #endif

  /* "yirage/_cython/core.pyx":1000
 *         assert len(input_map) == 3, "input_map must be of length 3"
 *         cdef int3 c_input_map
 *         c_input_map.x = input_map[0]             # <<<<<<<<<<<<<<
 *         c_input_map.y = input_map[1]
 *         c_input_map.z = input_map[2]
*/
  if (unlikely(__pyx_v_input_map == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1000, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_input_map, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyLong_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1000, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_c_input_map.x = __pyx_t_4;

  /* "yirage/_cython/core.pyx":1001
 *         cdef int3 c_input_map
 *         c_input_map.x = input_map[0]
 *         c_input_map.y = input_map[1]             # <<<<<<<<<<<<<<
 *         c_input_map.z = input_map[2]
 *         cdef CppDTensor* dtensor_cptr = NULL
*/
  if (unlikely(__pyx_v_input_map == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1001, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_input_map, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyLong_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1001, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_c_input_map.y = __pyx_t_4;

  /* "yirage/_cython/core.pyx":1002
 *         c_input_map.x = input_map[0]
 *         c_input_map.y = input_map[1]
 *         c_input_map.z = input_map[2]             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* dtensor_cptr = NULL
 *         if dtensor is not None:
*/
  if (unlikely(__pyx_v_input_map == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1002, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_input_map, 2, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1002, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyLong_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1002, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_c_input_map.z = __pyx_t_4;

  /* "yirage/_cython/core.pyx":1003
 *         c_input_map.y = input_map[1]
 *         c_input_map.z = input_map[2]
 *         cdef CppDTensor* dtensor_cptr = NULL             # <<<<<<<<<<<<<<
 *         if dtensor is not None:
 *             dtensor_cptr = dtensor.c_ptr
*/
  __pyx_v_dtensor_cptr = NULL;

  /* "yirage/_cython/core.pyx":1004
 *         c_input_map.z = input_map[2]
 *         cdef CppDTensor* dtensor_cptr = NULL
 *         if dtensor is not None:             # <<<<<<<<<<<<<<
 *             dtensor_cptr = dtensor.c_ptr
 *         cdef CppSTensor* ptr = self.p_bgraph.new_input(dtensor_cptr, c_input_map, forloop_dim, SmemRowMajor, store_in_dmem)
*/
  __pyx_t_2 = (((PyObject *)__pyx_v_dtensor) != Py_None);
  if (__pyx_t_2) {

    /* "yirage/_cython/core.pyx":1005
 *         cdef CppDTensor* dtensor_cptr = NULL
 *         if dtensor is not None:
 *             dtensor_cptr = dtensor.c_ptr             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.new_input(dtensor_cptr, c_input_map, forloop_dim, SmemRowMajor, store_in_dmem)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
    __pyx_t_5 = __pyx_v_dtensor->c_ptr;
    __pyx_v_dtensor_cptr = __pyx_t_5;

    /* "yirage/_cython/core.pyx":1004
 *         c_input_map.z = input_map[2]
 *         cdef CppDTensor* dtensor_cptr = NULL
 *         if dtensor is not None:             # <<<<<<<<<<<<<<
 *             dtensor_cptr = dtensor.c_ptr
 *         cdef CppSTensor* ptr = self.p_bgraph.new_input(dtensor_cptr, c_input_map, forloop_dim, SmemRowMajor, store_in_dmem)
*/
  }

  /* "yirage/_cython/core.pyx":1006
 *         if dtensor is not None:
 *             dtensor_cptr = dtensor.c_ptr
 *         cdef CppSTensor* ptr = self.p_bgraph.new_input(dtensor_cptr, c_input_map, forloop_dim, SmemRowMajor, store_in_dmem)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->new_input(__pyx_v_dtensor_cptr, __pyx_v_c_input_map, __pyx_v_forloop_dim, yirage::layout::SmemRowMajor, __pyx_v_store_in_dmem);

  /* "yirage/_cython/core.pyx":1007
 *             dtensor_cptr = dtensor.c_ptr
 *         cdef CppSTensor* ptr = self.p_bgraph.new_input(dtensor_cptr, c_input_map, forloop_dim, SmemRowMajor, store_in_dmem)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_6 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_7 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1007, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_11 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_8))) {
    __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
    assert(__pyx_t_6);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_8);
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_8, __pyx__function);
    __pyx_t_11 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_t_7, __pyx_t_10};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_11, (3-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1007, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_v_t = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":1008
 *         cdef CppSTensor* ptr = self.p_bgraph.new_input(dtensor_cptr, c_input_map, forloop_dim, SmemRowMajor, store_in_dmem)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def new_output(self, STensor stensor, tuple output_map, int forloop_dim, str epilogue = None):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_10 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_11 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_t};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1008, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_3);
  }
  __pyx_r = ((PyObject *)__pyx_t_3);
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":997
 *                 assert False, "bgraph must be an integer or ctypes.c_void_p, but got " + str(type(bgraph))
 * 
 *     def new_input(self, DTensor dtensor, tuple input_map, int forloop_dim, bool store_in_dmem = False):             # <<<<<<<<<<<<<<
 *         assert len(input_map) == 3, "input_map must be of length 3"
 *         cdef int3 c_input_map
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.new_input", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1010
 *         return STensor(t)
 * 
 *     def new_output(self, STensor stensor, tuple output_map, int forloop_dim, str epilogue = None):             # <<<<<<<<<<<<<<
 *         assert len(output_map) == 3, "output_map must be of length 3"
 *         cdef int3 c_output_map
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_5new_output(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_5new_output = {"new_output", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_5new_output, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_5new_output(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_stensor = 0;
  PyObject *__pyx_v_output_map = 0;
  int __pyx_v_forloop_dim;
  PyObject *__pyx_v_epilogue = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[4] = {0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_output (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_stensor,&__pyx_mstate_global->__pyx_n_u_output_map,&__pyx_mstate_global->__pyx_n_u_forloop_dim,&__pyx_mstate_global->__pyx_n_u_epilogue,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1010, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1010, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1010, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1010, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1010, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "new_output", 0) < 0) __PYX_ERR(0, 1010, __pyx_L3_error)
      if (!values[3]) values[3] = __Pyx_NewRef(((PyObject*)Py_None));
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("new_output", 0, 3, 4, i); __PYX_ERR(0, 1010, __pyx_L3_error) }
      }
    } else {
      switch (__pyx_nargs) {
        case  4:
        values[3] = __Pyx_ArgRef_FASTCALL(__pyx_args, 3);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[3])) __PYX_ERR(0, 1010, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1010, __pyx_L3_error)
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1010, __pyx_L3_error)
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1010, __pyx_L3_error)
        break;
        default: goto __pyx_L5_argtuple_error;
      }
      if (!values[3]) values[3] = __Pyx_NewRef(((PyObject*)Py_None));
    }
    __pyx_v_stensor = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
    __pyx_v_output_map = ((PyObject*)values[1]);
    __pyx_v_forloop_dim = __Pyx_PyLong_As_int(values[2]); if (unlikely((__pyx_v_forloop_dim == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1010, __pyx_L3_error)
    __pyx_v_epilogue = ((PyObject*)values[3]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("new_output", 0, 3, 4, __pyx_nargs); __PYX_ERR(0, 1010, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.new_output", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_stensor), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "stensor", 0))) __PYX_ERR(0, 1010, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_output_map), (&PyTuple_Type), 1, "output_map", 1))) __PYX_ERR(0, 1010, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_epilogue), (&PyUnicode_Type), 1, "epilogue", 1))) __PYX_ERR(0, 1010, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_4new_output(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_stensor, __pyx_v_output_map, __pyx_v_forloop_dim, __pyx_v_epilogue);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_4new_output(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_stensor, PyObject *__pyx_v_output_map, int __pyx_v_forloop_dim, PyObject *__pyx_v_epilogue) {
  int3 __pyx_v_c_output_map;
  PyObject *__pyx_v_epilogue_type = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  enum yirage::type::TBEpilogueType __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("new_output", 0);

  /* "yirage/_cython/core.pyx":1011
 * 
 *     def new_output(self, STensor stensor, tuple output_map, int forloop_dim, str epilogue = None):
 *         assert len(output_map) == 3, "output_map must be of length 3"             # <<<<<<<<<<<<<<
 *         cdef int3 c_output_map
 *         c_output_map.x = output_map[0]
*/
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    if (unlikely(__pyx_v_output_map == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1011, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyTuple_GET_SIZE(__pyx_v_output_map); if (unlikely(__pyx_t_1 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1011, __pyx_L1_error)
    __pyx_t_2 = (__pyx_t_1 == 3);
    if (unlikely(!__pyx_t_2)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_output_map_must_be_of_length_3, 0, 0);
      __PYX_ERR(0, 1011, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1011, __pyx_L1_error)
  #endif

  /* "yirage/_cython/core.pyx":1013
 *         assert len(output_map) == 3, "output_map must be of length 3"
 *         cdef int3 c_output_map
 *         c_output_map.x = output_map[0]             # <<<<<<<<<<<<<<
 *         c_output_map.y = output_map[1]
 *         c_output_map.z = output_map[2]
*/
  if (unlikely(__pyx_v_output_map == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1013, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_output_map, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyLong_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1013, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_c_output_map.x = __pyx_t_4;

  /* "yirage/_cython/core.pyx":1014
 *         cdef int3 c_output_map
 *         c_output_map.x = output_map[0]
 *         c_output_map.y = output_map[1]             # <<<<<<<<<<<<<<
 *         c_output_map.z = output_map[2]
 *         epilogue_type = string_to_tbepilogue(epilogue)
*/
  if (unlikely(__pyx_v_output_map == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1014, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_output_map, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyLong_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1014, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_c_output_map.y = __pyx_t_4;

  /* "yirage/_cython/core.pyx":1015
 *         c_output_map.x = output_map[0]
 *         c_output_map.y = output_map[1]
 *         c_output_map.z = output_map[2]             # <<<<<<<<<<<<<<
 *         epilogue_type = string_to_tbepilogue(epilogue)
 *         self.p_bgraph.new_output(stensor.c_ptr, c_output_map, forloop_dim, epilogue_type)
*/
  if (unlikely(__pyx_v_output_map == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    __PYX_ERR(0, 1015, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_GetItemInt_Tuple(__pyx_v_output_map, 2, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyLong_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1015, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_c_output_map.z = __pyx_t_4;

  /* "yirage/_cython/core.pyx":1016
 *         c_output_map.y = output_map[1]
 *         c_output_map.z = output_map[2]
 *         epilogue_type = string_to_tbepilogue(epilogue)             # <<<<<<<<<<<<<<
 *         self.p_bgraph.new_output(stensor.c_ptr, c_output_map, forloop_dim, epilogue_type)
 * 
*/
  __pyx_t_5 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_string_to_tbepilogue); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1016, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_6);
    assert(__pyx_t_5);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_5);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_6, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_epilogue};
    __pyx_t_3 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1016, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
  }
  __pyx_v_epilogue_type = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":1017
 *         c_output_map.z = output_map[2]
 *         epilogue_type = string_to_tbepilogue(epilogue)
 *         self.p_bgraph.new_output(stensor.c_ptr, c_output_map, forloop_dim, epilogue_type)             # <<<<<<<<<<<<<<
 * 
 *     def matmul(self, STensor A, STensor B):
*/
  __pyx_t_8 = ((enum yirage::type::TBEpilogueType)__Pyx_PyLong_As_enum__yirage_3a__3a_type_3a__3a_TBEpilogueType(__pyx_v_epilogue_type)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1017, __pyx_L1_error)
  (void)(__pyx_v_self->p_bgraph->new_output(__pyx_v_stensor->c_ptr, __pyx_v_c_output_map, __pyx_v_forloop_dim, __pyx_t_8));

  /* "yirage/_cython/core.pyx":1010
 *         return STensor(t)
 * 
 *     def new_output(self, STensor stensor, tuple output_map, int forloop_dim, str epilogue = None):             # <<<<<<<<<<<<<<
 *         assert len(output_map) == 3, "output_map must be of length 3"
 *         cdef int3 c_output_map
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.new_output", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_epilogue_type);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1019
 *         self.p_bgraph.new_output(stensor.c_ptr, c_output_map, forloop_dim, epilogue_type)
 * 
 *     def matmul(self, STensor A, STensor B):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.matmul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_7matmul(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_7matmul = {"matmul", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_7matmul, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_7matmul(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("matmul (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_B,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1019, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1019, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1019, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "matmul", 0) < 0) __PYX_ERR(0, 1019, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("matmul", 1, 2, 2, i); __PYX_ERR(0, 1019, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1019, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1019, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
    __pyx_v_B = ((struct __pyx_obj_6yirage_4core_STensor *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("matmul", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1019, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.matmul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1019, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "B", 0))) __PYX_ERR(0, 1019, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_6matmul(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_B);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_6matmul(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("matmul", 0);

  /* "yirage/_cython/core.pyx":1020
 * 
 *     def matmul(self, STensor A, STensor B):
 *         cdef CppSTensor* ptr = self.p_bgraph.matmul(A.c_ptr, B.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->matmul(__pyx_v_A->c_ptr, __pyx_v_B->c_ptr);

  /* "yirage/_cython/core.pyx":1021
 *     def matmul(self, STensor A, STensor B):
 *         cdef CppSTensor* ptr = self.p_bgraph.matmul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1021, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1021, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1022
 *         cdef CppSTensor* ptr = self.p_bgraph.matmul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def exp(self, STensor A):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1022, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1019
 *         self.p_bgraph.new_output(stensor.c_ptr, c_output_map, forloop_dim, epilogue_type)
 * 
 *     def matmul(self, STensor A, STensor B):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.matmul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.matmul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1024
 *         return STensor(t)
 * 
 *     def exp(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.exp(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_9exp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_9exp = {"exp", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_9exp, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_9exp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("exp (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1024, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1024, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "exp", 0) < 0) __PYX_ERR(0, 1024, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("exp", 1, 1, 1, i); __PYX_ERR(0, 1024, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1024, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("exp", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1024, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1024, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_8exp(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_8exp(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("exp", 0);

  /* "yirage/_cython/core.pyx":1025
 * 
 *     def exp(self, STensor A):
 *         cdef CppSTensor* ptr = self.p_bgraph.exp(A.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->exp(__pyx_v_A->c_ptr);

  /* "yirage/_cython/core.pyx":1026
 *     def exp(self, STensor A):
 *         cdef CppSTensor* ptr = self.p_bgraph.exp(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1026, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1026, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1027
 *         cdef CppSTensor* ptr = self.p_bgraph.exp(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def silu(self, STensor A):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1027, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1024
 *         return STensor(t)
 * 
 *     def exp(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.exp(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.exp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1029
 *         return STensor(t)
 * 
 *     def silu(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.silu(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_11silu(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_11silu = {"silu", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_11silu, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_11silu(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("silu (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1029, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1029, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "silu", 0) < 0) __PYX_ERR(0, 1029, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("silu", 1, 1, 1, i); __PYX_ERR(0, 1029, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1029, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("silu", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1029, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.silu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1029, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_10silu(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_10silu(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("silu", 0);

  /* "yirage/_cython/core.pyx":1030
 * 
 *     def silu(self, STensor A):
 *         cdef CppSTensor* ptr = self.p_bgraph.silu(A.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->silu(__pyx_v_A->c_ptr);

  /* "yirage/_cython/core.pyx":1031
 *     def silu(self, STensor A):
 *         cdef CppSTensor* ptr = self.p_bgraph.silu(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1031, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1031, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1032
 *         cdef CppSTensor* ptr = self.p_bgraph.silu(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def gelu(self, STensor A):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1032, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1029
 *         return STensor(t)
 * 
 *     def silu(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.silu(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.silu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1034
 *         return STensor(t)
 * 
 *     def gelu(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.gelu(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_13gelu(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_13gelu = {"gelu", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_13gelu, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_13gelu(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("gelu (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1034, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1034, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "gelu", 0) < 0) __PYX_ERR(0, 1034, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("gelu", 1, 1, 1, i); __PYX_ERR(0, 1034, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1034, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("gelu", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1034, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.gelu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1034, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_12gelu(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_12gelu(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("gelu", 0);

  /* "yirage/_cython/core.pyx":1035
 * 
 *     def gelu(self, STensor A):
 *         cdef CppSTensor* ptr = self.p_bgraph.gelu(A.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->gelu(__pyx_v_A->c_ptr);

  /* "yirage/_cython/core.pyx":1036
 *     def gelu(self, STensor A):
 *         cdef CppSTensor* ptr = self.p_bgraph.gelu(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1036, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1036, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1037
 *         cdef CppSTensor* ptr = self.p_bgraph.gelu(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def relu(self, STensor A):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1037, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1034
 *         return STensor(t)
 * 
 *     def gelu(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.gelu(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.gelu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1039
 *         return STensor(t)
 * 
 *     def relu(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.relu(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_15relu(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_15relu = {"relu", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_15relu, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_15relu(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("relu (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1039, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1039, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "relu", 0) < 0) __PYX_ERR(0, 1039, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("relu", 1, 1, 1, i); __PYX_ERR(0, 1039, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1039, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("relu", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1039, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.relu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1039, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_14relu(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_14relu(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("relu", 0);

  /* "yirage/_cython/core.pyx":1040
 * 
 *     def relu(self, STensor A):
 *         cdef CppSTensor* ptr = self.p_bgraph.relu(A.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->relu(__pyx_v_A->c_ptr);

  /* "yirage/_cython/core.pyx":1041
 *     def relu(self, STensor A):
 *         cdef CppSTensor* ptr = self.p_bgraph.relu(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1041, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1041, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1042
 *         cdef CppSTensor* ptr = self.p_bgraph.relu(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def clamp(self, STensor A, float min_val, float max_val):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1042, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1039
 *         return STensor(t)
 * 
 *     def relu(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.relu(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.relu", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1044
 *         return STensor(t)
 * 
 *     def clamp(self, STensor A, float min_val, float max_val):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.clamp(A.c_ptr, min_val, max_val)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_17clamp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_17clamp = {"clamp", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_17clamp, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_17clamp(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  float __pyx_v_min_val;
  float __pyx_v_max_val;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("clamp (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_min_val,&__pyx_mstate_global->__pyx_n_u_max_val,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1044, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1044, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1044, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1044, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "clamp", 0) < 0) __PYX_ERR(0, 1044, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("clamp", 1, 3, 3, i); __PYX_ERR(0, 1044, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1044, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1044, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1044, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
    __pyx_v_min_val = __Pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_min_val == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1044, __pyx_L3_error)
    __pyx_v_max_val = __Pyx_PyFloat_AsFloat(values[2]); if (unlikely((__pyx_v_max_val == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1044, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("clamp", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1044, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.clamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1044, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_16clamp(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_min_val, __pyx_v_max_val);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_16clamp(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, float __pyx_v_min_val, float __pyx_v_max_val) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("clamp", 0);

  /* "yirage/_cython/core.pyx":1045
 * 
 *     def clamp(self, STensor A, float min_val, float max_val):
 *         cdef CppSTensor* ptr = self.p_bgraph.clamp(A.c_ptr, min_val, max_val)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->clamp(__pyx_v_A->c_ptr, __pyx_v_min_val, __pyx_v_max_val);

  /* "yirage/_cython/core.pyx":1046
 *     def clamp(self, STensor A, float min_val, float max_val):
 *         cdef CppSTensor* ptr = self.p_bgraph.clamp(A.c_ptr, min_val, max_val)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1046, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1046, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1047
 *         cdef CppSTensor* ptr = self.p_bgraph.clamp(A.c_ptr, min_val, max_val)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def square(self, STensor A):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1047, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1044
 *         return STensor(t)
 * 
 *     def clamp(self, STensor A, float min_val, float max_val):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.clamp(A.c_ptr, min_val, max_val)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.clamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1049
 *         return STensor(t)
 * 
 *     def square(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.square(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_19square(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_19square = {"square", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_19square, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_19square(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("square (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1049, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1049, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "square", 0) < 0) __PYX_ERR(0, 1049, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("square", 1, 1, 1, i); __PYX_ERR(0, 1049, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1049, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("square", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1049, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.square", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1049, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_18square(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_18square(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("square", 0);

  /* "yirage/_cython/core.pyx":1050
 * 
 *     def square(self, STensor A):
 *         cdef CppSTensor* ptr = self.p_bgraph.square(A.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->square(__pyx_v_A->c_ptr);

  /* "yirage/_cython/core.pyx":1051
 *     def square(self, STensor A):
 *         cdef CppSTensor* ptr = self.p_bgraph.square(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1051, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1051, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1052
 *         cdef CppSTensor* ptr = self.p_bgraph.square(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def sqrt(self, STensor A):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1052, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1049
 *         return STensor(t)
 * 
 *     def square(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.square(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.square", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1054
 *         return STensor(t)
 * 
 *     def sqrt(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.sqrt(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_21sqrt(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_21sqrt = {"sqrt", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_21sqrt, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_21sqrt(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sqrt (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1054, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1054, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "sqrt", 0) < 0) __PYX_ERR(0, 1054, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("sqrt", 1, 1, 1, i); __PYX_ERR(0, 1054, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1054, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sqrt", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1054, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.sqrt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1054, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_20sqrt(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_20sqrt(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sqrt", 0);

  /* "yirage/_cython/core.pyx":1055
 * 
 *     def sqrt(self, STensor A):
 *         cdef CppSTensor* ptr = self.p_bgraph.sqrt(A.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->sqrt(__pyx_v_A->c_ptr);

  /* "yirage/_cython/core.pyx":1056
 *     def sqrt(self, STensor A):
 *         cdef CppSTensor* ptr = self.p_bgraph.sqrt(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1056, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1056, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1057
 *         cdef CppSTensor* ptr = self.p_bgraph.sqrt(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def mul_scalar(self, STensor A, float scalar):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1057, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1054
 *         return STensor(t)
 * 
 *     def sqrt(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.sqrt(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.sqrt", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1059
 *         return STensor(t)
 * 
 *     def mul_scalar(self, STensor A, float scalar):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.mul_scalar(A.c_ptr, scalar)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_23mul_scalar(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_23mul_scalar = {"mul_scalar", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_23mul_scalar, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_23mul_scalar(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  float __pyx_v_scalar;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mul_scalar (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_scalar,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1059, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1059, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1059, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "mul_scalar", 0) < 0) __PYX_ERR(0, 1059, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("mul_scalar", 1, 2, 2, i); __PYX_ERR(0, 1059, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1059, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1059, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
    __pyx_v_scalar = __Pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_scalar == (float)-1) && PyErr_Occurred())) __PYX_ERR(0, 1059, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mul_scalar", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1059, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.mul_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1059, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_22mul_scalar(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_scalar);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_22mul_scalar(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, float __pyx_v_scalar) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mul_scalar", 0);

  /* "yirage/_cython/core.pyx":1060
 * 
 *     def mul_scalar(self, STensor A, float scalar):
 *         cdef CppSTensor* ptr = self.p_bgraph.mul_scalar(A.c_ptr, scalar)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->mul_scalar(__pyx_v_A->c_ptr, __pyx_v_scalar);

  /* "yirage/_cython/core.pyx":1061
 *     def mul_scalar(self, STensor A, float scalar):
 *         cdef CppSTensor* ptr = self.p_bgraph.mul_scalar(A.c_ptr, scalar)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1061, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1061, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1062
 *         cdef CppSTensor* ptr = self.p_bgraph.mul_scalar(A.c_ptr, scalar)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def add(self, STensor A, STensor B):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1062, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1059
 *         return STensor(t)
 * 
 *     def mul_scalar(self, STensor A, float scalar):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.mul_scalar(A.c_ptr, scalar)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.mul_scalar", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1064
 *         return STensor(t)
 * 
 *     def add(self, STensor A, STensor B):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.add(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_25add(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_25add = {"add", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_25add, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_25add(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_B,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1064, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1064, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1064, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "add", 0) < 0) __PYX_ERR(0, 1064, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, i); __PYX_ERR(0, 1064, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1064, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1064, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
    __pyx_v_B = ((struct __pyx_obj_6yirage_4core_STensor *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1064, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1064, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "B", 0))) __PYX_ERR(0, 1064, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_24add(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_B);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_24add(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add", 0);

  /* "yirage/_cython/core.pyx":1065
 * 
 *     def add(self, STensor A, STensor B):
 *         cdef CppSTensor* ptr = self.p_bgraph.add(A.c_ptr, B.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->add(__pyx_v_A->c_ptr, __pyx_v_B->c_ptr);

  /* "yirage/_cython/core.pyx":1066
 *     def add(self, STensor A, STensor B):
 *         cdef CppSTensor* ptr = self.p_bgraph.add(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1066, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1066, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1067
 *         cdef CppSTensor* ptr = self.p_bgraph.add(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def mul(self, STensor A, STensor B):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1067, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1064
 *         return STensor(t)
 * 
 *     def add(self, STensor A, STensor B):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.add(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1069
 *         return STensor(t)
 * 
 *     def mul(self, STensor A, STensor B):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.mul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_27mul(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_27mul = {"mul", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_27mul, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_27mul(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mul (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_B,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1069, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1069, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1069, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "mul", 0) < 0) __PYX_ERR(0, 1069, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("mul", 1, 2, 2, i); __PYX_ERR(0, 1069, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1069, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1069, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
    __pyx_v_B = ((struct __pyx_obj_6yirage_4core_STensor *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mul", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1069, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.mul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1069, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "B", 0))) __PYX_ERR(0, 1069, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_26mul(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_B);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_26mul(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mul", 0);

  /* "yirage/_cython/core.pyx":1070
 * 
 *     def mul(self, STensor A, STensor B):
 *         cdef CppSTensor* ptr = self.p_bgraph.mul(A.c_ptr, B.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->mul(__pyx_v_A->c_ptr, __pyx_v_B->c_ptr);

  /* "yirage/_cython/core.pyx":1071
 *     def mul(self, STensor A, STensor B):
 *         cdef CppSTensor* ptr = self.p_bgraph.mul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1071, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1071, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1072
 *         cdef CppSTensor* ptr = self.p_bgraph.mul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def div(self, STensor A, STensor B):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1072, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1069
 *         return STensor(t)
 * 
 *     def mul(self, STensor A, STensor B):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.mul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.mul", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1074
 *         return STensor(t)
 * 
 *     def div(self, STensor A, STensor B):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.div(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_29div(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_29div = {"div", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_29div, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_29div(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("div (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_B,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1074, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1074, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1074, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "div", 0) < 0) __PYX_ERR(0, 1074, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("div", 1, 2, 2, i); __PYX_ERR(0, 1074, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1074, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1074, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
    __pyx_v_B = ((struct __pyx_obj_6yirage_4core_STensor *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("div", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1074, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.div", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1074, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "B", 0))) __PYX_ERR(0, 1074, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_28div(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_B);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_28div(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("div", 0);

  /* "yirage/_cython/core.pyx":1075
 * 
 *     def div(self, STensor A, STensor B):
 *         cdef CppSTensor* ptr = self.p_bgraph.div(A.c_ptr, B.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->div(__pyx_v_A->c_ptr, __pyx_v_B->c_ptr);

  /* "yirage/_cython/core.pyx":1076
 *     def div(self, STensor A, STensor B):
 *         cdef CppSTensor* ptr = self.p_bgraph.div(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1076, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1076, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1077
 *         cdef CppSTensor* ptr = self.p_bgraph.div(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def sub(self, STensor A, STensor B):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1077, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1074
 *         return STensor(t)
 * 
 *     def div(self, STensor A, STensor B):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.div(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.div", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1079
 *         return STensor(t)
 * 
 *     def sub(self, STensor A, STensor B):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.sub(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_31sub(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_31sub = {"sub", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_31sub, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_31sub(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("sub (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_B,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1079, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1079, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1079, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "sub", 0) < 0) __PYX_ERR(0, 1079, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("sub", 1, 2, 2, i); __PYX_ERR(0, 1079, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1079, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1079, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
    __pyx_v_B = ((struct __pyx_obj_6yirage_4core_STensor *)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("sub", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1079, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1079, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "B", 0))) __PYX_ERR(0, 1079, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_30sub(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_B);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_30sub(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("sub", 0);

  /* "yirage/_cython/core.pyx":1080
 * 
 *     def sub(self, STensor A, STensor B):
 *         cdef CppSTensor* ptr = self.p_bgraph.sub(A.c_ptr, B.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->sub(__pyx_v_A->c_ptr, __pyx_v_B->c_ptr);

  /* "yirage/_cython/core.pyx":1081
 *     def sub(self, STensor A, STensor B):
 *         cdef CppSTensor* ptr = self.p_bgraph.sub(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1081, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1081, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1082
 *         cdef CppSTensor* ptr = self.p_bgraph.sub(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def reduction(self, STensor A, int dim):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1082, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1079
 *         return STensor(t)
 * 
 *     def sub(self, STensor A, STensor B):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.sub(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.sub", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1084
 *         return STensor(t)
 * 
 *     def reduction(self, STensor A, int dim):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.reduction(A.c_ptr, dim)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_33reduction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_33reduction = {"reduction", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_33reduction, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_33reduction(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  int __pyx_v_dim;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reduction (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_dim,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1084, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1084, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1084, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "reduction", 0) < 0) __PYX_ERR(0, 1084, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("reduction", 1, 2, 2, i); __PYX_ERR(0, 1084, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1084, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1084, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
    __pyx_v_dim = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_dim == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1084, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reduction", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1084, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.reduction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1084, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_32reduction(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_dim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_32reduction(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, int __pyx_v_dim) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reduction", 0);

  /* "yirage/_cython/core.pyx":1085
 * 
 *     def reduction(self, STensor A, int dim):
 *         cdef CppSTensor* ptr = self.p_bgraph.reduction(A.c_ptr, dim)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->reduction(__pyx_v_A->c_ptr, __pyx_v_dim);

  /* "yirage/_cython/core.pyx":1086
 *     def reduction(self, STensor A, int dim):
 *         cdef CppSTensor* ptr = self.p_bgraph.reduction(A.c_ptr, dim)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1086, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1086, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1087
 *         cdef CppSTensor* ptr = self.p_bgraph.reduction(A.c_ptr, dim)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def reduction_max(self, STensor A, int dim):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1087, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1084
 *         return STensor(t)
 * 
 *     def reduction(self, STensor A, int dim):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.reduction(A.c_ptr, dim)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.reduction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1089
 *         return STensor(t)
 * 
 *     def reduction_max(self, STensor A, int dim):             # <<<<<<<<<<<<<<
 *         cdef vector[CppSTensor*] ptr = self.p_bgraph.reduction_max(A.c_ptr, dim)
 *         t0 = ctypes.cast(<unsigned long long>ptr[0], ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_35reduction_max(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_35reduction_max = {"reduction_max", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_35reduction_max, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_35reduction_max(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  int __pyx_v_dim;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reduction_max (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_dim,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1089, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1089, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1089, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "reduction_max", 0) < 0) __PYX_ERR(0, 1089, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("reduction_max", 1, 2, 2, i); __PYX_ERR(0, 1089, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1089, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1089, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
    __pyx_v_dim = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_dim == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1089, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("reduction_max", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1089, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.reduction_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1089, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_34reduction_max(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_dim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_34reduction_max(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, int __pyx_v_dim) {
  std::vector<yirage::threadblock::STensor *>  __pyx_v_ptr;
  PyObject *__pyx_v_t0 = NULL;
  PyObject *__pyx_v_t1 = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("reduction_max", 0);

  /* "yirage/_cython/core.pyx":1090
 * 
 *     def reduction_max(self, STensor A, int dim):
 *         cdef vector[CppSTensor*] ptr = self.p_bgraph.reduction_max(A.c_ptr, dim)             # <<<<<<<<<<<<<<
 *         t0 = ctypes.cast(<unsigned long long>ptr[0], ctypes.c_void_p)
 *         t1 = ctypes.cast(<unsigned long long>ptr[1], ctypes.c_void_p)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->reduction_max(__pyx_v_A->c_ptr, __pyx_v_dim);

  /* "yirage/_cython/core.pyx":1091
 *     def reduction_max(self, STensor A, int dim):
 *         cdef vector[CppSTensor*] ptr = self.p_bgraph.reduction_max(A.c_ptr, dim)
 *         t0 = ctypes.cast(<unsigned long long>ptr[0], ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         t1 = ctypes.cast(<unsigned long long>ptr[1], ctypes.c_void_p)
 *         return STensor(t0), STensor(t1)
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)(__pyx_v_ptr[0]))); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1091, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1091, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t0 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1092
 *         cdef vector[CppSTensor*] ptr = self.p_bgraph.reduction_max(A.c_ptr, dim)
 *         t0 = ctypes.cast(<unsigned long long>ptr[0], ctypes.c_void_p)
 *         t1 = ctypes.cast(<unsigned long long>ptr[1], ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t0), STensor(t1)
 * 
*/
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1092, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1092, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)(__pyx_v_ptr[1]))); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1092, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1092, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1092, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_4);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_4);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_4, __pyx_t_6, __pyx_t_5};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1092, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t1 = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1093
 *         t0 = ctypes.cast(<unsigned long long>ptr[0], ctypes.c_void_p)
 *         t1 = ctypes.cast(<unsigned long long>ptr[1], ctypes.c_void_p)
 *         return STensor(t0), STensor(t1)             # <<<<<<<<<<<<<<
 * 
 *     def rms_norm(self, STensor A):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_5 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_t0};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1093, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_t_3 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_v_t1};
    __pyx_t_5 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1093, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_5);
  }
  __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1093, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF((PyObject *)__pyx_t_1);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 0, ((PyObject *)__pyx_t_1)) != (0)) __PYX_ERR(0, 1093, __pyx_L1_error);
  __Pyx_GIVEREF((PyObject *)__pyx_t_5);
  if (__Pyx_PyTuple_SET_ITEM(__pyx_t_6, 1, ((PyObject *)__pyx_t_5)) != (0)) __PYX_ERR(0, 1093, __pyx_L1_error);
  __pyx_t_1 = 0;
  __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1089
 *         return STensor(t)
 * 
 *     def reduction_max(self, STensor A, int dim):             # <<<<<<<<<<<<<<
 *         cdef vector[CppSTensor*] ptr = self.p_bgraph.reduction_max(A.c_ptr, dim)
 *         t0 = ctypes.cast(<unsigned long long>ptr[0], ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.reduction_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t0);
  __Pyx_XDECREF(__pyx_v_t1);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1095
 *         return STensor(t0), STensor(t1)
 * 
 *     def rms_norm(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.rms_norm(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_37rms_norm(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_37rms_norm = {"rms_norm", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_37rms_norm, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_37rms_norm(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("rms_norm (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1095, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1095, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "rms_norm", 0) < 0) __PYX_ERR(0, 1095, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("rms_norm", 1, 1, 1, i); __PYX_ERR(0, 1095, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1095, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("rms_norm", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1095, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.rms_norm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1095, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_36rms_norm(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_36rms_norm(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("rms_norm", 0);

  /* "yirage/_cython/core.pyx":1096
 * 
 *     def rms_norm(self, STensor A):
 *         cdef CppSTensor* ptr = self.p_bgraph.rms_norm(A.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->rms_norm(__pyx_v_A->c_ptr);

  /* "yirage/_cython/core.pyx":1097
 *     def rms_norm(self, STensor A):
 *         cdef CppSTensor* ptr = self.p_bgraph.rms_norm(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1097, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1097, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1098
 *         cdef CppSTensor* ptr = self.p_bgraph.rms_norm(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def concat(self, STensor A, STensor B, int dim):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1098, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1095
 *         return STensor(t0), STensor(t1)
 * 
 *     def rms_norm(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.rms_norm(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.rms_norm", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1100
 *         return STensor(t)
 * 
 *     def concat(self, STensor A, STensor B, int dim):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.concat(A.c_ptr, B.c_ptr, dim)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_39concat(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_39concat = {"concat", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_39concat, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_39concat(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B = 0;
  int __pyx_v_dim;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("concat (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_B,&__pyx_mstate_global->__pyx_n_u_dim,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1100, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1100, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1100, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1100, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "concat", 0) < 0) __PYX_ERR(0, 1100, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("concat", 1, 3, 3, i); __PYX_ERR(0, 1100, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1100, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1100, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1100, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
    __pyx_v_B = ((struct __pyx_obj_6yirage_4core_STensor *)values[1]);
    __pyx_v_dim = __Pyx_PyLong_As_int(values[2]); if (unlikely((__pyx_v_dim == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1100, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("concat", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1100, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.concat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1100, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "B", 0))) __PYX_ERR(0, 1100, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_38concat(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_B, __pyx_v_dim);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_38concat(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B, int __pyx_v_dim) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("concat", 0);

  /* "yirage/_cython/core.pyx":1101
 * 
 *     def concat(self, STensor A, STensor B, int dim):
 *         cdef CppSTensor* ptr = self.p_bgraph.concat(A.c_ptr, B.c_ptr, dim)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->concat(__pyx_v_A->c_ptr, __pyx_v_B->c_ptr, __pyx_v_dim);

  /* "yirage/_cython/core.pyx":1102
 *     def concat(self, STensor A, STensor B, int dim):
 *         cdef CppSTensor* ptr = self.p_bgraph.concat(A.c_ptr, B.c_ptr, dim)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1103
 *         cdef CppSTensor* ptr = self.p_bgraph.concat(A.c_ptr, B.c_ptr, dim)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def forloop_accum(self, STensor A, str acc):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1103, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1100
 *         return STensor(t)
 * 
 *     def concat(self, STensor A, STensor B, int dim):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.concat(A.c_ptr, B.c_ptr, dim)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.concat", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1105
 *         return STensor(t)
 * 
 *     def forloop_accum(self, STensor A, str acc):             # <<<<<<<<<<<<<<
 *         optype = string_to_accum_optype(acc)
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum(A.c_ptr, optype)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_41forloop_accum(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_41forloop_accum = {"forloop_accum", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_41forloop_accum, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_41forloop_accum(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  PyObject *__pyx_v_acc = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("forloop_accum (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_acc,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1105, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1105, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1105, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "forloop_accum", 0) < 0) __PYX_ERR(0, 1105, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("forloop_accum", 1, 2, 2, i); __PYX_ERR(0, 1105, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1105, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1105, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
    __pyx_v_acc = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("forloop_accum", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1105, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.forloop_accum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1105, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_acc), (&PyUnicode_Type), 1, "acc", 1))) __PYX_ERR(0, 1105, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_40forloop_accum(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_acc);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_40forloop_accum(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, PyObject *__pyx_v_acc) {
  PyObject *__pyx_v_optype = NULL;
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  enum yirage::type::TBOperatorType __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("forloop_accum", 0);

  /* "yirage/_cython/core.pyx":1106
 * 
 *     def forloop_accum(self, STensor A, str acc):
 *         optype = string_to_accum_optype(acc)             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum(A.c_ptr, optype)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_string_to_accum_optype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_4 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_acc};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_optype = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1107
 *     def forloop_accum(self, STensor A, str acc):
 *         optype = string_to_accum_optype(acc)
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum(A.c_ptr, optype)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_t_5 = ((enum yirage::type::TBOperatorType)__Pyx_PyLong_As_enum__yirage_3a__3a_type_3a__3a_TBOperatorType(__pyx_v_optype)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1107, __pyx_L1_error)
  __pyx_v_ptr = __pyx_v_self->p_bgraph->forloop_accum(__pyx_v_A->c_ptr, __pyx_t_5);

  /* "yirage/_cython/core.pyx":1108
 *         optype = string_to_accum_optype(acc)
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum(A.c_ptr, optype)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_3 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_4 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    assert(__pyx_t_3);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_6, __pyx__function);
    __pyx_t_4 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_t_2, __pyx_t_8};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_4, (3-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1109
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum(A.c_ptr, optype)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def forloop_accum_rescale(self, STensor A, STensor B, str acc):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_8 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1109, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1105
 *         return STensor(t)
 * 
 *     def forloop_accum(self, STensor A, str acc):             # <<<<<<<<<<<<<<
 *         optype = string_to_accum_optype(acc)
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum(A.c_ptr, optype)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.forloop_accum", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_optype);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1111
 *         return STensor(t)
 * 
 *     def forloop_accum_rescale(self, STensor A, STensor B, str acc):             # <<<<<<<<<<<<<<
 *         optype = string_to_accum_rescale_optype(acc)
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum_rescale(A.c_ptr, B.c_ptr, optype)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_43forloop_accum_rescale(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_43forloop_accum_rescale = {"forloop_accum_rescale", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_43forloop_accum_rescale, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_43forloop_accum_rescale(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B = 0;
  PyObject *__pyx_v_acc = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[3] = {0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("forloop_accum_rescale (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,&__pyx_mstate_global->__pyx_n_u_B,&__pyx_mstate_global->__pyx_n_u_acc,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1111, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  3:
        values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1111, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1111, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1111, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "forloop_accum_rescale", 0) < 0) __PYX_ERR(0, 1111, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("forloop_accum_rescale", 1, 3, 3, i); __PYX_ERR(0, 1111, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 3)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1111, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1111, __pyx_L3_error)
      values[2] = __Pyx_ArgRef_FASTCALL(__pyx_args, 2);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[2])) __PYX_ERR(0, 1111, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
    __pyx_v_B = ((struct __pyx_obj_6yirage_4core_STensor *)values[1]);
    __pyx_v_acc = ((PyObject*)values[2]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("forloop_accum_rescale", 1, 3, 3, __pyx_nargs); __PYX_ERR(0, 1111, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.forloop_accum_rescale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1111, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_B), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "B", 0))) __PYX_ERR(0, 1111, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_acc), (&PyUnicode_Type), 1, "acc", 1))) __PYX_ERR(0, 1111, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_42forloop_accum_rescale(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A, __pyx_v_B, __pyx_v_acc);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_42forloop_accum_rescale(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_B, PyObject *__pyx_v_acc) {
  PyObject *__pyx_v_optype = NULL;
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  size_t __pyx_t_4;
  enum yirage::type::TBOperatorType __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("forloop_accum_rescale", 0);

  /* "yirage/_cython/core.pyx":1112
 * 
 *     def forloop_accum_rescale(self, STensor A, STensor B, str acc):
 *         optype = string_to_accum_rescale_optype(acc)             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum_rescale(A.c_ptr, B.c_ptr, optype)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_string_to_accum_rescale_optype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_3);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_3);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_3, __pyx__function);
    __pyx_t_4 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_2, __pyx_v_acc};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_optype = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1113
 *     def forloop_accum_rescale(self, STensor A, STensor B, str acc):
 *         optype = string_to_accum_rescale_optype(acc)
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum_rescale(A.c_ptr, B.c_ptr, optype)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_t_5 = ((enum yirage::type::TBOperatorType)__Pyx_PyLong_As_enum__yirage_3a__3a_type_3a__3a_TBOperatorType(__pyx_v_optype)); if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1113, __pyx_L1_error)
  __pyx_v_ptr = __pyx_v_self->p_bgraph->forloop_accum_rescale(__pyx_v_A->c_ptr, __pyx_v_B->c_ptr, __pyx_t_5);

  /* "yirage/_cython/core.pyx":1114
 *         optype = string_to_accum_rescale_optype(acc)
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum_rescale(A.c_ptr, B.c_ptr, optype)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_3 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_t_4 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
    assert(__pyx_t_3);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_6);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_6, __pyx__function);
    __pyx_t_4 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_t_2, __pyx_t_8};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_4, (3-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1115
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum_rescale(A.c_ptr, B.c_ptr, optype)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     def forloop_accum_max(self, STensor A):
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_8 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_4 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_6, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_4, (2-__pyx_t_4) | (__pyx_t_4*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1115, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1111
 *         return STensor(t)
 * 
 *     def forloop_accum_rescale(self, STensor A, STensor B, str acc):             # <<<<<<<<<<<<<<
 *         optype = string_to_accum_rescale_optype(acc)
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum_rescale(A.c_ptr, B.c_ptr, optype)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.forloop_accum_rescale", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_optype);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1117
 *         return STensor(t)
 * 
 *     def forloop_accum_max(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum_max(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_45forloop_accum_max(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_45forloop_accum_max = {"forloop_accum_max", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_45forloop_accum_max, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_45forloop_accum_max(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("forloop_accum_max (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_A,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1117, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1117, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "forloop_accum_max", 0) < 0) __PYX_ERR(0, 1117, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("forloop_accum_max", 1, 1, 1, i); __PYX_ERR(0, 1117, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1117, __pyx_L3_error)
    }
    __pyx_v_A = ((struct __pyx_obj_6yirage_4core_STensor *)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("forloop_accum_max", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1117, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.forloop_accum_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_A), __pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, 1, "A", 0))) __PYX_ERR(0, 1117, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_44forloop_accum_max(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v_A);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_44forloop_accum_max(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, struct __pyx_obj_6yirage_4core_STensor *__pyx_v_A) {
  yirage::threadblock::STensor *__pyx_v_ptr;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  size_t __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("forloop_accum_max", 0);

  /* "yirage/_cython/core.pyx":1118
 * 
 *     def forloop_accum_max(self, STensor A):
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum_max(A.c_ptr)             # <<<<<<<<<<<<<<
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)
*/
  __pyx_v_ptr = __pyx_v_self->p_bgraph->forloop_accum_max(__pyx_v_A->c_ptr);

  /* "yirage/_cython/core.pyx":1119
 *     def forloop_accum_max(self, STensor A):
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum_max(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         return STensor(t)
 * 
*/
  __pyx_t_2 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GetModuleGlobalName(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_7 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_4);
    assert(__pyx_t_2);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_4);
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_4, __pyx__function);
    __pyx_t_7 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_2, __pyx_t_3, __pyx_t_6};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_7, (3-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1120
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum_max(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *         return STensor(t)             # <<<<<<<<<<<<<<
 * 
 *     property grid_dim:
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor);
  __pyx_t_6 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor); 
  __pyx_t_7 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_v_t};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_6, __pyx_callargs+__pyx_t_7, (2-__pyx_t_7) | (__pyx_t_7*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1120, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1117
 *         return STensor(t)
 * 
 *     def forloop_accum_max(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum_max(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.forloop_accum_max", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1123
 * 
 *     property grid_dim:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return {
 *                 "x": self.p_bgraph.grid_dim.x,
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_8grid_dim_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_8grid_dim_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_8grid_dim___get__(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_8grid_dim___get__(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":1124
 *     property grid_dim:
 *         def __get__(self):
 *             return {             # <<<<<<<<<<<<<<
 *                 "x": self.p_bgraph.grid_dim.x,
 *                 "y": self.p_bgraph.grid_dim.y,
*/
  __Pyx_XDECREF(__pyx_r);

  /* "yirage/_cython/core.pyx":1125
 *         def __get__(self):
 *             return {
 *                 "x": self.p_bgraph.grid_dim.x,             # <<<<<<<<<<<<<<
 *                 "y": self.p_bgraph.grid_dim.y,
 *                 "z": self.p_bgraph.grid_dim.z
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyLong_From_unsigned_int(__pyx_v_self->p_bgraph->grid_dim.x); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_x, __pyx_t_2) < 0) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":1126
 *             return {
 *                 "x": self.p_bgraph.grid_dim.x,
 *                 "y": self.p_bgraph.grid_dim.y,             # <<<<<<<<<<<<<<
 *                 "z": self.p_bgraph.grid_dim.z
 *             }
*/
  __pyx_t_2 = __Pyx_PyLong_From_unsigned_int(__pyx_v_self->p_bgraph->grid_dim.y); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_y, __pyx_t_2) < 0) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":1127
 *                 "x": self.p_bgraph.grid_dim.x,
 *                 "y": self.p_bgraph.grid_dim.y,
 *                 "z": self.p_bgraph.grid_dim.z             # <<<<<<<<<<<<<<
 *             }
 * 
*/
  __pyx_t_2 = __Pyx_PyLong_From_unsigned_int(__pyx_v_self->p_bgraph->grid_dim.z); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_z, __pyx_t_2) < 0) __PYX_ERR(0, 1125, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1123
 * 
 *     property grid_dim:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return {
 *                 "x": self.p_bgraph.grid_dim.x,
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.grid_dim.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1131
 * 
 *     property forloop_range:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.p_bgraph.forloop_range
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_13forloop_range_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_13forloop_range_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_13forloop_range___get__(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_13forloop_range___get__(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":1132
 *     property forloop_range:
 *         def __get__(self):
 *             return self.p_bgraph.forloop_range             # <<<<<<<<<<<<<<
 * 
 *     property operators:
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyLong_From_int(__pyx_v_self->p_bgraph->forloop_range); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1131
 * 
 *     property forloop_range:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.p_bgraph.forloop_range
 * 
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.forloop_range.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1135
 * 
 *     property operators:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector[CppTBOperator*] coperators
 *             coperators = self.p_bgraph.operators
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_9operators_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_9operators_1__get__(PyObject *__pyx_v_self) {
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_kwvalues = __Pyx_KwValues_VARARGS(__pyx_args, __pyx_nargs);
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_9operators___get__(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_9operators___get__(struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self) {
  std::vector<yirage::threadblock::TBOperator *>  __pyx_v_coperators;
  PyObject *__pyx_v_operators = NULL;
  std::vector<yirage::threadblock::TBOperator *> ::size_type __pyx_v_i;
  PyObject *__pyx_v_ptr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  std::vector<yirage::threadblock::TBOperator *>  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<yirage::threadblock::TBOperator *> ::size_type __pyx_t_3;
  std::vector<yirage::threadblock::TBOperator *> ::size_type __pyx_t_4;
  std::vector<yirage::threadblock::TBOperator *> ::size_type __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "yirage/_cython/core.pyx":1137
 *         def __get__(self):
 *             cdef vector[CppTBOperator*] coperators
 *             coperators = self.p_bgraph.operators             # <<<<<<<<<<<<<<
 *             operators = list()
 *             for i in range(coperators.size()):
*/
  __pyx_t_1 = __pyx_v_self->p_bgraph->operators;
  __pyx_v_coperators = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_1);

  /* "yirage/_cython/core.pyx":1138
 *             cdef vector[CppTBOperator*] coperators
 *             coperators = self.p_bgraph.operators
 *             operators = list()             # <<<<<<<<<<<<<<
 *             for i in range(coperators.size()):
 *                 ptr = ctypes.cast(<unsigned long long>coperators[i], ctypes.c_void_p)
*/
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_operators = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":1139
 *             coperators = self.p_bgraph.operators
 *             operators = list()
 *             for i in range(coperators.size()):             # <<<<<<<<<<<<<<
 *                 ptr = ctypes.cast(<unsigned long long>coperators[i], ctypes.c_void_p)
 *                 operators.append(CyTBOperator(ptr))
*/
  __pyx_t_3 = __pyx_v_coperators.size();
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "yirage/_cython/core.pyx":1140
 *             operators = list()
 *             for i in range(coperators.size()):
 *                 ptr = ctypes.cast(<unsigned long long>coperators[i], ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *                 operators.append(CyTBOperator(ptr))
 *             return operators
*/
    __pyx_t_6 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)(__pyx_v_coperators[__pyx_v_i]))); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GetModuleGlobalName(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_9)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_11 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_8);
      assert(__pyx_t_6);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_6);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_8, __pyx__function);
      __pyx_t_11 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_6, __pyx_t_7, __pyx_t_10};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_8, __pyx_callargs+__pyx_t_11, (3-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1140, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_ptr, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "yirage/_cython/core.pyx":1141
 *             for i in range(coperators.size()):
 *                 ptr = ctypes.cast(<unsigned long long>coperators[i], ctypes.c_void_p)
 *                 operators.append(CyTBOperator(ptr))             # <<<<<<<<<<<<<<
 *             return operators
 * 
*/
    __pyx_t_8 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBOperator);
    __pyx_t_10 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBOperator); 
    __pyx_t_11 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_8, __pyx_v_ptr};
      __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_10, __pyx_callargs+__pyx_t_11, (2-__pyx_t_11) | (__pyx_t_11*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1141, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_2);
    }
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_operators, ((PyObject *)__pyx_t_2)); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 1141, __pyx_L1_error)
    __Pyx_DECREF((PyObject *)__pyx_t_2); __pyx_t_2 = 0;
  }

  /* "yirage/_cython/core.pyx":1142
 *                 ptr = ctypes.cast(<unsigned long long>coperators[i], ctypes.c_void_p)
 *                 operators.append(CyTBOperator(ptr))
 *             return operators             # <<<<<<<<<<<<<<
 * 
 * def search(CyKNGraph input_graph, *, int max_num_new_graphs = 1024, list imaps = None, list omaps = None, list griddims = None, list blockdims = None, list fmaps = None, list franges = None, str previous_checkpoint = None, bool verbose, str default_config = None, bool is_formal_verified):
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_operators);
  __pyx_r = __pyx_v_operators;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1135
 * 
 *     property operators:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef vector[CppTBOperator*] coperators
 *             coperators = self.p_bgraph.operators
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("yirage.core.CyTBGraph.operators.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_operators);
  __Pyx_XDECREF(__pyx_v_ptr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_47__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_47__reduce_cython__ = {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_47__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_47__reduce_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__reduce_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  if (unlikely(__pyx_nargs > 0)) { __Pyx_RaiseArgtupleInvalid("__reduce_cython__", 1, 0, 0, __pyx_nargs); return NULL; }
  const Py_ssize_t __pyx_kwds_len = unlikely(__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
  if (unlikely(__pyx_kwds_len < 0)) return NULL;
  if (unlikely(__pyx_kwds_len > 0)) {__Pyx_RejectKeywords("__reduce_cython__", __pyx_kwds); return NULL;}
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_46__reduce_cython__(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_46__reduce_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__reduce_cython__", 0);

  /* "(tree fragment)":2
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 2, __pyx_L1_error)

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.CyTBGraph.__reduce_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_49__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_9CyTBGraph_49__setstate_cython__ = {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_49__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_9CyTBGraph_49__setstate_cython__(PyObject *__pyx_v_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  CYTHON_UNUSED PyObject *__pyx_v___pyx_state = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setstate_cython__ (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_pyx_state,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "__setstate_cython__", 0) < 0) __PYX_ERR(1, 3, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, i); __PYX_ERR(1, 3, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(1, 3, __pyx_L3_error)
    }
    __pyx_v___pyx_state = values[0];
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setstate_cython__", 1, 1, 1, __pyx_nargs); __PYX_ERR(1, 3, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.CyTBGraph.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6yirage_4core_9CyTBGraph_48__setstate_cython__(((struct __pyx_obj_6yirage_4core_CyTBGraph *)__pyx_v_self), __pyx_v___pyx_state);

  /* function exit code */
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_9CyTBGraph_48__setstate_cython__(CYTHON_UNUSED struct __pyx_obj_6yirage_4core_CyTBGraph *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v___pyx_state) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__setstate_cython__", 0);

  /* "(tree fragment)":4
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"             # <<<<<<<<<<<<<<
*/
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_mstate_global->__pyx_kp_u_no_default___reduce___due_to_non, 0, 0);
  __PYX_ERR(1, 4, __pyx_L1_error)

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.CyTBGraph.__setstate_cython__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1144
 *             return operators
 * 
 * def search(CyKNGraph input_graph, *, int max_num_new_graphs = 1024, list imaps = None, list omaps = None, list griddims = None, list blockdims = None, list fmaps = None, list franges = None, str previous_checkpoint = None, bool verbose, str default_config = None, bool is_formal_verified):             # <<<<<<<<<<<<<<
 *     # set cimaps
 *     cdef vector[MInt3] cimaps
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_19search(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_19search = {"search", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_19search, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_19search(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_input_graph = 0;
  int __pyx_v_max_num_new_graphs;
  PyObject *__pyx_v_imaps = 0;
  PyObject *__pyx_v_omaps = 0;
  PyObject *__pyx_v_griddims = 0;
  PyObject *__pyx_v_blockdims = 0;
  PyObject *__pyx_v_fmaps = 0;
  PyObject *__pyx_v_franges = 0;
  PyObject *__pyx_v_previous_checkpoint = 0;
  bool __pyx_v_verbose;
  PyObject *__pyx_v_default_config = 0;
  bool __pyx_v_is_formal_verified;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("search (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_input_graph,&__pyx_mstate_global->__pyx_n_u_verbose,&__pyx_mstate_global->__pyx_n_u_is_formal_verified,&__pyx_mstate_global->__pyx_n_u_max_num_new_graphs,&__pyx_mstate_global->__pyx_n_u_imaps,&__pyx_mstate_global->__pyx_n_u_omaps,&__pyx_mstate_global->__pyx_n_u_griddims,&__pyx_mstate_global->__pyx_n_u_blockdims,&__pyx_mstate_global->__pyx_n_u_fmaps,&__pyx_mstate_global->__pyx_n_u_franges,&__pyx_mstate_global->__pyx_n_u_previous_checkpoint,&__pyx_mstate_global->__pyx_n_u_default_config,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1144, __pyx_L3_error)
    if (likely(__pyx_kwds_len > 0)) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1144, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "search", 0) < 0) __PYX_ERR(0, 1144, __pyx_L3_error)
      if (!values[4]) values[4] = __Pyx_NewRef(((PyObject*)Py_None));
      if (!values[5]) values[5] = __Pyx_NewRef(((PyObject*)Py_None));
      if (!values[6]) values[6] = __Pyx_NewRef(((PyObject*)Py_None));
      if (!values[7]) values[7] = __Pyx_NewRef(((PyObject*)Py_None));
      if (!values[8]) values[8] = __Pyx_NewRef(((PyObject*)Py_None));
      if (!values[9]) values[9] = __Pyx_NewRef(((PyObject*)Py_None));
      if (!values[10]) values[10] = __Pyx_NewRef(((PyObject*)Py_None));
      if (!values[11]) values[11] = __Pyx_NewRef(((PyObject*)Py_None));
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("search", 1, 1, 1, i); __PYX_ERR(0, 1144, __pyx_L3_error) }
      }
      for (Py_ssize_t i = 1; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseKeywordRequired("search", *(__pyx_pyargnames[i - 0])); __PYX_ERR(0, 1144, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      __Pyx_RaiseKeywordRequired("search", __pyx_mstate_global->__pyx_n_u_verbose); __PYX_ERR(0, 1144, __pyx_L3_error)
    }
    __pyx_v_input_graph = ((struct __pyx_obj_6yirage_4core_CyKNGraph *)values[0]);
    __pyx_v_verbose = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_verbose == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1144, __pyx_L3_error)
    __pyx_v_is_formal_verified = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_is_formal_verified == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1144, __pyx_L3_error)
    if (values[3]) {
      __pyx_v_max_num_new_graphs = __Pyx_PyLong_As_int(values[3]); if (unlikely((__pyx_v_max_num_new_graphs == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1144, __pyx_L3_error)
    } else {
      __pyx_v_max_num_new_graphs = ((int)((int)0x400));
    }
    __pyx_v_imaps = ((PyObject*)values[4]);
    __pyx_v_omaps = ((PyObject*)values[5]);
    __pyx_v_griddims = ((PyObject*)values[6]);
    __pyx_v_blockdims = ((PyObject*)values[7]);
    __pyx_v_fmaps = ((PyObject*)values[8]);
    __pyx_v_franges = ((PyObject*)values[9]);
    __pyx_v_previous_checkpoint = ((PyObject*)values[10]);
    __pyx_v_default_config = ((PyObject*)values[11]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("search", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1144, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.search", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input_graph), __pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, 1, "input_graph", 0))) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_imaps), (&PyList_Type), 1, "imaps", 1))) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_omaps), (&PyList_Type), 1, "omaps", 1))) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_griddims), (&PyList_Type), 1, "griddims", 1))) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_blockdims), (&PyList_Type), 1, "blockdims", 1))) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_fmaps), (&PyList_Type), 1, "fmaps", 1))) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_franges), (&PyList_Type), 1, "franges", 1))) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_previous_checkpoint), (&PyUnicode_Type), 1, "previous_checkpoint", 1))) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_default_config), (&PyUnicode_Type), 1, "default_config", 1))) __PYX_ERR(0, 1144, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_18search(__pyx_self, __pyx_v_input_graph, __pyx_v_max_num_new_graphs, __pyx_v_imaps, __pyx_v_omaps, __pyx_v_griddims, __pyx_v_blockdims, __pyx_v_fmaps, __pyx_v_franges, __pyx_v_previous_checkpoint, __pyx_v_verbose, __pyx_v_default_config, __pyx_v_is_formal_verified);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_18search(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_input_graph, int __pyx_v_max_num_new_graphs, PyObject *__pyx_v_imaps, PyObject *__pyx_v_omaps, PyObject *__pyx_v_griddims, PyObject *__pyx_v_blockdims, PyObject *__pyx_v_fmaps, PyObject *__pyx_v_franges, PyObject *__pyx_v_previous_checkpoint, bool __pyx_v_verbose, PyObject *__pyx_v_default_config, bool __pyx_v_is_formal_verified) {
  std::vector<yirage::search_c::MInt3>  __pyx_v_cimaps;
  Py_ssize_t __pyx_v_i;
  std::vector<yirage::search_c::MInt3>  __pyx_v_comaps;
  std::vector<yirage::search_c::MDim3>  __pyx_v_cgriddims;
  std::vector<yirage::search_c::MDim3>  __pyx_v_cblockdims;
  std::vector<int>  __pyx_v_cfmaps;
  std::vector<int>  __pyx_v_cfranges;
  yirage::kernel::Graph *__pyx_v_cnewgraphs[0x400];
  bool __pyx_v_cverbose;
  char *__pyx_v_cprevious_checkpoint;
  PyObject *__pyx_v_py_byte_string = NULL;
  char *__pyx_v_cconfig;
  bool __pyx_v_cis_formal_verifed;
  int __pyx_v_num;
  PyObject *__pyx_v_new_graphs = NULL;
  PyObject *__pyx_v_ptr = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  unsigned int __pyx_t_9;
  char *__pyx_t_10;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  size_t __pyx_t_16;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("search", 0);

  /* "yirage/_cython/core.pyx":1147
 *     # set cimaps
 *     cdef vector[MInt3] cimaps
 *     cimaps.resize(0)             # <<<<<<<<<<<<<<
 *     if imaps is not None:
 *         cimaps.resize(len(imaps))
*/
  try {
    __pyx_v_cimaps.resize(0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1147, __pyx_L1_error)
  }

  /* "yirage/_cython/core.pyx":1148
 *     cdef vector[MInt3] cimaps
 *     cimaps.resize(0)
 *     if imaps is not None:             # <<<<<<<<<<<<<<
 *         cimaps.resize(len(imaps))
 *         for i in range(len(imaps)):
*/
  __pyx_t_1 = (__pyx_v_imaps != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":1149
 *     cimaps.resize(0)
 *     if imaps is not None:
 *         cimaps.resize(len(imaps))             # <<<<<<<<<<<<<<
 *         for i in range(len(imaps)):
 *             assert type(imaps[i]) is tuple, "Each imap must be a tuple of 3 integers"
*/
    if (unlikely(__pyx_v_imaps == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1149, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyList_GET_SIZE(__pyx_v_imaps); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1149, __pyx_L1_error)
    try {
      __pyx_v_cimaps.resize(__pyx_t_2);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1149, __pyx_L1_error)
    }

    /* "yirage/_cython/core.pyx":1150
 *     if imaps is not None:
 *         cimaps.resize(len(imaps))
 *         for i in range(len(imaps)):             # <<<<<<<<<<<<<<
 *             assert type(imaps[i]) is tuple, "Each imap must be a tuple of 3 integers"
 *             assert len(imaps[i]) == 3, "Each imap must be a tuple of 3 integers"
*/
    if (unlikely(__pyx_v_imaps == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1150, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyList_GET_SIZE(__pyx_v_imaps); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1150, __pyx_L1_error)
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "yirage/_cython/core.pyx":1151
 *         cimaps.resize(len(imaps))
 *         for i in range(len(imaps)):
 *             assert type(imaps[i]) is tuple, "Each imap must be a tuple of 3 integers"             # <<<<<<<<<<<<<<
 *             assert len(imaps[i]) == 3, "Each imap must be a tuple of 3 integers"
 *             cimaps[i].x = imaps[i][0]
*/
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(__pyx_assertions_enabled())) {
        if (unlikely(__pyx_v_imaps == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1151, __pyx_L1_error)
        }
        __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_imaps, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1151, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_t_5)) == ((PyObject *)(&PyTuple_Type)));
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_1)) {
          __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_Each_imap_must_be_a_tuple_of_3_i, 0, 0);
          __PYX_ERR(0, 1151, __pyx_L1_error)
        }
      }
      #else
      if ((1)); else __PYX_ERR(0, 1151, __pyx_L1_error)
      #endif

      /* "yirage/_cython/core.pyx":1152
 *         for i in range(len(imaps)):
 *             assert type(imaps[i]) is tuple, "Each imap must be a tuple of 3 integers"
 *             assert len(imaps[i]) == 3, "Each imap must be a tuple of 3 integers"             # <<<<<<<<<<<<<<
 *             cimaps[i].x = imaps[i][0]
 *             cimaps[i].y = imaps[i][1]
*/
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(__pyx_assertions_enabled())) {
        if (unlikely(__pyx_v_imaps == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1152, __pyx_L1_error)
        }
        __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_imaps, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1152, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1152, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_1 = (__pyx_t_6 == 3);
        if (unlikely(!__pyx_t_1)) {
          __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_Each_imap_must_be_a_tuple_of_3_i, 0, 0);
          __PYX_ERR(0, 1152, __pyx_L1_error)
        }
      }
      #else
      if ((1)); else __PYX_ERR(0, 1152, __pyx_L1_error)
      #endif

      /* "yirage/_cython/core.pyx":1153
 *             assert type(imaps[i]) is tuple, "Each imap must be a tuple of 3 integers"
 *             assert len(imaps[i]) == 3, "Each imap must be a tuple of 3 integers"
 *             cimaps[i].x = imaps[i][0]             # <<<<<<<<<<<<<<
 *             cimaps[i].y = imaps[i][1]
 *             cimaps[i].z = imaps[i][2]
*/
      if (unlikely(__pyx_v_imaps == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1153, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_imaps, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyLong_As_int(__pyx_t_7); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1153, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      (__pyx_v_cimaps[__pyx_v_i]).x = __pyx_t_8;

      /* "yirage/_cython/core.pyx":1154
 *             assert len(imaps[i]) == 3, "Each imap must be a tuple of 3 integers"
 *             cimaps[i].x = imaps[i][0]
 *             cimaps[i].y = imaps[i][1]             # <<<<<<<<<<<<<<
 *             cimaps[i].z = imaps[i][2]
 *     #set comaps
*/
      if (unlikely(__pyx_v_imaps == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1154, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_imaps, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_7, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1154, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = __Pyx_PyLong_As_int(__pyx_t_5); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1154, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_cimaps[__pyx_v_i]).y = __pyx_t_8;

      /* "yirage/_cython/core.pyx":1155
 *             cimaps[i].x = imaps[i][0]
 *             cimaps[i].y = imaps[i][1]
 *             cimaps[i].z = imaps[i][2]             # <<<<<<<<<<<<<<
 *     #set comaps
 *     cdef vector[MInt3] comaps
*/
      if (unlikely(__pyx_v_imaps == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1155, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_imaps, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_5, 2, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1155, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyLong_As_int(__pyx_t_7); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1155, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      (__pyx_v_cimaps[__pyx_v_i]).z = __pyx_t_8;
    }

    /* "yirage/_cython/core.pyx":1148
 *     cdef vector[MInt3] cimaps
 *     cimaps.resize(0)
 *     if imaps is not None:             # <<<<<<<<<<<<<<
 *         cimaps.resize(len(imaps))
 *         for i in range(len(imaps)):
*/
  }

  /* "yirage/_cython/core.pyx":1158
 *     #set comaps
 *     cdef vector[MInt3] comaps
 *     comaps.resize(0)             # <<<<<<<<<<<<<<
 *     if omaps is not None:
 *         comaps.resize(len(omaps))
*/
  try {
    __pyx_v_comaps.resize(0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1158, __pyx_L1_error)
  }

  /* "yirage/_cython/core.pyx":1159
 *     cdef vector[MInt3] comaps
 *     comaps.resize(0)
 *     if omaps is not None:             # <<<<<<<<<<<<<<
 *         comaps.resize(len(omaps))
 *         for i in range(len(omaps)):
*/
  __pyx_t_1 = (__pyx_v_omaps != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":1160
 *     comaps.resize(0)
 *     if omaps is not None:
 *         comaps.resize(len(omaps))             # <<<<<<<<<<<<<<
 *         for i in range(len(omaps)):
 *             assert type(omaps[i]) is tuple, "Each omap must be a tuple of 3 integers"
*/
    if (unlikely(__pyx_v_omaps == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1160, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyList_GET_SIZE(__pyx_v_omaps); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1160, __pyx_L1_error)
    try {
      __pyx_v_comaps.resize(__pyx_t_2);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1160, __pyx_L1_error)
    }

    /* "yirage/_cython/core.pyx":1161
 *     if omaps is not None:
 *         comaps.resize(len(omaps))
 *         for i in range(len(omaps)):             # <<<<<<<<<<<<<<
 *             assert type(omaps[i]) is tuple, "Each omap must be a tuple of 3 integers"
 *             assert len(omaps[i]) == 3, "Each omap must be a tuple of 3 integers"
*/
    if (unlikely(__pyx_v_omaps == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1161, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyList_GET_SIZE(__pyx_v_omaps); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1161, __pyx_L1_error)
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "yirage/_cython/core.pyx":1162
 *         comaps.resize(len(omaps))
 *         for i in range(len(omaps)):
 *             assert type(omaps[i]) is tuple, "Each omap must be a tuple of 3 integers"             # <<<<<<<<<<<<<<
 *             assert len(omaps[i]) == 3, "Each omap must be a tuple of 3 integers"
 *             comaps[i].x = omaps[i][0]
*/
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(__pyx_assertions_enabled())) {
        if (unlikely(__pyx_v_omaps == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1162, __pyx_L1_error)
        }
        __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_omaps, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1162, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_t_7)) == ((PyObject *)(&PyTuple_Type)));
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        if (unlikely(!__pyx_t_1)) {
          __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_Each_omap_must_be_a_tuple_of_3_i, 0, 0);
          __PYX_ERR(0, 1162, __pyx_L1_error)
        }
      }
      #else
      if ((1)); else __PYX_ERR(0, 1162, __pyx_L1_error)
      #endif

      /* "yirage/_cython/core.pyx":1163
 *         for i in range(len(omaps)):
 *             assert type(omaps[i]) is tuple, "Each omap must be a tuple of 3 integers"
 *             assert len(omaps[i]) == 3, "Each omap must be a tuple of 3 integers"             # <<<<<<<<<<<<<<
 *             comaps[i].x = omaps[i][0]
 *             comaps[i].y = omaps[i][1]
*/
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(__pyx_assertions_enabled())) {
        if (unlikely(__pyx_v_omaps == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1163, __pyx_L1_error)
        }
        __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_omaps, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1163, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_6 = PyObject_Length(__pyx_t_7); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1163, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_1 = (__pyx_t_6 == 3);
        if (unlikely(!__pyx_t_1)) {
          __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_Each_omap_must_be_a_tuple_of_3_i, 0, 0);
          __PYX_ERR(0, 1163, __pyx_L1_error)
        }
      }
      #else
      if ((1)); else __PYX_ERR(0, 1163, __pyx_L1_error)
      #endif

      /* "yirage/_cython/core.pyx":1164
 *             assert type(omaps[i]) is tuple, "Each omap must be a tuple of 3 integers"
 *             assert len(omaps[i]) == 3, "Each omap must be a tuple of 3 integers"
 *             comaps[i].x = omaps[i][0]             # <<<<<<<<<<<<<<
 *             comaps[i].y = omaps[i][1]
 *             comaps[i].z = omaps[i][2]
*/
      if (unlikely(__pyx_v_omaps == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1164, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_omaps, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_7, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1164, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = __Pyx_PyLong_As_int(__pyx_t_5); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1164, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_comaps[__pyx_v_i]).x = __pyx_t_8;

      /* "yirage/_cython/core.pyx":1165
 *             assert len(omaps[i]) == 3, "Each omap must be a tuple of 3 integers"
 *             comaps[i].x = omaps[i][0]
 *             comaps[i].y = omaps[i][1]             # <<<<<<<<<<<<<<
 *             comaps[i].z = omaps[i][2]
 *     # set griddims
*/
      if (unlikely(__pyx_v_omaps == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1165, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_omaps, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_5, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1165, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyLong_As_int(__pyx_t_7); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1165, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      (__pyx_v_comaps[__pyx_v_i]).y = __pyx_t_8;

      /* "yirage/_cython/core.pyx":1166
 *             comaps[i].x = omaps[i][0]
 *             comaps[i].y = omaps[i][1]
 *             comaps[i].z = omaps[i][2]             # <<<<<<<<<<<<<<
 *     # set griddims
 *     cdef vector[MDim3] cgriddims
*/
      if (unlikely(__pyx_v_omaps == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1166, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_omaps, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_7, 2, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1166, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_8 = __Pyx_PyLong_As_int(__pyx_t_5); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1166, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_comaps[__pyx_v_i]).z = __pyx_t_8;
    }

    /* "yirage/_cython/core.pyx":1159
 *     cdef vector[MInt3] comaps
 *     comaps.resize(0)
 *     if omaps is not None:             # <<<<<<<<<<<<<<
 *         comaps.resize(len(omaps))
 *         for i in range(len(omaps)):
*/
  }

  /* "yirage/_cython/core.pyx":1169
 *     # set griddims
 *     cdef vector[MDim3] cgriddims
 *     cgriddims.resize(0)             # <<<<<<<<<<<<<<
 *     if griddims is not None:
 *         cgriddims.resize(len(griddims))
*/
  try {
    __pyx_v_cgriddims.resize(0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1169, __pyx_L1_error)
  }

  /* "yirage/_cython/core.pyx":1170
 *     cdef vector[MDim3] cgriddims
 *     cgriddims.resize(0)
 *     if griddims is not None:             # <<<<<<<<<<<<<<
 *         cgriddims.resize(len(griddims))
 *         for i in range(len(griddims)):
*/
  __pyx_t_1 = (__pyx_v_griddims != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":1171
 *     cgriddims.resize(0)
 *     if griddims is not None:
 *         cgriddims.resize(len(griddims))             # <<<<<<<<<<<<<<
 *         for i in range(len(griddims)):
 *             assert type(griddims[i]) is tuple, "Each griddim must be a tuple of 3 integers"
*/
    if (unlikely(__pyx_v_griddims == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1171, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyList_GET_SIZE(__pyx_v_griddims); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1171, __pyx_L1_error)
    try {
      __pyx_v_cgriddims.resize(__pyx_t_2);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1171, __pyx_L1_error)
    }

    /* "yirage/_cython/core.pyx":1172
 *     if griddims is not None:
 *         cgriddims.resize(len(griddims))
 *         for i in range(len(griddims)):             # <<<<<<<<<<<<<<
 *             assert type(griddims[i]) is tuple, "Each griddim must be a tuple of 3 integers"
 *             assert len(griddims[i]) == 3, "Each griddim must be a tuple of 3 integers"
*/
    if (unlikely(__pyx_v_griddims == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1172, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyList_GET_SIZE(__pyx_v_griddims); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1172, __pyx_L1_error)
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "yirage/_cython/core.pyx":1173
 *         cgriddims.resize(len(griddims))
 *         for i in range(len(griddims)):
 *             assert type(griddims[i]) is tuple, "Each griddim must be a tuple of 3 integers"             # <<<<<<<<<<<<<<
 *             assert len(griddims[i]) == 3, "Each griddim must be a tuple of 3 integers"
 *             cgriddims[i].x = griddims[i][0]
*/
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(__pyx_assertions_enabled())) {
        if (unlikely(__pyx_v_griddims == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1173, __pyx_L1_error)
        }
        __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_griddims, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1173, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = (((PyObject *)Py_TYPE(__pyx_t_5)) == ((PyObject *)(&PyTuple_Type)));
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (unlikely(!__pyx_t_1)) {
          __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_Each_griddim_must_be_a_tuple_of, 0, 0);
          __PYX_ERR(0, 1173, __pyx_L1_error)
        }
      }
      #else
      if ((1)); else __PYX_ERR(0, 1173, __pyx_L1_error)
      #endif

      /* "yirage/_cython/core.pyx":1174
 *         for i in range(len(griddims)):
 *             assert type(griddims[i]) is tuple, "Each griddim must be a tuple of 3 integers"
 *             assert len(griddims[i]) == 3, "Each griddim must be a tuple of 3 integers"             # <<<<<<<<<<<<<<
 *             cgriddims[i].x = griddims[i][0]
 *             cgriddims[i].y = griddims[i][1]
*/
      #ifndef CYTHON_WITHOUT_ASSERTIONS
      if (unlikely(__pyx_assertions_enabled())) {
        if (unlikely(__pyx_v_griddims == Py_None)) {
          PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
          __PYX_ERR(0, 1174, __pyx_L1_error)
        }
        __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_griddims, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1174, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_6 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1174, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_1 = (__pyx_t_6 == 3);
        if (unlikely(!__pyx_t_1)) {
          __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_Each_griddim_must_be_a_tuple_of, 0, 0);
          __PYX_ERR(0, 1174, __pyx_L1_error)
        }
      }
      #else
      if ((1)); else __PYX_ERR(0, 1174, __pyx_L1_error)
      #endif

      /* "yirage/_cython/core.pyx":1175
 *             assert type(griddims[i]) is tuple, "Each griddim must be a tuple of 3 integers"
 *             assert len(griddims[i]) == 3, "Each griddim must be a tuple of 3 integers"
 *             cgriddims[i].x = griddims[i][0]             # <<<<<<<<<<<<<<
 *             cgriddims[i].y = griddims[i][1]
 *             cgriddims[i].z = griddims[i][2]
*/
      if (unlikely(__pyx_v_griddims == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1175, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_griddims, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_5, 0, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1175, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyLong_As_unsigned_int(__pyx_t_7); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1175, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      (__pyx_v_cgriddims[__pyx_v_i]).x = __pyx_t_9;

      /* "yirage/_cython/core.pyx":1176
 *             assert len(griddims[i]) == 3, "Each griddim must be a tuple of 3 integers"
 *             cgriddims[i].x = griddims[i][0]
 *             cgriddims[i].y = griddims[i][1]             # <<<<<<<<<<<<<<
 *             cgriddims[i].z = griddims[i][2]
 *     # set blockdims
*/
      if (unlikely(__pyx_v_griddims == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1176, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_griddims, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_t_7, 1, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_9 = __Pyx_PyLong_As_unsigned_int(__pyx_t_5); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1176, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      (__pyx_v_cgriddims[__pyx_v_i]).y = __pyx_t_9;

      /* "yirage/_cython/core.pyx":1177
 *             cgriddims[i].x = griddims[i][0]
 *             cgriddims[i].y = griddims[i][1]
 *             cgriddims[i].z = griddims[i][2]             # <<<<<<<<<<<<<<
 *     # set blockdims
 *     assert blockdims is None, "TODO: support blockdims"
*/
      if (unlikely(__pyx_v_griddims == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1177, __pyx_L1_error)
      }
      __pyx_t_5 = __Pyx_GetItemInt_List(__pyx_v_griddims, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1177, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_t_5, 2, long, 1, __Pyx_PyLong_From_long, 0, 0, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1177, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_9 = __Pyx_PyLong_As_unsigned_int(__pyx_t_7); if (unlikely((__pyx_t_9 == (unsigned int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1177, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      (__pyx_v_cgriddims[__pyx_v_i]).z = __pyx_t_9;
    }

    /* "yirage/_cython/core.pyx":1170
 *     cdef vector[MDim3] cgriddims
 *     cgriddims.resize(0)
 *     if griddims is not None:             # <<<<<<<<<<<<<<
 *         cgriddims.resize(len(griddims))
 *         for i in range(len(griddims)):
*/
  }

  /* "yirage/_cython/core.pyx":1179
 *             cgriddims[i].z = griddims[i][2]
 *     # set blockdims
 *     assert blockdims is None, "TODO: support blockdims"             # <<<<<<<<<<<<<<
 *     cdef vector[MDim3] cblockdims
 *     cblockdims.resize(0)
*/
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = (__pyx_v_blockdims == ((PyObject*)Py_None));
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, __pyx_mstate_global->__pyx_kp_u_TODO_support_blockdims, 0, 0);
      __PYX_ERR(0, 1179, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1179, __pyx_L1_error)
  #endif

  /* "yirage/_cython/core.pyx":1181
 *     assert blockdims is None, "TODO: support blockdims"
 *     cdef vector[MDim3] cblockdims
 *     cblockdims.resize(0)             # <<<<<<<<<<<<<<
 *     # set fmaps
 *     cdef vector[int] cfmaps
*/
  try {
    __pyx_v_cblockdims.resize(0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1181, __pyx_L1_error)
  }

  /* "yirage/_cython/core.pyx":1184
 *     # set fmaps
 *     cdef vector[int] cfmaps
 *     cfmaps.resize(0)             # <<<<<<<<<<<<<<
 *     if fmaps is not None:
 *         cfmaps.resize(len(fmaps))
*/
  try {
    __pyx_v_cfmaps.resize(0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1184, __pyx_L1_error)
  }

  /* "yirage/_cython/core.pyx":1185
 *     cdef vector[int] cfmaps
 *     cfmaps.resize(0)
 *     if fmaps is not None:             # <<<<<<<<<<<<<<
 *         cfmaps.resize(len(fmaps))
 *         for i in range(len(fmaps)):
*/
  __pyx_t_1 = (__pyx_v_fmaps != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":1186
 *     cfmaps.resize(0)
 *     if fmaps is not None:
 *         cfmaps.resize(len(fmaps))             # <<<<<<<<<<<<<<
 *         for i in range(len(fmaps)):
 *             cfmaps[i] = fmaps[i]
*/
    if (unlikely(__pyx_v_fmaps == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1186, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyList_GET_SIZE(__pyx_v_fmaps); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1186, __pyx_L1_error)
    try {
      __pyx_v_cfmaps.resize(__pyx_t_2);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1186, __pyx_L1_error)
    }

    /* "yirage/_cython/core.pyx":1187
 *     if fmaps is not None:
 *         cfmaps.resize(len(fmaps))
 *         for i in range(len(fmaps)):             # <<<<<<<<<<<<<<
 *             cfmaps[i] = fmaps[i]
 *     #set franges
*/
    if (unlikely(__pyx_v_fmaps == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1187, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyList_GET_SIZE(__pyx_v_fmaps); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1187, __pyx_L1_error)
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "yirage/_cython/core.pyx":1188
 *         cfmaps.resize(len(fmaps))
 *         for i in range(len(fmaps)):
 *             cfmaps[i] = fmaps[i]             # <<<<<<<<<<<<<<
 *     #set franges
 *     cdef vector[int] cfranges
*/
      if (unlikely(__pyx_v_fmaps == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1188, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_fmaps, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1188, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyLong_As_int(__pyx_t_7); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1188, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      (__pyx_v_cfmaps[__pyx_v_i]) = __pyx_t_8;
    }

    /* "yirage/_cython/core.pyx":1185
 *     cdef vector[int] cfmaps
 *     cfmaps.resize(0)
 *     if fmaps is not None:             # <<<<<<<<<<<<<<
 *         cfmaps.resize(len(fmaps))
 *         for i in range(len(fmaps)):
*/
  }

  /* "yirage/_cython/core.pyx":1191
 *     #set franges
 *     cdef vector[int] cfranges
 *     cfranges.resize(0)             # <<<<<<<<<<<<<<
 *     if franges is not None:
 *         cfranges.resize(len(franges))
*/
  try {
    __pyx_v_cfranges.resize(0);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1191, __pyx_L1_error)
  }

  /* "yirage/_cython/core.pyx":1192
 *     cdef vector[int] cfranges
 *     cfranges.resize(0)
 *     if franges is not None:             # <<<<<<<<<<<<<<
 *         cfranges.resize(len(franges))
 *         for i in range(len(franges)):
*/
  __pyx_t_1 = (__pyx_v_franges != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":1193
 *     cfranges.resize(0)
 *     if franges is not None:
 *         cfranges.resize(len(franges))             # <<<<<<<<<<<<<<
 *         for i in range(len(franges)):
 *             cfranges[i] = franges[i]
*/
    if (unlikely(__pyx_v_franges == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1193, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyList_GET_SIZE(__pyx_v_franges); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1193, __pyx_L1_error)
    try {
      __pyx_v_cfranges.resize(__pyx_t_2);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1193, __pyx_L1_error)
    }

    /* "yirage/_cython/core.pyx":1194
 *     if franges is not None:
 *         cfranges.resize(len(franges))
 *         for i in range(len(franges)):             # <<<<<<<<<<<<<<
 *             cfranges[i] = franges[i]
 *     # allocate new graphs
*/
    if (unlikely(__pyx_v_franges == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
      __PYX_ERR(0, 1194, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyList_GET_SIZE(__pyx_v_franges); if (unlikely(__pyx_t_2 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1194, __pyx_L1_error)
    __pyx_t_3 = __pyx_t_2;
    for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
      __pyx_v_i = __pyx_t_4;

      /* "yirage/_cython/core.pyx":1195
 *         cfranges.resize(len(franges))
 *         for i in range(len(franges)):
 *             cfranges[i] = franges[i]             # <<<<<<<<<<<<<<
 *     # allocate new graphs
 *     # currently support up to 1024 new graphs
*/
      if (unlikely(__pyx_v_franges == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1195, __pyx_L1_error)
      }
      __pyx_t_7 = __Pyx_GetItemInt_List(__pyx_v_franges, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1195, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_8 = __Pyx_PyLong_As_int(__pyx_t_7); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1195, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      (__pyx_v_cfranges[__pyx_v_i]) = __pyx_t_8;
    }

    /* "yirage/_cython/core.pyx":1192
 *     cdef vector[int] cfranges
 *     cfranges.resize(0)
 *     if franges is not None:             # <<<<<<<<<<<<<<
 *         cfranges.resize(len(franges))
 *         for i in range(len(franges)):
*/
  }

  /* "yirage/_cython/core.pyx":1198
 *     # allocate new graphs
 *     # currently support up to 1024 new graphs
 *     assert max_num_new_graphs <= 1024             # <<<<<<<<<<<<<<
 *     cdef CppKNGraph* cnewgraphs[1024]
 *     # set verbose
*/
  #ifndef CYTHON_WITHOUT_ASSERTIONS
  if (unlikely(__pyx_assertions_enabled())) {
    __pyx_t_1 = (__pyx_v_max_num_new_graphs <= 0x400);
    if (unlikely(!__pyx_t_1)) {
      __Pyx_Raise(__pyx_builtin_AssertionError, 0, 0, 0);
      __PYX_ERR(0, 1198, __pyx_L1_error)
    }
  }
  #else
  if ((1)); else __PYX_ERR(0, 1198, __pyx_L1_error)
  #endif

  /* "yirage/_cython/core.pyx":1201
 *     cdef CppKNGraph* cnewgraphs[1024]
 *     # set verbose
 *     cverbose = verbose             # <<<<<<<<<<<<<<
 *     # set previous_checkpoint
 *     cdef char* cprevious_checkpoint = NULL
*/
  __pyx_v_cverbose = __pyx_v_verbose;

  /* "yirage/_cython/core.pyx":1203
 *     cverbose = verbose
 *     # set previous_checkpoint
 *     cdef char* cprevious_checkpoint = NULL             # <<<<<<<<<<<<<<
 *     if previous_checkpoint is not None:
 *         py_byte_string = previous_checkpoint.encode('UTF-8')
*/
  __pyx_v_cprevious_checkpoint = NULL;

  /* "yirage/_cython/core.pyx":1204
 *     # set previous_checkpoint
 *     cdef char* cprevious_checkpoint = NULL
 *     if previous_checkpoint is not None:             # <<<<<<<<<<<<<<
 *         py_byte_string = previous_checkpoint.encode('UTF-8')
 *         cprevious_checkpoint = py_byte_string
*/
  __pyx_t_1 = (__pyx_v_previous_checkpoint != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":1205
 *     cdef char* cprevious_checkpoint = NULL
 *     if previous_checkpoint is not None:
 *         py_byte_string = previous_checkpoint.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         cprevious_checkpoint = py_byte_string
 *     # convert config description
*/
    if (unlikely(__pyx_v_previous_checkpoint == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 1205, __pyx_L1_error)
    }
    __pyx_t_7 = PyUnicode_AsUTF8String(__pyx_v_previous_checkpoint); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_py_byte_string = ((PyObject*)__pyx_t_7);
    __pyx_t_7 = 0;

    /* "yirage/_cython/core.pyx":1206
 *     if previous_checkpoint is not None:
 *         py_byte_string = previous_checkpoint.encode('UTF-8')
 *         cprevious_checkpoint = py_byte_string             # <<<<<<<<<<<<<<
 *     # convert config description
 *     cdef char* cconfig = NULL
*/
    __pyx_t_10 = __Pyx_PyBytes_AsWritableString(__pyx_v_py_byte_string); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) __PYX_ERR(0, 1206, __pyx_L1_error)
    __pyx_v_cprevious_checkpoint = __pyx_t_10;

    /* "yirage/_cython/core.pyx":1204
 *     # set previous_checkpoint
 *     cdef char* cprevious_checkpoint = NULL
 *     if previous_checkpoint is not None:             # <<<<<<<<<<<<<<
 *         py_byte_string = previous_checkpoint.encode('UTF-8')
 *         cprevious_checkpoint = py_byte_string
*/
  }

  /* "yirage/_cython/core.pyx":1208
 *         cprevious_checkpoint = py_byte_string
 *     # convert config description
 *     cdef char* cconfig = NULL             # <<<<<<<<<<<<<<
 *     if default_config is not None:
 *         py_byte_string = default_config.encode('UTF-8')
*/
  __pyx_v_cconfig = NULL;

  /* "yirage/_cython/core.pyx":1209
 *     # convert config description
 *     cdef char* cconfig = NULL
 *     if default_config is not None:             # <<<<<<<<<<<<<<
 *         py_byte_string = default_config.encode('UTF-8')
 *         cconfig = py_byte_string
*/
  __pyx_t_1 = (__pyx_v_default_config != ((PyObject*)Py_None));
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":1210
 *     cdef char* cconfig = NULL
 *     if default_config is not None:
 *         py_byte_string = default_config.encode('UTF-8')             # <<<<<<<<<<<<<<
 *         cconfig = py_byte_string
 *     # set is_formal_verified
*/
    if (unlikely(__pyx_v_default_config == Py_None)) {
      PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
      __PYX_ERR(0, 1210, __pyx_L1_error)
    }
    __pyx_t_7 = PyUnicode_AsUTF8String(__pyx_v_default_config); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_XDECREF_SET(__pyx_v_py_byte_string, ((PyObject*)__pyx_t_7));
    __pyx_t_7 = 0;

    /* "yirage/_cython/core.pyx":1211
 *     if default_config is not None:
 *         py_byte_string = default_config.encode('UTF-8')
 *         cconfig = py_byte_string             # <<<<<<<<<<<<<<
 *     # set is_formal_verified
 *     cis_formal_verifed = is_formal_verified
*/
    __pyx_t_10 = __Pyx_PyBytes_AsWritableString(__pyx_v_py_byte_string); if (unlikely((!__pyx_t_10) && PyErr_Occurred())) __PYX_ERR(0, 1211, __pyx_L1_error)
    __pyx_v_cconfig = __pyx_t_10;

    /* "yirage/_cython/core.pyx":1209
 *     # convert config description
 *     cdef char* cconfig = NULL
 *     if default_config is not None:             # <<<<<<<<<<<<<<
 *         py_byte_string = default_config.encode('UTF-8')
 *         cconfig = py_byte_string
*/
  }

  /* "yirage/_cython/core.pyx":1213
 *         cconfig = py_byte_string
 *     # set is_formal_verified
 *     cis_formal_verifed = is_formal_verified             # <<<<<<<<<<<<<<
 *     num = cython_search(input_graph.p_kgraph, max_num_new_graphs, cnewgraphs, cimaps, comaps, cgriddims, cblockdims, cfmaps, cfranges, cprevious_checkpoint, cverbose, cconfig, cis_formal_verifed)
 *     new_graphs = list()
*/
  __pyx_v_cis_formal_verifed = __pyx_v_is_formal_verified;

  /* "yirage/_cython/core.pyx":1214
 *     # set is_formal_verified
 *     cis_formal_verifed = is_formal_verified
 *     num = cython_search(input_graph.p_kgraph, max_num_new_graphs, cnewgraphs, cimaps, comaps, cgriddims, cblockdims, cfmaps, cfranges, cprevious_checkpoint, cverbose, cconfig, cis_formal_verifed)             # <<<<<<<<<<<<<<
 *     new_graphs = list()
 *     for i in range(num):
*/
  __pyx_v_num = yirage::search_c::cython_search(__pyx_v_input_graph->p_kgraph, __pyx_v_max_num_new_graphs, __pyx_v_cnewgraphs, __pyx_v_cimaps, __pyx_v_comaps, __pyx_v_cgriddims, __pyx_v_cblockdims, __pyx_v_cfmaps, __pyx_v_cfranges, __pyx_v_cprevious_checkpoint, __pyx_v_cverbose, __pyx_v_cconfig, __pyx_v_cis_formal_verifed);

  /* "yirage/_cython/core.pyx":1215
 *     cis_formal_verifed = is_formal_verified
 *     num = cython_search(input_graph.p_kgraph, max_num_new_graphs, cnewgraphs, cimaps, comaps, cgriddims, cblockdims, cfmaps, cfranges, cprevious_checkpoint, cverbose, cconfig, cis_formal_verifed)
 *     new_graphs = list()             # <<<<<<<<<<<<<<
 *     for i in range(num):
 *         ptr = ctypes.cast(<unsigned long long>cnewgraphs[i], ctypes.c_void_p)
*/
  __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_v_new_graphs = ((PyObject*)__pyx_t_7);
  __pyx_t_7 = 0;

  /* "yirage/_cython/core.pyx":1216
 *     num = cython_search(input_graph.p_kgraph, max_num_new_graphs, cnewgraphs, cimaps, comaps, cgriddims, cblockdims, cfmaps, cfranges, cprevious_checkpoint, cverbose, cconfig, cis_formal_verifed)
 *     new_graphs = list()
 *     for i in range(num):             # <<<<<<<<<<<<<<
 *         ptr = ctypes.cast(<unsigned long long>cnewgraphs[i], ctypes.c_void_p)
 *         new_graphs.append(CyKNGraph(ptr))
*/
  __pyx_t_8 = __pyx_v_num;
  __pyx_t_11 = __pyx_t_8;
  for (__pyx_t_2 = 0; __pyx_t_2 < __pyx_t_11; __pyx_t_2+=1) {
    __pyx_v_i = __pyx_t_2;

    /* "yirage/_cython/core.pyx":1217
 *     new_graphs = list()
 *     for i in range(num):
 *         ptr = ctypes.cast(<unsigned long long>cnewgraphs[i], ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *         new_graphs.append(CyKNGraph(ptr))
 * 
*/
    __pyx_t_5 = NULL;
    __Pyx_GetModuleGlobalName(__pyx_t_12, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_t_12, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    __pyx_t_12 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)(__pyx_v_cnewgraphs[__pyx_v_i]))); if (unlikely(!__pyx_t_12)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_GetModuleGlobalName(__pyx_t_14, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_14)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_14);
    __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_14, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_15)) __PYX_ERR(0, 1217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_15);
    __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
    __pyx_t_16 = 1;
    #if CYTHON_UNPACK_METHODS
    if (unlikely(PyMethod_Check(__pyx_t_13))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_13);
      assert(__pyx_t_5);
      PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_13);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(__pyx__function);
      __Pyx_DECREF_SET(__pyx_t_13, __pyx__function);
      __pyx_t_16 = 0;
    }
    #endif
    {
      PyObject *__pyx_callargs[3] = {__pyx_t_5, __pyx_t_12, __pyx_t_15};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_13, __pyx_callargs+__pyx_t_16, (3-__pyx_t_16) | (__pyx_t_16*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1217, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
    }
    __Pyx_XDECREF_SET(__pyx_v_ptr, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "yirage/_cython/core.pyx":1218
 *     for i in range(num):
 *         ptr = ctypes.cast(<unsigned long long>cnewgraphs[i], ctypes.c_void_p)
 *         new_graphs.append(CyKNGraph(ptr))             # <<<<<<<<<<<<<<
 * 
 *     return new_graphs
*/
    __pyx_t_13 = NULL;
    __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph);
    __pyx_t_15 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph); 
    __pyx_t_16 = 1;
    {
      PyObject *__pyx_callargs[2] = {__pyx_t_13, __pyx_v_ptr};
      __pyx_t_7 = __Pyx_PyObject_FastCall(__pyx_t_15, __pyx_callargs+__pyx_t_16, (2-__pyx_t_16) | (__pyx_t_16*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
      __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
      if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1218, __pyx_L1_error)
      __Pyx_GOTREF((PyObject *)__pyx_t_7);
    }
    __pyx_t_17 = __Pyx_PyList_Append(__pyx_v_new_graphs, ((PyObject *)__pyx_t_7)); if (unlikely(__pyx_t_17 == ((int)-1))) __PYX_ERR(0, 1218, __pyx_L1_error)
    __Pyx_DECREF((PyObject *)__pyx_t_7); __pyx_t_7 = 0;
  }

  /* "yirage/_cython/core.pyx":1220
 *         new_graphs.append(CyKNGraph(ptr))
 * 
 *     return new_graphs             # <<<<<<<<<<<<<<
 * 
 * # Generate CUDA program for a uGraph
*/
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_new_graphs);
  __pyx_r = __pyx_v_new_graphs;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1144
 *             return operators
 * 
 * def search(CyKNGraph input_graph, *, int max_num_new_graphs = 1024, list imaps = None, list omaps = None, list griddims = None, list blockdims = None, list fmaps = None, list franges = None, str previous_checkpoint = None, bool verbose, str default_config = None, bool is_formal_verified):             # <<<<<<<<<<<<<<
 *     # set cimaps
 *     cdef vector[MInt3] cimaps
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("yirage.core.search", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_byte_string);
  __Pyx_XDECREF(__pyx_v_new_graphs);
  __Pyx_XDECREF(__pyx_v_ptr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1224
 * # Generate CUDA program for a uGraph
 * # Return (CUDA code, buffer size in bytes)
 * def generate_cuda_program(CyKNGraph input_graph, *, int target_cc, list input_strides, int num_warp_groups = -1, int pipeline_stages = -1, bool profiling = False, bool enable_online_softmax = False) -> dict:             # <<<<<<<<<<<<<<
 *     # Set transpiler_config
 *     cdef TranspilerConfig transpiler_config
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_21generate_cuda_program(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_21generate_cuda_program = {"generate_cuda_program", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_21generate_cuda_program, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_21generate_cuda_program(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_input_graph = 0;
  int __pyx_v_target_cc;
  PyObject *__pyx_v_input_strides = 0;
  int __pyx_v_num_warp_groups;
  int __pyx_v_pipeline_stages;
  bool __pyx_v_profiling;
  bool __pyx_v_enable_online_softmax;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[7] = {0,0,0,0,0,0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_cuda_program (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_input_graph,&__pyx_mstate_global->__pyx_n_u_target_cc,&__pyx_mstate_global->__pyx_n_u_input_strides,&__pyx_mstate_global->__pyx_n_u_num_warp_groups,&__pyx_mstate_global->__pyx_n_u_pipeline_stages,&__pyx_mstate_global->__pyx_n_u_profiling,&__pyx_mstate_global->__pyx_n_u_enable_online_softmax,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1224, __pyx_L3_error)
    if (likely(__pyx_kwds_len > 0)) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1224, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "generate_cuda_program", 0) < 0) __PYX_ERR(0, 1224, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("generate_cuda_program", 1, 1, 1, i); __PYX_ERR(0, 1224, __pyx_L3_error) }
      }
      for (Py_ssize_t i = 1; i < 3; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseKeywordRequired("generate_cuda_program", *(__pyx_pyargnames[i - 0])); __PYX_ERR(0, 1224, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      __Pyx_RaiseKeywordRequired("generate_cuda_program", __pyx_mstate_global->__pyx_n_u_target_cc); __PYX_ERR(0, 1224, __pyx_L3_error)
    }
    __pyx_v_input_graph = ((struct __pyx_obj_6yirage_4core_CyKNGraph *)values[0]);
    __pyx_v_target_cc = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_target_cc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1224, __pyx_L3_error)
    __pyx_v_input_strides = ((PyObject*)values[2]);
    if (values[3]) {
      __pyx_v_num_warp_groups = __Pyx_PyLong_As_int(values[3]); if (unlikely((__pyx_v_num_warp_groups == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1224, __pyx_L3_error)
    } else {
      __pyx_v_num_warp_groups = ((int)((int)-1));
    }
    if (values[4]) {
      __pyx_v_pipeline_stages = __Pyx_PyLong_As_int(values[4]); if (unlikely((__pyx_v_pipeline_stages == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1224, __pyx_L3_error)
    } else {
      __pyx_v_pipeline_stages = ((int)((int)-1));
    }
    if (values[5]) {
      __pyx_v_profiling = __Pyx_PyObject_IsTrue(values[5]); if (unlikely((__pyx_v_profiling == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1224, __pyx_L3_error)
    } else {
      __pyx_v_profiling = ((bool)((int)0));
    }
    if (values[6]) {
      __pyx_v_enable_online_softmax = __Pyx_PyObject_IsTrue(values[6]); if (unlikely((__pyx_v_enable_online_softmax == ((bool)-1)) && PyErr_Occurred())) __PYX_ERR(0, 1224, __pyx_L3_error)
    } else {
      __pyx_v_enable_online_softmax = ((bool)((int)0));
    }
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate_cuda_program", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1224, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.generate_cuda_program", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input_graph), __pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, 1, "input_graph", 0))) __PYX_ERR(0, 1224, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input_strides), (&PyList_Type), 1, "input_strides", 1))) __PYX_ERR(0, 1224, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_20generate_cuda_program(__pyx_self, __pyx_v_input_graph, __pyx_v_target_cc, __pyx_v_input_strides, __pyx_v_num_warp_groups, __pyx_v_pipeline_stages, __pyx_v_profiling, __pyx_v_enable_online_softmax);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_20generate_cuda_program(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_input_graph, int __pyx_v_target_cc, PyObject *__pyx_v_input_strides, int __pyx_v_num_warp_groups, int __pyx_v_pipeline_stages, bool __pyx_v_profiling, bool __pyx_v_enable_online_softmax) {
  yirage::transpiler::TranspilerConfig __pyx_v_transpiler_config;
  std::vector<std::vector<size_t> >  __pyx_v_cinput_strides;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_v_j;
  yirage::transpiler::TranspileResult __pyx_v_result;
  PyObject *__pyx_v_output_directives = 0;
  PyObject *__pyx_v_cur_output_shape = NULL;
  PyObject *__pyx_v_cur_output_strides = NULL;
  Py_ssize_t __pyx_v_num_dims;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  Py_ssize_t __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  Py_ssize_t __pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  size_t __pyx_t_11;
  int __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_cuda_program", 0);

  /* "yirage/_cython/core.pyx":1227
 *     # Set transpiler_config
 *     cdef TranspilerConfig transpiler_config
 *     transpiler_config.target_cc = target_cc             # <<<<<<<<<<<<<<
 *     transpiler_config.profiling = profiling
 *     transpiler_config.enable_online_softmax = enable_online_softmax
*/
  __pyx_v_transpiler_config.target_cc = __pyx_v_target_cc;

  /* "yirage/_cython/core.pyx":1228
 *     cdef TranspilerConfig transpiler_config
 *     transpiler_config.target_cc = target_cc
 *     transpiler_config.profiling = profiling             # <<<<<<<<<<<<<<
 *     transpiler_config.enable_online_softmax = enable_online_softmax
 * 
*/
  __pyx_v_transpiler_config.profiling = __pyx_v_profiling;

  /* "yirage/_cython/core.pyx":1229
 *     transpiler_config.target_cc = target_cc
 *     transpiler_config.profiling = profiling
 *     transpiler_config.enable_online_softmax = enable_online_softmax             # <<<<<<<<<<<<<<
 * 
 *     if num_warp_groups != -1 and pipeline_stages != -1:
*/
  __pyx_v_transpiler_config.enable_online_softmax = __pyx_v_enable_online_softmax;

  /* "yirage/_cython/core.pyx":1231
 *     transpiler_config.enable_online_softmax = enable_online_softmax
 * 
 *     if num_warp_groups != -1 and pipeline_stages != -1:             # <<<<<<<<<<<<<<
 *         transpiler_config.num_producer_wgs = 1;
 *         transpiler_config.num_consumer_wgs = num_warp_groups - 1;
*/
  __pyx_t_2 = (__pyx_v_num_warp_groups != -1L);
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__pyx_v_pipeline_stages != -1L);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "yirage/_cython/core.pyx":1232
 * 
 *     if num_warp_groups != -1 and pipeline_stages != -1:
 *         transpiler_config.num_producer_wgs = 1;             # <<<<<<<<<<<<<<
 *         transpiler_config.num_consumer_wgs = num_warp_groups - 1;
 *         transpiler_config.pipeline_stages = pipeline_stages;
*/
    __pyx_v_transpiler_config.num_producer_wgs = 1;

    /* "yirage/_cython/core.pyx":1233
 *     if num_warp_groups != -1 and pipeline_stages != -1:
 *         transpiler_config.num_producer_wgs = 1;
 *         transpiler_config.num_consumer_wgs = num_warp_groups - 1;             # <<<<<<<<<<<<<<
 *         transpiler_config.pipeline_stages = pipeline_stages;
 * 
*/
    __pyx_v_transpiler_config.num_consumer_wgs = (__pyx_v_num_warp_groups - 1);

    /* "yirage/_cython/core.pyx":1234
 *         transpiler_config.num_producer_wgs = 1;
 *         transpiler_config.num_consumer_wgs = num_warp_groups - 1;
 *         transpiler_config.pipeline_stages = pipeline_stages;             # <<<<<<<<<<<<<<
 * 
 *     # Set input_strides
*/
    __pyx_v_transpiler_config.pipeline_stages = __pyx_v_pipeline_stages;

    /* "yirage/_cython/core.pyx":1231
 *     transpiler_config.enable_online_softmax = enable_online_softmax
 * 
 *     if num_warp_groups != -1 and pipeline_stages != -1:             # <<<<<<<<<<<<<<
 *         transpiler_config.num_producer_wgs = 1;
 *         transpiler_config.num_consumer_wgs = num_warp_groups - 1;
*/
  }

  /* "yirage/_cython/core.pyx":1238
 *     # Set input_strides
 *     cdef vector[vector[size_t]] cinput_strides
 *     cinput_strides.resize(len(input_strides))             # <<<<<<<<<<<<<<
 *     for i in range(len(input_strides)):
 *         cinput_strides[i].resize(len(input_strides[i]))
*/
  if (unlikely(__pyx_v_input_strides == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1238, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyList_GET_SIZE(__pyx_v_input_strides); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1238, __pyx_L1_error)
  try {
    __pyx_v_cinput_strides.resize(__pyx_t_3);
  } catch(...) {
    __Pyx_CppExn2PyErr();
    __PYX_ERR(0, 1238, __pyx_L1_error)
  }

  /* "yirage/_cython/core.pyx":1239
 *     cdef vector[vector[size_t]] cinput_strides
 *     cinput_strides.resize(len(input_strides))
 *     for i in range(len(input_strides)):             # <<<<<<<<<<<<<<
 *         cinput_strides[i].resize(len(input_strides[i]))
 *         for j in range(len(input_strides[i])):
*/
  if (unlikely(__pyx_v_input_strides == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(0, 1239, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyList_GET_SIZE(__pyx_v_input_strides); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1239, __pyx_L1_error)
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "yirage/_cython/core.pyx":1240
 *     cinput_strides.resize(len(input_strides))
 *     for i in range(len(input_strides)):
 *         cinput_strides[i].resize(len(input_strides[i]))             # <<<<<<<<<<<<<<
 *         for j in range(len(input_strides[i])):
 *             cinput_strides[i][j] = input_strides[i][j]
*/
    if (unlikely(__pyx_v_input_strides == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1240, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_input_strides, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1240, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1240, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    try {
      (__pyx_v_cinput_strides[__pyx_v_i]).resize(__pyx_t_7);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(0, 1240, __pyx_L1_error)
    }

    /* "yirage/_cython/core.pyx":1241
 *     for i in range(len(input_strides)):
 *         cinput_strides[i].resize(len(input_strides[i]))
 *         for j in range(len(input_strides[i])):             # <<<<<<<<<<<<<<
 *             cinput_strides[i][j] = input_strides[i][j]
 * 
*/
    if (unlikely(__pyx_v_input_strides == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(0, 1241, __pyx_L1_error)
    }
    __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_input_strides, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1241, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyObject_Length(__pyx_t_6); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1241, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_j = __pyx_t_9;

      /* "yirage/_cython/core.pyx":1242
 *         cinput_strides[i].resize(len(input_strides[i]))
 *         for j in range(len(input_strides[i])):
 *             cinput_strides[i][j] = input_strides[i][j]             # <<<<<<<<<<<<<<
 * 
 *     # Call transpile
*/
      if (unlikely(__pyx_v_input_strides == Py_None)) {
        PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
        __PYX_ERR(0, 1242, __pyx_L1_error)
      }
      __pyx_t_6 = __Pyx_GetItemInt_List(__pyx_v_input_strides, __pyx_v_i, Py_ssize_t, 1, PyLong_FromSsize_t, 1, 1, 1, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_10 = __Pyx_GetItemInt(__pyx_t_6, __pyx_v_j, Py_ssize_t, 1, PyLong_FromSsize_t, 0, 1, 1, 1); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1242, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_11 = __Pyx_PyLong_As_size_t(__pyx_t_10); if (unlikely((__pyx_t_11 == (size_t)-1) && PyErr_Occurred())) __PYX_ERR(0, 1242, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      ((__pyx_v_cinput_strides[__pyx_v_i])[__pyx_v_j]) = __pyx_t_11;
    }
  }

  /* "yirage/_cython/core.pyx":1245
 * 
 *     # Call transpile
 *     cdef TranspileResult result = transpile(input_graph.p_kgraph, transpiler_config, cinput_strides)             # <<<<<<<<<<<<<<
 * 
 *     # Get output directives
*/
  __pyx_v_result = yirage::transpiler::transpile(__pyx_v_input_graph->p_kgraph, __pyx_v_transpiler_config, __pyx_v_cinput_strides);

  /* "yirage/_cython/core.pyx":1248
 * 
 *     # Get output directives
 *     cdef list[dict] output_directives = list()             # <<<<<<<<<<<<<<
 *     # cdef list[int] cur_output_shape
 *     # cdef list[int] cur_output_strides
*/
  __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1248, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_v_output_directives = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "yirage/_cython/core.pyx":1251
 *     # cdef list[int] cur_output_shape
 *     # cdef list[int] cur_output_strides
 *     for i in range(len(result.output_directives)):             # <<<<<<<<<<<<<<
 *         cur_output_shape = list()
 *         cur_output_strides = list()
*/
  __pyx_t_10 = __pyx_convert_vector_to_py_yirage_3a__3a_transpiler_3a__3a_OutputTensorDirective(__pyx_v_result.output_directives); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_3 = PyObject_Length(__pyx_t_10); if (unlikely(__pyx_t_3 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1251, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_4 = __pyx_t_3;
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "yirage/_cython/core.pyx":1252
 *     # cdef list[int] cur_output_strides
 *     for i in range(len(result.output_directives)):
 *         cur_output_shape = list()             # <<<<<<<<<<<<<<
 *         cur_output_strides = list()
 *         num_dims = len(result.output_directives[i].shape)
*/
    __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1252, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_XDECREF_SET(__pyx_v_cur_output_shape, ((PyObject*)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "yirage/_cython/core.pyx":1253
 *     for i in range(len(result.output_directives)):
 *         cur_output_shape = list()
 *         cur_output_strides = list()             # <<<<<<<<<<<<<<
 *         num_dims = len(result.output_directives[i].shape)
 *         for j in range(num_dims):
*/
    __pyx_t_10 = PyList_New(0); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1253, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __Pyx_XDECREF_SET(__pyx_v_cur_output_strides, ((PyObject*)__pyx_t_10));
    __pyx_t_10 = 0;

    /* "yirage/_cython/core.pyx":1254
 *         cur_output_shape = list()
 *         cur_output_strides = list()
 *         num_dims = len(result.output_directives[i].shape)             # <<<<<<<<<<<<<<
 *         for j in range(num_dims):
 *             cur_output_shape.append(result.output_directives[i].shape[j])
*/
    __pyx_t_10 = __pyx_convert_vector_to_py_int((__pyx_v_result.output_directives[__pyx_v_i]).shape); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1254, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_7 = PyObject_Length(__pyx_t_10); if (unlikely(__pyx_t_7 == ((Py_ssize_t)-1))) __PYX_ERR(0, 1254, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_v_num_dims = __pyx_t_7;

    /* "yirage/_cython/core.pyx":1255
 *         cur_output_strides = list()
 *         num_dims = len(result.output_directives[i].shape)
 *         for j in range(num_dims):             # <<<<<<<<<<<<<<
 *             cur_output_shape.append(result.output_directives[i].shape[j])
 *             cur_output_strides.append(result.output_directives[i].strides[j])
*/
    __pyx_t_7 = __pyx_v_num_dims;
    __pyx_t_8 = __pyx_t_7;
    for (__pyx_t_9 = 0; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
      __pyx_v_j = __pyx_t_9;

      /* "yirage/_cython/core.pyx":1256
 *         num_dims = len(result.output_directives[i].shape)
 *         for j in range(num_dims):
 *             cur_output_shape.append(result.output_directives[i].shape[j])             # <<<<<<<<<<<<<<
 *             cur_output_strides.append(result.output_directives[i].strides[j])
 *         output_directives.append({
*/
      __pyx_t_10 = __Pyx_PyLong_From_int(((__pyx_v_result.output_directives[__pyx_v_i]).shape[__pyx_v_j])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1256, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_cur_output_shape, __pyx_t_10); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 1256, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

      /* "yirage/_cython/core.pyx":1257
 *         for j in range(num_dims):
 *             cur_output_shape.append(result.output_directives[i].shape[j])
 *             cur_output_strides.append(result.output_directives[i].strides[j])             # <<<<<<<<<<<<<<
 *         output_directives.append({
 *             "alloc_size": result.output_directives[i].alloc_size,
*/
      __pyx_t_10 = __Pyx_PyLong_FromSize_t(((__pyx_v_result.output_directives[__pyx_v_i]).strides[__pyx_v_j])); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1257, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_cur_output_strides, __pyx_t_10); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 1257, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }

    /* "yirage/_cython/core.pyx":1259
 *             cur_output_strides.append(result.output_directives[i].strides[j])
 *         output_directives.append({
 *             "alloc_size": result.output_directives[i].alloc_size,             # <<<<<<<<<<<<<<
 *             "shape": cur_output_shape,
 *             "strides": cur_output_strides
*/
    __pyx_t_10 = __Pyx_PyDict_NewPresized(3); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_6 = __Pyx_PyLong_FromSize_t((__pyx_v_result.output_directives[__pyx_v_i]).alloc_size); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1259, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_alloc_size, __pyx_t_6) < 0) __PYX_ERR(0, 1259, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "yirage/_cython/core.pyx":1260
 *         output_directives.append({
 *             "alloc_size": result.output_directives[i].alloc_size,
 *             "shape": cur_output_shape,             # <<<<<<<<<<<<<<
 *             "strides": cur_output_strides
 *         })
*/
    if (PyDict_SetItem(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_shape, __pyx_v_cur_output_shape) < 0) __PYX_ERR(0, 1259, __pyx_L1_error)

    /* "yirage/_cython/core.pyx":1261
 *             "alloc_size": result.output_directives[i].alloc_size,
 *             "shape": cur_output_shape,
 *             "strides": cur_output_strides             # <<<<<<<<<<<<<<
 *         })
 * 
*/
    if (PyDict_SetItem(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_strides, __pyx_v_cur_output_strides) < 0) __PYX_ERR(0, 1259, __pyx_L1_error)

    /* "yirage/_cython/core.pyx":1258
 *             cur_output_shape.append(result.output_directives[i].shape[j])
 *             cur_output_strides.append(result.output_directives[i].strides[j])
 *         output_directives.append({             # <<<<<<<<<<<<<<
 *             "alloc_size": result.output_directives[i].alloc_size,
 *             "shape": cur_output_shape,
*/
    __pyx_t_12 = __Pyx_PyList_Append(__pyx_v_output_directives, __pyx_t_10); if (unlikely(__pyx_t_12 == ((int)-1))) __PYX_ERR(0, 1258, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }

  /* "yirage/_cython/core.pyx":1264
 *         })
 * 
 *     return {             # <<<<<<<<<<<<<<
 *         "code": result.code.decode("UTF-8"),
 *         "buf_size": result.buf_size,
*/
  __Pyx_XDECREF(__pyx_r);

  /* "yirage/_cython/core.pyx":1265
 * 
 *     return {
 *         "code": result.code.decode("UTF-8"),             # <<<<<<<<<<<<<<
 *         "buf_size": result.buf_size,
 *         "max_smem_size": result.max_smem_size,
*/
  __pyx_t_10 = __Pyx_PyDict_NewPresized(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_6 = __Pyx_decode_cpp_string(__pyx_v_result.code, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_code, __pyx_t_6) < 0) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "yirage/_cython/core.pyx":1266
 *     return {
 *         "code": result.code.decode("UTF-8"),
 *         "buf_size": result.buf_size,             # <<<<<<<<<<<<<<
 *         "max_smem_size": result.max_smem_size,
 *         "profiler_buf_size": result.profiler_buf_size,
*/
  __pyx_t_6 = __Pyx_PyLong_FromSize_t(__pyx_v_result.buf_size); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1266, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_buf_size, __pyx_t_6) < 0) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "yirage/_cython/core.pyx":1267
 *         "code": result.code.decode("UTF-8"),
 *         "buf_size": result.buf_size,
 *         "max_smem_size": result.max_smem_size,             # <<<<<<<<<<<<<<
 *         "profiler_buf_size": result.profiler_buf_size,
 *         "output_directives": output_directives
*/
  __pyx_t_6 = __Pyx_PyLong_FromSize_t(__pyx_v_result.max_smem_size); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_max_smem_size, __pyx_t_6) < 0) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "yirage/_cython/core.pyx":1268
 *         "buf_size": result.buf_size,
 *         "max_smem_size": result.max_smem_size,
 *         "profiler_buf_size": result.profiler_buf_size,             # <<<<<<<<<<<<<<
 *         "output_directives": output_directives
 *     }
*/
  __pyx_t_6 = __Pyx_PyLong_FromSize_t(__pyx_v_result.profiler_buf_size); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (PyDict_SetItem(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_profiler_buf_size, __pyx_t_6) < 0) __PYX_ERR(0, 1265, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "yirage/_cython/core.pyx":1269
 *         "max_smem_size": result.max_smem_size,
 *         "profiler_buf_size": result.profiler_buf_size,
 *         "output_directives": output_directives             # <<<<<<<<<<<<<<
 *     }
 * 
*/
  if (PyDict_SetItem(__pyx_t_10, __pyx_mstate_global->__pyx_n_u_output_directives, __pyx_v_output_directives) < 0) __PYX_ERR(0, 1265, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1224
 * # Generate CUDA program for a uGraph
 * # Return (CUDA code, buffer size in bytes)
 * def generate_cuda_program(CyKNGraph input_graph, *, int target_cc, list input_strides, int num_warp_groups = -1, int pipeline_stages = -1, bool profiling = False, bool enable_online_softmax = False) -> dict:             # <<<<<<<<<<<<<<
 *     # Set transpiler_config
 *     cdef TranspilerConfig transpiler_config
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("yirage.core.generate_cuda_program", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_output_directives);
  __Pyx_XDECREF(__pyx_v_cur_output_shape);
  __Pyx_XDECREF(__pyx_v_cur_output_strides);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1272
 *     }
 * 
 * def generate_nki_program(CyKNGraph input_graph, *, int target_cc) -> dict:             # <<<<<<<<<<<<<<
 *     # Set transpiler_config
 *     cdef NKITranspilerConfig transpiler_config
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_23generate_nki_program(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_23generate_nki_program = {"generate_nki_program", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_23generate_nki_program, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_23generate_nki_program(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_input_graph = 0;
  int __pyx_v_target_cc;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_nki_program (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_input_graph,&__pyx_mstate_global->__pyx_n_u_target_cc,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1272, __pyx_L3_error)
    if (likely(__pyx_kwds_len > 0)) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1272, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "generate_nki_program", 0) < 0) __PYX_ERR(0, 1272, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("generate_nki_program", 1, 1, 1, i); __PYX_ERR(0, 1272, __pyx_L3_error) }
      }
      for (Py_ssize_t i = 1; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseKeywordRequired("generate_nki_program", *(__pyx_pyargnames[i - 0])); __PYX_ERR(0, 1272, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      __Pyx_RaiseKeywordRequired("generate_nki_program", __pyx_mstate_global->__pyx_n_u_target_cc); __PYX_ERR(0, 1272, __pyx_L3_error)
    }
    __pyx_v_input_graph = ((struct __pyx_obj_6yirage_4core_CyKNGraph *)values[0]);
    __pyx_v_target_cc = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_target_cc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1272, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate_nki_program", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1272, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.generate_nki_program", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input_graph), __pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, 1, "input_graph", 0))) __PYX_ERR(0, 1272, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_22generate_nki_program(__pyx_self, __pyx_v_input_graph, __pyx_v_target_cc);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_22generate_nki_program(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_input_graph, int __pyx_v_target_cc) {
  yirage::nki_transpiler::NKITranspilerConfig __pyx_v_transpiler_config;
  yirage::nki_transpiler::NKITranspileResult __pyx_v_result;
  PyObject *__pyx_v_error_list = 0;
  std::string __pyx_8genexpr9__pyx_v_error;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<std::string> ::iterator __pyx_t_2;
  std::string __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_nki_program", 0);

  /* "yirage/_cython/core.pyx":1275
 *     # Set transpiler_config
 *     cdef NKITranspilerConfig transpiler_config
 *     transpiler_config.target_cc = target_cc             # <<<<<<<<<<<<<<
 * 
 *     # Call transpile
*/
  __pyx_v_transpiler_config.target_cc = __pyx_v_target_cc;

  /* "yirage/_cython/core.pyx":1278
 * 
 *     # Call transpile
 *     cdef NKITranspileResult result = transpile(input_graph.p_kgraph, transpiler_config)             # <<<<<<<<<<<<<<
 *     cdef list error_list = [error.decode("UTF-8") for error in result.error_state.errors]
 * 
*/
  __pyx_v_result = yirage::nki_transpiler::transpile(__pyx_v_input_graph->p_kgraph, __pyx_v_transpiler_config);

  /* "yirage/_cython/core.pyx":1279
 *     # Call transpile
 *     cdef NKITranspileResult result = transpile(input_graph.p_kgraph, transpiler_config)
 *     cdef list error_list = [error.decode("UTF-8") for error in result.error_state.errors]             # <<<<<<<<<<<<<<
 * 
 *     return {
*/
  { /* enter inner scope */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1279, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __pyx_v_result.error_state.errors.begin();
    for (; __pyx_t_2 != __pyx_v_result.error_state.errors.end(); ++__pyx_t_2) {
      __pyx_t_3 = *__pyx_t_2;
      __pyx_8genexpr9__pyx_v_error = __PYX_STD_MOVE_IF_SUPPORTED(__pyx_t_3);
      __pyx_t_4 = __Pyx_decode_cpp_string(__pyx_8genexpr9__pyx_v_error, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1279, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) __PYX_ERR(0, 1279, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
  } /* exit inner scope */
  __pyx_v_error_list = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1281
 *     cdef list error_list = [error.decode("UTF-8") for error in result.error_state.errors]
 * 
 *     return {             # <<<<<<<<<<<<<<
 *         "code": result.code.decode("UTF-8"),
 *         "errors": error_list,
*/
  __Pyx_XDECREF(__pyx_r);

  /* "yirage/_cython/core.pyx":1282
 * 
 *     return {
 *         "code": result.code.decode("UTF-8"),             # <<<<<<<<<<<<<<
 *         "errors": error_list,
 *     }
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_decode_cpp_string(__pyx_v_result.code, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_code, __pyx_t_4) < 0) __PYX_ERR(0, 1282, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1283
 *     return {
 *         "code": result.code.decode("UTF-8"),
 *         "errors": error_list,             # <<<<<<<<<<<<<<
 *     }
 * 
*/
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_errors, __pyx_v_error_list) < 0) __PYX_ERR(0, 1282, __pyx_L1_error)
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1272
 *     }
 * 
 * def generate_nki_program(CyKNGraph input_graph, *, int target_cc) -> dict:             # <<<<<<<<<<<<<<
 *     # Set transpiler_config
 *     cdef NKITranspilerConfig transpiler_config
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("yirage.core.generate_nki_program", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_error_list);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1286
 *     }
 * 
 * def generate_triton_program(CyKNGraph input_graph, *, int target_cc) -> dict:             # <<<<<<<<<<<<<<
 *     cdef TritonTranspilerConfig transpiler_config
 *     transpiler_config.target_cc = target_cc
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_25generate_triton_program(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_25generate_triton_program = {"generate_triton_program", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_25generate_triton_program, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_25generate_triton_program(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_input_graph = 0;
  int __pyx_v_target_cc;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("generate_triton_program (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_input_graph,&__pyx_mstate_global->__pyx_n_u_target_cc,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1286, __pyx_L3_error)
    if (likely(__pyx_kwds_len > 0)) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1286, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "generate_triton_program", 0) < 0) __PYX_ERR(0, 1286, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("generate_triton_program", 1, 1, 1, i); __PYX_ERR(0, 1286, __pyx_L3_error) }
      }
      for (Py_ssize_t i = 1; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseKeywordRequired("generate_triton_program", *(__pyx_pyargnames[i - 0])); __PYX_ERR(0, 1286, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      __Pyx_RaiseKeywordRequired("generate_triton_program", __pyx_mstate_global->__pyx_n_u_target_cc); __PYX_ERR(0, 1286, __pyx_L3_error)
    }
    __pyx_v_input_graph = ((struct __pyx_obj_6yirage_4core_CyKNGraph *)values[0]);
    __pyx_v_target_cc = __Pyx_PyLong_As_int(values[1]); if (unlikely((__pyx_v_target_cc == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1286, __pyx_L3_error)
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("generate_triton_program", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1286, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.generate_triton_program", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input_graph), __pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, 1, "input_graph", 0))) __PYX_ERR(0, 1286, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_24generate_triton_program(__pyx_self, __pyx_v_input_graph, __pyx_v_target_cc);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_24generate_triton_program(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_input_graph, int __pyx_v_target_cc) {
  yirage::triton_transpiler::TritonTranspilerConfig __pyx_v_transpiler_config;
  yirage::triton_transpiler::TritonTranspileResult __pyx_v_result;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("generate_triton_program", 0);

  /* "yirage/_cython/core.pyx":1288
 * def generate_triton_program(CyKNGraph input_graph, *, int target_cc) -> dict:
 *     cdef TritonTranspilerConfig transpiler_config
 *     transpiler_config.target_cc = target_cc             # <<<<<<<<<<<<<<
 * 
 *     cdef TritonTranspileResult result = transpile(input_graph.p_kgraph, transpiler_config)
*/
  __pyx_v_transpiler_config.target_cc = __pyx_v_target_cc;

  /* "yirage/_cython/core.pyx":1290
 *     transpiler_config.target_cc = target_cc
 * 
 *     cdef TritonTranspileResult result = transpile(input_graph.p_kgraph, transpiler_config)             # <<<<<<<<<<<<<<
 * 
 *     return {
*/
  __pyx_v_result = yirage::triton_transpiler::transpile(__pyx_v_input_graph->p_kgraph, __pyx_v_transpiler_config);

  /* "yirage/_cython/core.pyx":1292
 *     cdef TritonTranspileResult result = transpile(input_graph.p_kgraph, transpiler_config)
 * 
 *     return {             # <<<<<<<<<<<<<<
 *         "code": result.code.decode("UTF-8"),
 *         "output_shapes": result.output_shapes
*/
  __Pyx_XDECREF(__pyx_r);

  /* "yirage/_cython/core.pyx":1293
 * 
 *     return {
 *         "code": result.code.decode("UTF-8"),             # <<<<<<<<<<<<<<
 *         "output_shapes": result.output_shapes
 *     }
*/
  __pyx_t_1 = __Pyx_PyDict_NewPresized(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_decode_cpp_string(__pyx_v_result.code, 0, PY_SSIZE_T_MAX, NULL, NULL, PyUnicode_DecodeUTF8); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_code, __pyx_t_2) < 0) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":1294
 *     return {
 *         "code": result.code.decode("UTF-8"),
 *         "output_shapes": result.output_shapes             # <<<<<<<<<<<<<<
 *     }
 * 
*/
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_vector_3c_int_3e___(__pyx_v_result.output_shapes); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1294, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_1, __pyx_mstate_global->__pyx_n_u_output_shapes, __pyx_t_2) < 0) __PYX_ERR(0, 1293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1286
 *     }
 * 
 * def generate_triton_program(CyKNGraph input_graph, *, int target_cc) -> dict:             # <<<<<<<<<<<<<<
 *     cdef TritonTranspilerConfig transpiler_config
 *     transpiler_config.target_cc = target_cc
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("yirage.core.generate_triton_program", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1297
 *     }
 * 
 * def set_gpu_device_id(gpu_id: int):             # <<<<<<<<<<<<<<
 *     cython_set_gpu_device_id(gpu_id)
 * 
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_27set_gpu_device_id(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_27set_gpu_device_id = {"set_gpu_device_id", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_27set_gpu_device_id, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_27set_gpu_device_id(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_gpu_id = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_gpu_device_id (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_gpu_id,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1297, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1297, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "set_gpu_device_id", 0) < 0) __PYX_ERR(0, 1297, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("set_gpu_device_id", 1, 1, 1, i); __PYX_ERR(0, 1297, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1297, __pyx_L3_error)
    }
    __pyx_v_gpu_id = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("set_gpu_device_id", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1297, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.set_gpu_device_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_gpu_id), (&PyLong_Type), 0, "gpu_id", 2))) __PYX_ERR(0, 1297, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_26set_gpu_device_id(__pyx_self, __pyx_v_gpu_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_26set_gpu_device_id(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_gpu_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_gpu_device_id", 0);

  /* "yirage/_cython/core.pyx":1298
 * 
 * def set_gpu_device_id(gpu_id: int):
 *     cython_set_gpu_device_id(gpu_id)             # <<<<<<<<<<<<<<
 * 
 * def cy_to_json(CyKNGraph input_graph, str filename):
*/
  __pyx_t_1 = __Pyx_PyLong_As_int(__pyx_v_gpu_id); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(0, 1298, __pyx_L1_error)
  (void)(yirage::kernel::cython_set_gpu_device_id(__pyx_t_1));

  /* "yirage/_cython/core.pyx":1297
 *     }
 * 
 * def set_gpu_device_id(gpu_id: int):             # <<<<<<<<<<<<<<
 *     cython_set_gpu_device_id(gpu_id)
 * 
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("yirage.core.set_gpu_device_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1300
 *     cython_set_gpu_device_id(gpu_id)
 * 
 * def cy_to_json(CyKNGraph input_graph, str filename):             # <<<<<<<<<<<<<<
 *     cfilename = filename.encode('UTF-8')
 *     cython_to_json(input_graph.p_kgraph, cfilename)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_29cy_to_json(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_29cy_to_json = {"cy_to_json", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_29cy_to_json, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_29cy_to_json(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_input_graph = 0;
  PyObject *__pyx_v_filename = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[2] = {0,0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cy_to_json (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_input_graph,&__pyx_mstate_global->__pyx_n_u_filename,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1300, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  2:
        values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1300, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1300, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "cy_to_json", 0) < 0) __PYX_ERR(0, 1300, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 2; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("cy_to_json", 1, 2, 2, i); __PYX_ERR(0, 1300, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 2)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1300, __pyx_L3_error)
      values[1] = __Pyx_ArgRef_FASTCALL(__pyx_args, 1);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[1])) __PYX_ERR(0, 1300, __pyx_L3_error)
    }
    __pyx_v_input_graph = ((struct __pyx_obj_6yirage_4core_CyKNGraph *)values[0]);
    __pyx_v_filename = ((PyObject*)values[1]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cy_to_json", 1, 2, 2, __pyx_nargs); __PYX_ERR(0, 1300, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.cy_to_json", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_input_graph), __pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, 1, "input_graph", 0))) __PYX_ERR(0, 1300, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyUnicode_Type), 1, "filename", 1))) __PYX_ERR(0, 1300, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_28cy_to_json(__pyx_self, __pyx_v_input_graph, __pyx_v_filename);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_28cy_to_json(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6yirage_4core_CyKNGraph *__pyx_v_input_graph, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_cfilename = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cy_to_json", 0);

  /* "yirage/_cython/core.pyx":1301
 * 
 * def cy_to_json(CyKNGraph input_graph, str filename):
 *     cfilename = filename.encode('UTF-8')             # <<<<<<<<<<<<<<
 *     cython_to_json(input_graph.p_kgraph, cfilename)
 * 
*/
  if (unlikely(__pyx_v_filename == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 1301, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cfilename = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1302
 * def cy_to_json(CyKNGraph input_graph, str filename):
 *     cfilename = filename.encode('UTF-8')
 *     cython_to_json(input_graph.p_kgraph, cfilename)             # <<<<<<<<<<<<<<
 * 
 * def cy_from_json(str filename):
*/
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_v_cfilename); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 1302, __pyx_L1_error)
  yirage::search_c::cython_to_json(__pyx_v_input_graph->p_kgraph, __pyx_t_2);

  /* "yirage/_cython/core.pyx":1300
 *     cython_set_gpu_device_id(gpu_id)
 * 
 * def cy_to_json(CyKNGraph input_graph, str filename):             # <<<<<<<<<<<<<<
 *     cfilename = filename.encode('UTF-8')
 *     cython_to_json(input_graph.p_kgraph, cfilename)
*/

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("yirage.core.cy_to_json", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cfilename);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "yirage/_cython/core.pyx":1304
 *     cython_to_json(input_graph.p_kgraph, cfilename)
 * 
 * def cy_from_json(str filename):             # <<<<<<<<<<<<<<
 *     cfilename = filename.encode('UTF-8')
 *     ptr = cython_from_json(cfilename)
*/

/* Python wrapper */
static PyObject *__pyx_pw_6yirage_4core_31cy_from_json(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
); /*proto*/
static PyMethodDef __pyx_mdef_6yirage_4core_31cy_from_json = {"cy_from_json", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_31cy_from_json, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6yirage_4core_31cy_from_json(PyObject *__pyx_self, 
#if CYTHON_METH_FASTCALL
PyObject *const *__pyx_args, Py_ssize_t __pyx_nargs, PyObject *__pyx_kwds
#else
PyObject *__pyx_args, PyObject *__pyx_kwds
#endif
) {
  PyObject *__pyx_v_filename = 0;
  #if !CYTHON_METH_FASTCALL
  CYTHON_UNUSED Py_ssize_t __pyx_nargs;
  #endif
  CYTHON_UNUSED PyObject *const *__pyx_kwvalues;
  PyObject* values[1] = {0};
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("cy_from_json (wrapper)", 0);
  #if !CYTHON_METH_FASTCALL
  #if CYTHON_ASSUME_SAFE_SIZE
  __pyx_nargs = PyTuple_GET_SIZE(__pyx_args);
  #else
  __pyx_nargs = PyTuple_Size(__pyx_args); if (unlikely(__pyx_nargs < 0)) return NULL;
  #endif
  #endif
  __pyx_kwvalues = __Pyx_KwValues_FASTCALL(__pyx_args, __pyx_nargs);
  {
    PyObject ** const __pyx_pyargnames[] = {&__pyx_mstate_global->__pyx_n_u_filename,0};
    const Py_ssize_t __pyx_kwds_len = (__pyx_kwds) ? __Pyx_NumKwargs_FASTCALL(__pyx_kwds) : 0;
    if (unlikely(__pyx_kwds_len) < 0) __PYX_ERR(0, 1304, __pyx_L3_error)
    if (__pyx_kwds_len > 0) {
      switch (__pyx_nargs) {
        case  1:
        values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
        if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1304, __pyx_L3_error)
        CYTHON_FALLTHROUGH;
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      const Py_ssize_t kwd_pos_args = __pyx_nargs;
      if (__Pyx_ParseKeywords(__pyx_kwds, __pyx_kwvalues, __pyx_pyargnames, 0, values, kwd_pos_args, __pyx_kwds_len, "cy_from_json", 0) < 0) __PYX_ERR(0, 1304, __pyx_L3_error)
      for (Py_ssize_t i = __pyx_nargs; i < 1; i++) {
        if (unlikely(!values[i])) { __Pyx_RaiseArgtupleInvalid("cy_from_json", 1, 1, 1, i); __PYX_ERR(0, 1304, __pyx_L3_error) }
      }
    } else if (unlikely(__pyx_nargs != 1)) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = __Pyx_ArgRef_FASTCALL(__pyx_args, 0);
      if (!CYTHON_ASSUME_SAFE_MACROS && unlikely(!values[0])) __PYX_ERR(0, 1304, __pyx_L3_error)
    }
    __pyx_v_filename = ((PyObject*)values[0]);
  }
  goto __pyx_L6_skip;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("cy_from_json", 1, 1, 1, __pyx_nargs); __PYX_ERR(0, 1304, __pyx_L3_error)
  __pyx_L6_skip:;
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __Pyx_AddTraceback("yirage.core.cy_from_json", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_filename), (&PyUnicode_Type), 1, "filename", 1))) __PYX_ERR(0, 1304, __pyx_L1_error)
  __pyx_r = __pyx_pf_6yirage_4core_30cy_from_json(__pyx_self, __pyx_v_filename);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  goto __pyx_L7_cleaned_up;
  __pyx_L0:;
  for (Py_ssize_t __pyx_temp=0; __pyx_temp < (Py_ssize_t)(sizeof(values)/sizeof(values[0])); ++__pyx_temp) {
    Py_XDECREF(values[__pyx_temp]);
  }
  __pyx_L7_cleaned_up:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6yirage_4core_30cy_from_json(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_filename) {
  PyObject *__pyx_v_cfilename = NULL;
  yirage::kernel::Graph *__pyx_v_ptr;
  PyObject *__pyx_v_graph = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  char const *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  size_t __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("cy_from_json", 0);

  /* "yirage/_cython/core.pyx":1305
 * 
 * def cy_from_json(str filename):
 *     cfilename = filename.encode('UTF-8')             # <<<<<<<<<<<<<<
 *     ptr = cython_from_json(cfilename)
 *     graph = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  if (unlikely(__pyx_v_filename == Py_None)) {
    PyErr_Format(PyExc_AttributeError, "'NoneType' object has no attribute '%.30s'", "encode");
    __PYX_ERR(0, 1305, __pyx_L1_error)
  }
  __pyx_t_1 = PyUnicode_AsUTF8String(__pyx_v_filename); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1305, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_cfilename = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1306
 * def cy_from_json(str filename):
 *     cfilename = filename.encode('UTF-8')
 *     ptr = cython_from_json(cfilename)             # <<<<<<<<<<<<<<
 *     graph = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *     return CyKNGraph(graph)
*/
  __pyx_t_2 = __Pyx_PyBytes_AsString(__pyx_v_cfilename); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) __PYX_ERR(0, 1306, __pyx_L1_error)
  __pyx_v_ptr = yirage::search_c::cython_from_json(__pyx_t_2);

  /* "yirage/_cython/core.pyx":1307
 *     cfilename = filename.encode('UTF-8')
 *     ptr = cython_from_json(cfilename)
 *     graph = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)             # <<<<<<<<<<<<<<
 *     return CyKNGraph(graph)
*/
  __pyx_t_3 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_cast); if (unlikely(!__pyx_t_5)) __PYX_ERR(0, 1307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyLong_From_unsigned_PY_LONG_LONG(((unsigned PY_LONG_LONG)__pyx_v_ptr)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GetModuleGlobalName(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_ctypes); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 1307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_mstate_global->__pyx_n_u_c_void_p); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 1307, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_8 = 1;
  #if CYTHON_UNPACK_METHODS
  if (unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
    assert(__pyx_t_3);
    PyObject* __pyx__function = PyMethod_GET_FUNCTION(__pyx_t_5);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_INCREF(__pyx__function);
    __Pyx_DECREF_SET(__pyx_t_5, __pyx__function);
    __pyx_t_8 = 0;
  }
  #endif
  {
    PyObject *__pyx_callargs[3] = {__pyx_t_3, __pyx_t_4, __pyx_t_7};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_5, __pyx_callargs+__pyx_t_8, (3-__pyx_t_8) | (__pyx_t_8*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  }
  __pyx_v_graph = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "yirage/_cython/core.pyx":1308
 *     ptr = cython_from_json(cfilename)
 *     graph = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
 *     return CyKNGraph(graph)             # <<<<<<<<<<<<<<
*/
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = NULL;
  __Pyx_INCREF((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph);
  __pyx_t_7 = ((PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph); 
  __pyx_t_8 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_5, __pyx_v_graph};
    __pyx_t_1 = __Pyx_PyObject_FastCall(__pyx_t_7, __pyx_callargs+__pyx_t_8, (2-__pyx_t_8) | (__pyx_t_8*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1308, __pyx_L1_error)
    __Pyx_GOTREF((PyObject *)__pyx_t_1);
  }
  __pyx_r = ((PyObject *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "yirage/_cython/core.pyx":1304
 *     cython_to_json(input_graph.p_kgraph, cfilename)
 * 
 * def cy_from_json(str filename):             # <<<<<<<<<<<<<<
 *     cfilename = filename.encode('UTF-8')
 *     ptr = cython_from_json(cfilename)
*/

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("yirage.core.cy_from_json", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cfilename);
  __Pyx_XDECREF(__pyx_v_graph);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
/* #### Code section: module_exttypes ### */
static struct __pyx_vtabstruct_6yirage_4core_DTensor __pyx_vtable_6yirage_4core_DTensor;

static PyObject *__pyx_tp_new_6yirage_4core_DTensor(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6yirage_4core_DTensor *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6yirage_4core_DTensor *)o);
  p->__pyx_vtab = __pyx_vtabptr_6yirage_4core_DTensor;
  if (unlikely(__pyx_pw_6yirage_4core_7DTensor_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6yirage_4core_DTensor(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6yirage_4core_DTensor) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_6yirage_4core_7DTensor_guid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_7DTensor_4guid_1__get__(o);
}

static PyObject *__pyx_getprop_6yirage_4core_7DTensor_tensor(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_7DTensor_6tensor_1__get__(o);
}

static int __pyx_setprop_6yirage_4core_7DTensor_tensor(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6yirage_4core_7DTensor_6tensor_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6yirage_4core_7DTensor_num_dims(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_7DTensor_8num_dims_1__get__(o);
}

static PyObject *__pyx_getprop_6yirage_4core_7DTensor_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_7DTensor_5dtype_1__get__(o);
}

static PyMethodDef __pyx_methods_6yirage_4core_DTensor[] = {
  {"dim", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_7DTensor_3dim, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_7DTensor_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_7DTensor_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6yirage_4core_DTensor[] = {
  {"guid", __pyx_getprop_6yirage_4core_7DTensor_guid, 0, 0, 0},
  {"tensor", __pyx_getprop_6yirage_4core_7DTensor_tensor, __pyx_setprop_6yirage_4core_7DTensor_tensor, 0, 0},
  {"num_dims", __pyx_getprop_6yirage_4core_7DTensor_num_dims, 0, 0, 0},
  {"dtype", __pyx_getprop_6yirage_4core_7DTensor_dtype, 0, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6yirage_4core_DTensor_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6yirage_4core_DTensor},
  {Py_tp_methods, (void *)__pyx_methods_6yirage_4core_DTensor},
  {Py_tp_getset, (void *)__pyx_getsets_6yirage_4core_DTensor},
  {Py_tp_new, (void *)__pyx_tp_new_6yirage_4core_DTensor},
  {0, 0},
};
static PyType_Spec __pyx_type_6yirage_4core_DTensor_spec = {
  "yirage.core.DTensor",
  sizeof(struct __pyx_obj_6yirage_4core_DTensor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6yirage_4core_DTensor_slots,
};
#else

static PyTypeObject __pyx_type_6yirage_4core_DTensor = {
  PyVarObject_HEAD_INIT(0, 0)
  "yirage.core.""DTensor", /*tp_name*/
  sizeof(struct __pyx_obj_6yirage_4core_DTensor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6yirage_4core_DTensor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6yirage_4core_DTensor, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6yirage_4core_DTensor, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6yirage_4core_DTensor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_6yirage_4core_STensor __pyx_vtable_6yirage_4core_STensor;

static PyObject *__pyx_tp_new_6yirage_4core_STensor(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6yirage_4core_STensor *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6yirage_4core_STensor *)o);
  p->__pyx_vtab = __pyx_vtabptr_6yirage_4core_STensor;
  if (unlikely(__pyx_pw_6yirage_4core_7STensor_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6yirage_4core_STensor(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6yirage_4core_STensor) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_6yirage_4core_7STensor_guid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_7STensor_4guid_1__get__(o);
}

static PyObject *__pyx_getprop_6yirage_4core_7STensor_tensor(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_7STensor_6tensor_1__get__(o);
}

static int __pyx_setprop_6yirage_4core_7STensor_tensor(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6yirage_4core_7STensor_6tensor_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6yirage_4core_7STensor_num_dims(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_7STensor_8num_dims_1__get__(o);
}

static PyObject *__pyx_getprop_6yirage_4core_7STensor_dtype(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_7STensor_5dtype_1__get__(o);
}

static PyMethodDef __pyx_methods_6yirage_4core_STensor[] = {
  {"dim", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_7STensor_3dim, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_7STensor_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_7STensor_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6yirage_4core_STensor[] = {
  {"guid", __pyx_getprop_6yirage_4core_7STensor_guid, 0, 0, 0},
  {"tensor", __pyx_getprop_6yirage_4core_7STensor_tensor, __pyx_setprop_6yirage_4core_7STensor_tensor, 0, 0},
  {"num_dims", __pyx_getprop_6yirage_4core_7STensor_num_dims, 0, 0, 0},
  {"dtype", __pyx_getprop_6yirage_4core_7STensor_dtype, 0, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6yirage_4core_STensor_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6yirage_4core_STensor},
  {Py_tp_methods, (void *)__pyx_methods_6yirage_4core_STensor},
  {Py_tp_getset, (void *)__pyx_getsets_6yirage_4core_STensor},
  {Py_tp_new, (void *)__pyx_tp_new_6yirage_4core_STensor},
  {0, 0},
};
static PyType_Spec __pyx_type_6yirage_4core_STensor_spec = {
  "yirage.core.STensor",
  sizeof(struct __pyx_obj_6yirage_4core_STensor),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6yirage_4core_STensor_slots,
};
#else

static PyTypeObject __pyx_type_6yirage_4core_STensor = {
  PyVarObject_HEAD_INIT(0, 0)
  "yirage.core.""STensor", /*tp_name*/
  sizeof(struct __pyx_obj_6yirage_4core_STensor), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6yirage_4core_STensor, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6yirage_4core_STensor, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6yirage_4core_STensor, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6yirage_4core_STensor, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_6yirage_4core_CyKNOperator __pyx_vtable_6yirage_4core_CyKNOperator;

static PyObject *__pyx_tp_new_6yirage_4core_CyKNOperator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6yirage_4core_CyKNOperator *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6yirage_4core_CyKNOperator *)o);
  p->__pyx_vtab = __pyx_vtabptr_6yirage_4core_CyKNOperator;
  if (unlikely(__pyx_pw_6yirage_4core_12CyKNOperator_5__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6yirage_4core_CyKNOperator(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6yirage_4core_CyKNOperator) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_6yirage_4core_12CyKNOperator_op_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_12CyKNOperator_7op_type_1__get__(o);
}

static PyMethodDef __pyx_methods_6yirage_4core_CyKNOperator[] = {
  {"get_input_dtensors", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyKNOperator_1get_input_dtensors, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_output_dtensors", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyKNOperator_3get_output_dtensors, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyKNOperator_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyKNOperator_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6yirage_4core_CyKNOperator[] = {
  {"op_type", __pyx_getprop_6yirage_4core_12CyKNOperator_op_type, 0, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6yirage_4core_CyKNOperator_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6yirage_4core_CyKNOperator},
  {Py_tp_methods, (void *)__pyx_methods_6yirage_4core_CyKNOperator},
  {Py_tp_getset, (void *)__pyx_getsets_6yirage_4core_CyKNOperator},
  {Py_tp_new, (void *)__pyx_tp_new_6yirage_4core_CyKNOperator},
  {0, 0},
};
static PyType_Spec __pyx_type_6yirage_4core_CyKNOperator_spec = {
  "yirage.core.CyKNOperator",
  sizeof(struct __pyx_obj_6yirage_4core_CyKNOperator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6yirage_4core_CyKNOperator_slots,
};
#else

static PyTypeObject __pyx_type_6yirage_4core_CyKNOperator = {
  PyVarObject_HEAD_INIT(0, 0)
  "yirage.core.""CyKNOperator", /*tp_name*/
  sizeof(struct __pyx_obj_6yirage_4core_CyKNOperator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6yirage_4core_CyKNOperator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6yirage_4core_CyKNOperator, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6yirage_4core_CyKNOperator, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6yirage_4core_CyKNOperator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_6yirage_4core_CyKNCustomizedOp __pyx_vtable_6yirage_4core_CyKNCustomizedOp;

static PyObject *__pyx_tp_new_6yirage_4core_CyKNCustomizedOp(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6yirage_4core_CyKNCustomizedOp *p;
  PyObject *o = __pyx_tp_new_6yirage_4core_CyKNOperator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6yirage_4core_CyKNCustomizedOp *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6yirage_4core_CyKNOperator*)__pyx_vtabptr_6yirage_4core_CyKNCustomizedOp;
  if (unlikely(__pyx_pw_6yirage_4core_16CyKNCustomizedOp_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyMethodDef __pyx_methods_6yirage_4core_CyKNCustomizedOp[] = {
  {"get_bgraph", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_16CyKNCustomizedOp_3get_bgraph, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_16CyKNCustomizedOp_5__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_16CyKNCustomizedOp_7__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6yirage_4core_CyKNCustomizedOp_slots[] = {
  {Py_tp_methods, (void *)__pyx_methods_6yirage_4core_CyKNCustomizedOp},
  {Py_tp_new, (void *)__pyx_tp_new_6yirage_4core_CyKNCustomizedOp},
  {0, 0},
};
static PyType_Spec __pyx_type_6yirage_4core_CyKNCustomizedOp_spec = {
  "yirage.core.CyKNCustomizedOp",
  sizeof(struct __pyx_obj_6yirage_4core_CyKNCustomizedOp),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6yirage_4core_CyKNCustomizedOp_slots,
};
#else

static PyTypeObject __pyx_type_6yirage_4core_CyKNCustomizedOp = {
  PyVarObject_HEAD_INIT(0, 0)
  "yirage.core.""CyKNCustomizedOp", /*tp_name*/
  sizeof(struct __pyx_obj_6yirage_4core_CyKNCustomizedOp), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6yirage_4core_CyKNOperator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6yirage_4core_CyKNCustomizedOp, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6yirage_4core_CyKNCustomizedOp, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_6yirage_4core_CyTBOperator __pyx_vtable_6yirage_4core_CyTBOperator;

static PyObject *__pyx_tp_new_6yirage_4core_CyTBOperator(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6yirage_4core_CyTBOperator *p;
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  p = ((struct __pyx_obj_6yirage_4core_CyTBOperator *)o);
  p->__pyx_vtab = __pyx_vtabptr_6yirage_4core_CyTBOperator;
  if (unlikely(__pyx_pw_6yirage_4core_12CyTBOperator_5__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6yirage_4core_CyTBOperator(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6yirage_4core_CyTBOperator) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_6yirage_4core_12CyTBOperator_op_type(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_12CyTBOperator_7op_type_1__get__(o);
}

static PyMethodDef __pyx_methods_6yirage_4core_CyTBOperator[] = {
  {"get_input_stensors", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyTBOperator_1get_input_stensors, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_output_stensors", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyTBOperator_3get_output_stensors, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyTBOperator_7__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyTBOperator_9__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6yirage_4core_CyTBOperator[] = {
  {"op_type", __pyx_getprop_6yirage_4core_12CyTBOperator_op_type, 0, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6yirage_4core_CyTBOperator_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6yirage_4core_CyTBOperator},
  {Py_tp_methods, (void *)__pyx_methods_6yirage_4core_CyTBOperator},
  {Py_tp_getset, (void *)__pyx_getsets_6yirage_4core_CyTBOperator},
  {Py_tp_new, (void *)__pyx_tp_new_6yirage_4core_CyTBOperator},
  {0, 0},
};
static PyType_Spec __pyx_type_6yirage_4core_CyTBOperator_spec = {
  "yirage.core.CyTBOperator",
  sizeof(struct __pyx_obj_6yirage_4core_CyTBOperator),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6yirage_4core_CyTBOperator_slots,
};
#else

static PyTypeObject __pyx_type_6yirage_4core_CyTBOperator = {
  PyVarObject_HEAD_INIT(0, 0)
  "yirage.core.""CyTBOperator", /*tp_name*/
  sizeof(struct __pyx_obj_6yirage_4core_CyTBOperator), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6yirage_4core_CyTBOperator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6yirage_4core_CyTBOperator, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6yirage_4core_CyTBOperator, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6yirage_4core_CyTBOperator, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_6yirage_4core_CyTBInputOp __pyx_vtable_6yirage_4core_CyTBInputOp;

static PyObject *__pyx_tp_new_6yirage_4core_CyTBInputOp(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6yirage_4core_CyTBInputOp *p;
  PyObject *o = __pyx_tp_new_6yirage_4core_CyTBOperator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6yirage_4core_CyTBInputOp *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6yirage_4core_CyTBOperator*)__pyx_vtabptr_6yirage_4core_CyTBInputOp;
  if (unlikely(__pyx_pw_6yirage_4core_11CyTBInputOp_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyObject *__pyx_getprop_6yirage_4core_11CyTBInputOp_input_map(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_11CyTBInputOp_9input_map_1__get__(o);
}

static PyObject *__pyx_getprop_6yirage_4core_11CyTBInputOp_forloop_dim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_11CyTBInputOp_11forloop_dim_1__get__(o);
}

static PyObject *__pyx_getprop_6yirage_4core_11CyTBInputOp_dtensor_guid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_11CyTBInputOp_12dtensor_guid_1__get__(o);
}

static PyMethodDef __pyx_methods_6yirage_4core_CyTBInputOp[] = {
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_11CyTBInputOp_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_11CyTBInputOp_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6yirage_4core_CyTBInputOp[] = {
  {"input_map", __pyx_getprop_6yirage_4core_11CyTBInputOp_input_map, 0, 0, 0},
  {"forloop_dim", __pyx_getprop_6yirage_4core_11CyTBInputOp_forloop_dim, 0, 0, 0},
  {"dtensor_guid", __pyx_getprop_6yirage_4core_11CyTBInputOp_dtensor_guid, 0, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6yirage_4core_CyTBInputOp_slots[] = {
  {Py_tp_methods, (void *)__pyx_methods_6yirage_4core_CyTBInputOp},
  {Py_tp_getset, (void *)__pyx_getsets_6yirage_4core_CyTBInputOp},
  {Py_tp_new, (void *)__pyx_tp_new_6yirage_4core_CyTBInputOp},
  {0, 0},
};
static PyType_Spec __pyx_type_6yirage_4core_CyTBInputOp_spec = {
  "yirage.core.CyTBInputOp",
  sizeof(struct __pyx_obj_6yirage_4core_CyTBInputOp),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6yirage_4core_CyTBInputOp_slots,
};
#else

static PyTypeObject __pyx_type_6yirage_4core_CyTBInputOp = {
  PyVarObject_HEAD_INIT(0, 0)
  "yirage.core.""CyTBInputOp", /*tp_name*/
  sizeof(struct __pyx_obj_6yirage_4core_CyTBInputOp), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6yirage_4core_CyTBOperator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6yirage_4core_CyTBInputOp, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6yirage_4core_CyTBInputOp, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6yirage_4core_CyTBInputOp, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif
static struct __pyx_vtabstruct_6yirage_4core_CyTBOutputOp __pyx_vtable_6yirage_4core_CyTBOutputOp;

static PyObject *__pyx_tp_new_6yirage_4core_CyTBOutputOp(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6yirage_4core_CyTBOutputOp *p;
  PyObject *o = __pyx_tp_new_6yirage_4core_CyTBOperator(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6yirage_4core_CyTBOutputOp *)o);
  p->__pyx_base.__pyx_vtab = (struct __pyx_vtabstruct_6yirage_4core_CyTBOperator*)__pyx_vtabptr_6yirage_4core_CyTBOutputOp;
  if (unlikely(__pyx_pw_6yirage_4core_12CyTBOutputOp_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static PyObject *__pyx_getprop_6yirage_4core_12CyTBOutputOp_output_map(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_12CyTBOutputOp_10output_map_1__get__(o);
}

static PyObject *__pyx_getprop_6yirage_4core_12CyTBOutputOp_forloop_dim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_12CyTBOutputOp_11forloop_dim_1__get__(o);
}

static PyObject *__pyx_getprop_6yirage_4core_12CyTBOutputOp_dtensor_guid(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_12CyTBOutputOp_12dtensor_guid_1__get__(o);
}

static PyMethodDef __pyx_methods_6yirage_4core_CyTBOutputOp[] = {
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyTBOutputOp_3__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_12CyTBOutputOp_5__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6yirage_4core_CyTBOutputOp[] = {
  {"output_map", __pyx_getprop_6yirage_4core_12CyTBOutputOp_output_map, 0, 0, 0},
  {"forloop_dim", __pyx_getprop_6yirage_4core_12CyTBOutputOp_forloop_dim, 0, 0, 0},
  {"dtensor_guid", __pyx_getprop_6yirage_4core_12CyTBOutputOp_dtensor_guid, 0, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6yirage_4core_CyTBOutputOp_slots[] = {
  {Py_tp_methods, (void *)__pyx_methods_6yirage_4core_CyTBOutputOp},
  {Py_tp_getset, (void *)__pyx_getsets_6yirage_4core_CyTBOutputOp},
  {Py_tp_new, (void *)__pyx_tp_new_6yirage_4core_CyTBOutputOp},
  {0, 0},
};
static PyType_Spec __pyx_type_6yirage_4core_CyTBOutputOp_spec = {
  "yirage.core.CyTBOutputOp",
  sizeof(struct __pyx_obj_6yirage_4core_CyTBOutputOp),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6yirage_4core_CyTBOutputOp_slots,
};
#else

static PyTypeObject __pyx_type_6yirage_4core_CyTBOutputOp = {
  PyVarObject_HEAD_INIT(0, 0)
  "yirage.core.""CyTBOutputOp", /*tp_name*/
  sizeof(struct __pyx_obj_6yirage_4core_CyTBOutputOp), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6yirage_4core_CyTBOperator, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6yirage_4core_CyTBOutputOp, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6yirage_4core_CyTBOutputOp, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6yirage_4core_CyTBOutputOp, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6yirage_4core_CyKNGraph(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_6yirage_4core_9CyKNGraph_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6yirage_4core_CyKNGraph(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6yirage_4core_CyKNGraph) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyMethodDef __pyx_methods_6yirage_4core_CyKNGraph[] = {
  {"new_input", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_3new_input, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"mark_output", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_5mark_output, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"matmul", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_7matmul, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"reduction", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_9reduction, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"rms_norm", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_11rms_norm, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"exp", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_13exp, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"silu", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_15silu, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"gelu", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_17gelu, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"relu", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_19relu, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"clamp", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_21clamp, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"sqrt", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_23sqrt, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"square", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_25square, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"add", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_27add, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"mul", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_29mul, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"div", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_31div, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"pow", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_33pow, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"customized", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_35customized, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"generate_triton_program", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_37generate_triton_program, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_input_dtensors", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_39get_input_dtensors, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_owner_independent_hash", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_41get_owner_independent_hash, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_kn_tensor_to_dict", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_43_kn_tensor_to_dict, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_tb_tensor_to_dict", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_45_tb_tensor_to_dict, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_get_tb_operator_info", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_47_get_tb_operator_info, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_get_bgraph_info", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_49_get_bgraph_info, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"_get_kn_operator_info", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_51_get_kn_operator_info, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_graph_structure", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_53get_graph_structure, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_num_inputs", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_55get_num_inputs, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_num_outputs", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_57get_num_outputs, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"get_input_dtensor_shape_and_stride", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_59get_input_dtensor_shape_and_stride, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"attach_torch_tensor", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_61attach_torch_tensor, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"attach_cuda_tensor", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_63attach_cuda_tensor, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"attach_nvshmem_tensor", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_65attach_nvshmem_tensor, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"fuse_tensors", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_67fuse_tensors, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"register_task", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_69register_task, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"generate_task_graph", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_71generate_task_graph, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_73__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyKNGraph_75__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6yirage_4core_CyKNGraph_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6yirage_4core_CyKNGraph},
  {Py_tp_methods, (void *)__pyx_methods_6yirage_4core_CyKNGraph},
  {Py_tp_new, (void *)__pyx_tp_new_6yirage_4core_CyKNGraph},
  {0, 0},
};
static PyType_Spec __pyx_type_6yirage_4core_CyKNGraph_spec = {
  "yirage.core.CyKNGraph",
  sizeof(struct __pyx_obj_6yirage_4core_CyKNGraph),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6yirage_4core_CyKNGraph_slots,
};
#else

static PyTypeObject __pyx_type_6yirage_4core_CyKNGraph = {
  PyVarObject_HEAD_INIT(0, 0)
  "yirage.core.""CyKNGraph", /*tp_name*/
  sizeof(struct __pyx_obj_6yirage_4core_CyKNGraph), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6yirage_4core_CyKNGraph, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6yirage_4core_CyKNGraph, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6yirage_4core_CyKNGraph, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyObject *__pyx_tp_new_6yirage_4core_CyTBGraph(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  #if CYTHON_COMPILING_IN_LIMITED_API
  allocfunc alloc_func = (allocfunc)PyType_GetSlot(t, Py_tp_alloc);
  o = alloc_func(t, 0);
  #else
  if (likely(!__Pyx_PyType_HasFeature(t, Py_TPFLAGS_IS_ABSTRACT))) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_mstate_global->__pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  #endif
  if (unlikely(__pyx_pw_6yirage_4core_9CyTBGraph_1__cinit__(o, a, k) < 0)) goto bad;
  return o;
  bad:
  Py_DECREF(o); o = 0;
  return NULL;
}

static void __pyx_tp_dealloc_6yirage_4core_CyTBGraph(PyObject *o) {
  #if CYTHON_USE_TP_FINALIZE
  if (unlikely((PY_VERSION_HEX >= 0x03080000 || __Pyx_PyType_HasFeature(Py_TYPE(o), Py_TPFLAGS_HAVE_FINALIZE)) && __Pyx_PyObject_GetSlot(o, tp_finalize, destructor)) && (!PyType_IS_GC(Py_TYPE(o)) || !__Pyx_PyObject_GC_IsFinalized(o))) {
    if (__Pyx_PyObject_GetSlot(o, tp_dealloc, destructor) == __pyx_tp_dealloc_6yirage_4core_CyTBGraph) {
      if (PyObject_CallFinalizerFromDealloc(o)) return;
    }
  }
  #endif
  #if CYTHON_USE_TYPE_SLOTS
  (*Py_TYPE(o)->tp_free)(o);
  #else
  {
    freefunc tp_free = (freefunc)PyType_GetSlot(Py_TYPE(o), Py_tp_free);
    if (tp_free) tp_free(o);
  }
  #endif
}

static PyObject *__pyx_getprop_6yirage_4core_9CyTBGraph_grid_dim(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_9CyTBGraph_8grid_dim_1__get__(o);
}

static PyObject *__pyx_getprop_6yirage_4core_9CyTBGraph_forloop_range(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_9CyTBGraph_13forloop_range_1__get__(o);
}

static PyObject *__pyx_getprop_6yirage_4core_9CyTBGraph_operators(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6yirage_4core_9CyTBGraph_9operators_1__get__(o);
}

static PyMethodDef __pyx_methods_6yirage_4core_CyTBGraph[] = {
  {"new_input", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_3new_input, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"new_output", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_5new_output, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"matmul", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_7matmul, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"exp", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_9exp, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"silu", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_11silu, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"gelu", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_13gelu, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"relu", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_15relu, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"clamp", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_17clamp, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"square", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_19square, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"sqrt", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_21sqrt, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"mul_scalar", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_23mul_scalar, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"add", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_25add, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"mul", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_27mul, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"div", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_29div, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"sub", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_31sub, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"reduction", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_33reduction, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"reduction_max", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_35reduction_max, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"rms_norm", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_37rms_norm, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"concat", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_39concat, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"forloop_accum", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_41forloop_accum, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"forloop_accum_rescale", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_43forloop_accum_rescale, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"forloop_accum_max", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_45forloop_accum_max, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__reduce_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_47__reduce_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {"__setstate_cython__", (PyCFunction)(void(*)(void))(__Pyx_PyCFunction_FastCallWithKeywords)__pyx_pw_6yirage_4core_9CyTBGraph_49__setstate_cython__, __Pyx_METH_FASTCALL|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6yirage_4core_CyTBGraph[] = {
  {"grid_dim", __pyx_getprop_6yirage_4core_9CyTBGraph_grid_dim, 0, 0, 0},
  {"forloop_range", __pyx_getprop_6yirage_4core_9CyTBGraph_forloop_range, 0, 0, 0},
  {"operators", __pyx_getprop_6yirage_4core_9CyTBGraph_operators, 0, 0, 0},
  {0, 0, 0, 0, 0}
};
#if CYTHON_USE_TYPE_SPECS
static PyType_Slot __pyx_type_6yirage_4core_CyTBGraph_slots[] = {
  {Py_tp_dealloc, (void *)__pyx_tp_dealloc_6yirage_4core_CyTBGraph},
  {Py_tp_methods, (void *)__pyx_methods_6yirage_4core_CyTBGraph},
  {Py_tp_getset, (void *)__pyx_getsets_6yirage_4core_CyTBGraph},
  {Py_tp_new, (void *)__pyx_tp_new_6yirage_4core_CyTBGraph},
  {0, 0},
};
static PyType_Spec __pyx_type_6yirage_4core_CyTBGraph_spec = {
  "yirage.core.CyTBGraph",
  sizeof(struct __pyx_obj_6yirage_4core_CyTBGraph),
  0,
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE,
  __pyx_type_6yirage_4core_CyTBGraph_slots,
};
#else

static PyTypeObject __pyx_type_6yirage_4core_CyTBGraph = {
  PyVarObject_HEAD_INIT(0, 0)
  "yirage.core.""CyTBGraph", /*tp_name*/
  sizeof(struct __pyx_obj_6yirage_4core_CyTBGraph), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6yirage_4core_CyTBGraph, /*tp_dealloc*/
  #if PY_VERSION_HEX < 0x030800b4
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b4
  0, /*tp_vectorcall_offset*/
  #endif
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  0, /*tp_as_async*/
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6yirage_4core_CyTBGraph, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6yirage_4core_CyTBGraph, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  #if !CYTHON_USE_TYPE_SPECS
  0, /*tp_dictoffset*/
  #endif
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6yirage_4core_CyTBGraph, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if CYTHON_USE_TP_FINALIZE
  0, /*tp_finalize*/
  #else
  NULL, /*tp_finalize*/
  #endif
  #if PY_VERSION_HEX >= 0x030800b1 && (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM >= 0x07030800)
  0, /*tp_vectorcall*/
  #endif
  #if __PYX_NEED_TP_PRINT_SLOT == 1
  0, /*tp_print*/
  #endif
  #if PY_VERSION_HEX >= 0x030C0000
  0, /*tp_watched*/
  #endif
  #if PY_VERSION_HEX >= 0x030d00A4
  0, /*tp_versions_used*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX >= 0x03090000 && PY_VERSION_HEX < 0x030a0000
  0, /*tp_pypy_flags*/
  #endif
};
#endif

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};
/* #### Code section: initfunc_declarations ### */
static CYTHON_SMALL_CODE int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitGlobals(void); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate); /*proto*/
static CYTHON_SMALL_CODE int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate); /*proto*/
/* #### Code section: init_module ### */

static int __Pyx_modinit_global_init_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_global_init_code", 0);
  /*--- Global init code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_variable_export_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_export_code", 0);
  /*--- Variable export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_export_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_export_code", 0);
  /*--- Function export code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_type_init_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_init_code", 0);
  /*--- Type init code ---*/
  __pyx_vtabptr_6yirage_4core_DTensor = &__pyx_vtable_6yirage_4core_DTensor;
  __pyx_vtable_6yirage_4core_DTensor._set_tensor = (PyObject *(*)(struct __pyx_obj_6yirage_4core_DTensor *, PyObject *))__pyx_f_6yirage_4core_7DTensor__set_tensor;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6yirage_4core_DTensor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6yirage_4core_DTensor_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6yirage_4core_DTensor)) __PYX_ERR(0, 397, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6yirage_4core_DTensor_spec, __pyx_mstate->__pyx_ptype_6yirage_4core_DTensor) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6yirage_4core_DTensor = &__pyx_type_6yirage_4core_DTensor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6yirage_4core_DTensor) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6yirage_4core_DTensor->tp_dictoffset && __pyx_mstate->__pyx_ptype_6yirage_4core_DTensor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6yirage_4core_DTensor->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_ptype_6yirage_4core_DTensor, __pyx_vtabptr_6yirage_4core_DTensor) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_ptype_6yirage_4core_DTensor) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_DTensor, (PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_DTensor) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_DTensor) < 0) __PYX_ERR(0, 397, __pyx_L1_error)
  __pyx_vtabptr_6yirage_4core_STensor = &__pyx_vtable_6yirage_4core_STensor;
  __pyx_vtable_6yirage_4core_STensor._set_tensor = (PyObject *(*)(struct __pyx_obj_6yirage_4core_STensor *, PyObject *))__pyx_f_6yirage_4core_7STensor__set_tensor;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6yirage_4core_STensor = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6yirage_4core_STensor_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6yirage_4core_STensor)) __PYX_ERR(0, 450, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6yirage_4core_STensor_spec, __pyx_mstate->__pyx_ptype_6yirage_4core_STensor) < 0) __PYX_ERR(0, 450, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6yirage_4core_STensor = &__pyx_type_6yirage_4core_STensor;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6yirage_4core_STensor) < 0) __PYX_ERR(0, 450, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6yirage_4core_STensor->tp_dictoffset && __pyx_mstate->__pyx_ptype_6yirage_4core_STensor->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6yirage_4core_STensor->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_ptype_6yirage_4core_STensor, __pyx_vtabptr_6yirage_4core_STensor) < 0) __PYX_ERR(0, 450, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_ptype_6yirage_4core_STensor) < 0) __PYX_ERR(0, 450, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_STensor, (PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_STensor) < 0) __PYX_ERR(0, 450, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_STensor) < 0) __PYX_ERR(0, 450, __pyx_L1_error)
  __pyx_vtabptr_6yirage_4core_CyKNOperator = &__pyx_vtable_6yirage_4core_CyKNOperator;
  __pyx_vtable_6yirage_4core_CyKNOperator._set_operator = (PyObject *(*)(struct __pyx_obj_6yirage_4core_CyKNOperator *, PyObject *))__pyx_f_6yirage_4core_12CyKNOperator__set_operator;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNOperator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6yirage_4core_CyKNOperator_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6yirage_4core_CyKNOperator)) __PYX_ERR(0, 500, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6yirage_4core_CyKNOperator_spec, __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNOperator) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNOperator = &__pyx_type_6yirage_4core_CyKNOperator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6yirage_4core_CyKNOperator) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6yirage_4core_CyKNOperator->tp_dictoffset && __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNOperator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNOperator->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_ptype_6yirage_4core_CyKNOperator, __pyx_vtabptr_6yirage_4core_CyKNOperator) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_ptype_6yirage_4core_CyKNOperator) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_CyKNOperator, (PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNOperator) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNOperator) < 0) __PYX_ERR(0, 500, __pyx_L1_error)
  __pyx_vtabptr_6yirage_4core_CyKNCustomizedOp = &__pyx_vtable_6yirage_4core_CyKNCustomizedOp;
  __pyx_vtable_6yirage_4core_CyKNCustomizedOp.__pyx_base = *__pyx_vtabptr_6yirage_4core_CyKNOperator;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNOperator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 539, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNCustomizedOp = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6yirage_4core_CyKNCustomizedOp_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_mstate->__pyx_ptype_6yirage_4core_CyKNCustomizedOp)) __PYX_ERR(0, 539, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6yirage_4core_CyKNCustomizedOp_spec, __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNCustomizedOp) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNCustomizedOp = &__pyx_type_6yirage_4core_CyKNCustomizedOp;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNCustomizedOp->tp_base = __pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNOperator;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6yirage_4core_CyKNCustomizedOp) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6yirage_4core_CyKNCustomizedOp->tp_dictoffset && __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNCustomizedOp->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNCustomizedOp->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_ptype_6yirage_4core_CyKNCustomizedOp, __pyx_vtabptr_6yirage_4core_CyKNCustomizedOp) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_ptype_6yirage_4core_CyKNCustomizedOp) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_CyKNCustomizedOp, (PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNCustomizedOp) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNCustomizedOp) < 0) __PYX_ERR(0, 539, __pyx_L1_error)
  __pyx_vtabptr_6yirage_4core_CyTBOperator = &__pyx_vtable_6yirage_4core_CyTBOperator;
  __pyx_vtable_6yirage_4core_CyTBOperator._set_operator = (PyObject *(*)(struct __pyx_obj_6yirage_4core_CyTBOperator *, PyObject *))__pyx_f_6yirage_4core_12CyTBOperator__set_operator;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOperator = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6yirage_4core_CyTBOperator_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOperator)) __PYX_ERR(0, 558, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6yirage_4core_CyTBOperator_spec, __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOperator) < 0) __PYX_ERR(0, 558, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOperator = &__pyx_type_6yirage_4core_CyTBOperator;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOperator) < 0) __PYX_ERR(0, 558, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOperator->tp_dictoffset && __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOperator->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOperator->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOperator, __pyx_vtabptr_6yirage_4core_CyTBOperator) < 0) __PYX_ERR(0, 558, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOperator) < 0) __PYX_ERR(0, 558, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_CyTBOperator, (PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOperator) < 0) __PYX_ERR(0, 558, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOperator) < 0) __PYX_ERR(0, 558, __pyx_L1_error)
  __pyx_vtabptr_6yirage_4core_CyTBInputOp = &__pyx_vtable_6yirage_4core_CyTBInputOp;
  __pyx_vtable_6yirage_4core_CyTBInputOp.__pyx_base = *__pyx_vtabptr_6yirage_4core_CyTBOperator;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBOperator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 597, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBInputOp = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6yirage_4core_CyTBInputOp_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBInputOp)) __PYX_ERR(0, 597, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6yirage_4core_CyTBInputOp_spec, __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBInputOp) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBInputOp = &__pyx_type_6yirage_4core_CyTBInputOp;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBInputOp->tp_base = __pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBOperator;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBInputOp) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBInputOp->tp_dictoffset && __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBInputOp->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBInputOp->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBInputOp, __pyx_vtabptr_6yirage_4core_CyTBInputOp) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBInputOp) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_CyTBInputOp, (PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBInputOp) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBInputOp) < 0) __PYX_ERR(0, 597, __pyx_L1_error)
  __pyx_vtabptr_6yirage_4core_CyTBOutputOp = &__pyx_vtable_6yirage_4core_CyTBOutputOp;
  __pyx_vtable_6yirage_4core_CyTBOutputOp.__pyx_base = *__pyx_vtabptr_6yirage_4core_CyTBOperator;
  #if CYTHON_USE_TYPE_SPECS
  __pyx_t_1 = PyTuple_Pack(1, (PyObject *)__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBOperator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 633, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOutputOp = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6yirage_4core_CyTBOutputOp_spec, __pyx_t_1);
  __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(!__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOutputOp)) __PYX_ERR(0, 633, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6yirage_4core_CyTBOutputOp_spec, __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOutputOp) < 0) __PYX_ERR(0, 633, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOutputOp = &__pyx_type_6yirage_4core_CyTBOutputOp;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  __pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBOutputOp->tp_base = __pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBOperator;
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOutputOp) < 0) __PYX_ERR(0, 633, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOutputOp->tp_dictoffset && __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOutputOp->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOutputOp->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (__Pyx_SetVtable(__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOutputOp, __pyx_vtabptr_6yirage_4core_CyTBOutputOp) < 0) __PYX_ERR(0, 633, __pyx_L1_error)
  if (__Pyx_MergeVtables(__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOutputOp) < 0) __PYX_ERR(0, 633, __pyx_L1_error)
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_CyTBOutputOp, (PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOutputOp) < 0) __PYX_ERR(0, 633, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBOutputOp) < 0) __PYX_ERR(0, 633, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNGraph = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6yirage_4core_CyKNGraph_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6yirage_4core_CyKNGraph)) __PYX_ERR(0, 669, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6yirage_4core_CyKNGraph_spec, __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNGraph) < 0) __PYX_ERR(0, 669, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNGraph = &__pyx_type_6yirage_4core_CyKNGraph;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6yirage_4core_CyKNGraph) < 0) __PYX_ERR(0, 669, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6yirage_4core_CyKNGraph->tp_dictoffset && __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNGraph->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNGraph->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_CyKNGraph, (PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNGraph) < 0) __PYX_ERR(0, 669, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_CyKNGraph) < 0) __PYX_ERR(0, 669, __pyx_L1_error)
  #if CYTHON_USE_TYPE_SPECS
  __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBGraph = (PyTypeObject *) __Pyx_PyType_FromModuleAndSpec(__pyx_m, &__pyx_type_6yirage_4core_CyTBGraph_spec, NULL); if (unlikely(!__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBGraph)) __PYX_ERR(0, 969, __pyx_L1_error)
  if (__Pyx_fix_up_extension_type_from_spec(&__pyx_type_6yirage_4core_CyTBGraph_spec, __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBGraph) < 0) __PYX_ERR(0, 969, __pyx_L1_error)
  #else
  __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBGraph = &__pyx_type_6yirage_4core_CyTBGraph;
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  #endif
  #if !CYTHON_USE_TYPE_SPECS
  if (__Pyx_PyType_Ready(__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBGraph) < 0) __PYX_ERR(0, 969, __pyx_L1_error)
  #endif
  #if !CYTHON_COMPILING_IN_LIMITED_API
  if ((CYTHON_USE_TYPE_SLOTS && CYTHON_USE_PYTYPE_LOOKUP) && likely(!__pyx_mstate->__pyx_ptype_6yirage_4core_CyTBGraph->tp_dictoffset && __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBGraph->tp_getattro == PyObject_GenericGetAttr)) {
    __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBGraph->tp_getattro = PyObject_GenericGetAttr;
  }
  #endif
  if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_CyTBGraph, (PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBGraph) < 0) __PYX_ERR(0, 969, __pyx_L1_error)
  if (__Pyx_setup_reduce((PyObject *) __pyx_mstate->__pyx_ptype_6yirage_4core_CyTBGraph) < 0) __PYX_ERR(0, 969, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_type_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__Pyx_modinit_type_import_code", 0);
  /*--- Type import code ---*/
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_7cpython_4type_type = __Pyx_ImportType_3_1_3(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "type",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyTypeObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  0, 0,
  #else
  sizeof(PyHeapTypeObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyHeapTypeObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_3); if (!__pyx_mstate->__pyx_ptype_7cpython_4type_type) __PYX_ERR(4, 9, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_7cpython_4bool_bool = __Pyx_ImportType_3_1_3(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "bool",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyLongObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyLongObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  0, 0,
  #else
  sizeof(PyLongObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyLongObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_3); if (!__pyx_mstate->__pyx_ptype_7cpython_4bool_bool) __PYX_ERR(5, 8, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 16, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_7cpython_7complex_complex = __Pyx_ImportType_3_1_3(__pyx_t_1, __Pyx_BUILTIN_MODULE_NAME, "complex",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(PyComplexObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyComplexObject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  0, 0,
  #else
  sizeof(PyComplexObject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(PyComplexObject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_3); if (!__pyx_mstate->__pyx_ptype_7cpython_7complex_complex) __PYX_ERR(6, 16, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyImport_ImportModule("array"); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_mstate->__pyx_ptype_7cpython_5array_array = __Pyx_ImportType_3_1_3(__pyx_t_1, "array", "array",
  #if defined(PYPY_VERSION_NUM) && PYPY_VERSION_NUM < 0x050B0000
  sizeof(arrayobject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(arrayobject),
  #elif CYTHON_COMPILING_IN_LIMITED_API
  sizeof(arrayobject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(arrayobject),
  #else
  sizeof(arrayobject), __PYX_GET_STRUCT_ALIGNMENT_3_1_3(arrayobject),
  #endif
  __Pyx_ImportType_CheckSize_Warn_3_1_3); if (!__pyx_mstate->__pyx_ptype_7cpython_5array_array) __PYX_ERR(3, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_modinit_variable_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_variable_import_code", 0);
  /*--- Variable import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_modinit_function_import_code(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_modinit_function_import_code", 0);
  /*--- Function import code ---*/
  __Pyx_RefNannyFinishContext();
  return 0;
}

#if CYTHON_PEP489_MULTI_PHASE_INIT
static PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def); /*proto*/
static int __pyx_pymod_exec_core(PyObject* module); /*proto*/
static PyModuleDef_Slot __pyx_moduledef_slots[] = {
  {Py_mod_create, (void*)__pyx_pymod_create},
  {Py_mod_exec, (void*)__pyx_pymod_exec_core},
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
  {Py_mod_gil, Py_MOD_GIL_USED},
  #endif
  #if PY_VERSION_HEX >= 0x030C0000 && CYTHON_USE_MODULE_STATE
  {Py_mod_multiple_interpreters, Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED},
  #endif
  {0, NULL}
};
#endif

#ifdef __cplusplus
namespace {
  struct PyModuleDef __pyx_moduledef =
  #else
  static struct PyModuleDef __pyx_moduledef =
  #endif
  {
      PyModuleDef_HEAD_INIT,
      "core",
      0, /* m_doc */
    #if CYTHON_USE_MODULE_STATE
      sizeof(__pyx_mstatetype), /* m_size */
    #else
      (CYTHON_PEP489_MULTI_PHASE_INIT) ? 0 : -1, /* m_size */
    #endif
      __pyx_methods /* m_methods */,
    #if CYTHON_PEP489_MULTI_PHASE_INIT
      __pyx_moduledef_slots, /* m_slots */
    #else
      NULL, /* m_reload */
    #endif
    #if CYTHON_USE_MODULE_STATE
      __pyx_m_traverse, /* m_traverse */
      __pyx_m_clear, /* m_clear */
      NULL /* m_free */
    #else
      NULL, /* m_traverse */
      NULL, /* m_clear */
      NULL /* m_free */
    #endif
  };
  #ifdef __cplusplus
} /* anonymous namespace */
#endif

/* PyModInitFuncType */
#ifndef CYTHON_NO_PYINIT_EXPORT
  #define __Pyx_PyMODINIT_FUNC PyMODINIT_FUNC
#else
  #ifdef __cplusplus
  #define __Pyx_PyMODINIT_FUNC extern "C" PyObject *
  #else
  #define __Pyx_PyMODINIT_FUNC PyObject *
  #endif
#endif

__Pyx_PyMODINIT_FUNC PyInit_core(void) CYTHON_SMALL_CODE; /*proto*/
#if !defined(CYTHON_NO_PYINIT_EXPORT) && (defined(_WIN32) || defined(WIN32) || defined(MS_WINDOWS))
__Pyx_PyMODINIT_FUNC PyInit___init__(void) { return PyInit_core(); }
#endif
__Pyx_PyMODINIT_FUNC PyInit_core(void)
#if CYTHON_PEP489_MULTI_PHASE_INIT
{
  return PyModuleDef_Init(&__pyx_moduledef);
}
/* ModuleCreationPEP489 */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x03090000
static PY_INT64_T __Pyx_GetCurrentInterpreterId(void) {
    {
        PyObject *module = PyImport_ImportModule("_interpreters"); // 3.13+ I think
        if (!module) {
            PyErr_Clear(); // just try the 3.8-3.12 version
            module = PyImport_ImportModule("_xxsubinterpreters");
            if (!module) goto bad;
        }
        PyObject *current = PyObject_CallMethod(module, "get_current", NULL);
        Py_DECREF(module);
        if (!current) goto bad;
        if (PyTuple_Check(current)) {
            PyObject *new_current = PySequence_GetItem(current, 0);
            Py_DECREF(current);
            current = new_current;
            if (!new_current) goto bad;
        }
        long long as_c_int = PyLong_AsLongLong(current);
        Py_DECREF(current);
        return as_c_int;
    }
  bad:
    PySys_WriteStderr("__Pyx_GetCurrentInterpreterId failed. Try setting the C define CYTHON_PEP489_MULTI_PHASE_INIT=0\n");
    return -1;
}
#endif
#if !CYTHON_USE_MODULE_STATE
static CYTHON_SMALL_CODE int __Pyx_check_single_interpreter(void) {
    static PY_INT64_T main_interpreter_id = -1;
#if CYTHON_COMPILING_IN_GRAAL
    PY_INT64_T current_id = PyInterpreterState_GetIDFromThreadState(PyThreadState_Get());
#elif CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX >= 0x03090000
    PY_INT64_T current_id = PyInterpreterState_GetID(PyInterpreterState_Get());
#elif CYTHON_COMPILING_IN_LIMITED_API
    PY_INT64_T current_id = __Pyx_GetCurrentInterpreterId();
#else
    PY_INT64_T current_id = PyInterpreterState_GetID(PyThreadState_Get()->interp);
#endif
    if (unlikely(current_id == -1)) {
        return -1;
    }
    if (main_interpreter_id == -1) {
        main_interpreter_id = current_id;
        return 0;
    } else if (unlikely(main_interpreter_id != current_id)) {
        PyErr_SetString(
            PyExc_ImportError,
            "Interpreter change detected - this module can only be loaded into one interpreter per process.");
        return -1;
    }
    return 0;
}
#endif
static CYTHON_SMALL_CODE int __Pyx_copy_spec_to_module(PyObject *spec, PyObject *moddict, const char* from_name, const char* to_name, int allow_none)
{
    PyObject *value = PyObject_GetAttrString(spec, from_name);
    int result = 0;
    if (likely(value)) {
        if (allow_none || value != Py_None) {
            result = PyDict_SetItemString(moddict, to_name, value);
        }
        Py_DECREF(value);
    } else if (PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Clear();
    } else {
        result = -1;
    }
    return result;
}
static CYTHON_SMALL_CODE PyObject* __pyx_pymod_create(PyObject *spec, PyModuleDef *def) {
    PyObject *module = NULL, *moddict, *modname;
    CYTHON_UNUSED_VAR(def);
    #if !CYTHON_USE_MODULE_STATE
    if (__Pyx_check_single_interpreter())
        return NULL;
    #endif
    if (__pyx_m)
        return __Pyx_NewRef(__pyx_m);
    modname = PyObject_GetAttrString(spec, "name");
    if (unlikely(!modname)) goto bad;
    module = PyModule_NewObject(modname);
    Py_DECREF(modname);
    if (unlikely(!module)) goto bad;
    moddict = PyModule_GetDict(module);
    if (unlikely(!moddict)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "loader", "__loader__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "origin", "__file__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "parent", "__package__", 1) < 0)) goto bad;
    if (unlikely(__Pyx_copy_spec_to_module(spec, moddict, "submodule_search_locations", "__path__", 0) < 0)) goto bad;
    return module;
bad:
    Py_XDECREF(module);
    return NULL;
}


static CYTHON_SMALL_CODE int __pyx_pymod_exec_core(PyObject *__pyx_pyinit_module)
#endif
{
  int stringtab_initialized = 0;
  #if CYTHON_USE_MODULE_STATE
  int pystate_addmodule_run = 0;
  #endif
  __pyx_mstatetype *__pyx_mstate = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  size_t __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  if (__pyx_m) {
    if (__pyx_m == __pyx_pyinit_module) return 0;
    PyErr_SetString(PyExc_RuntimeError, "Module 'core' has already been imported. Re-initialisation is not supported.");
    return -1;
  }
  #else
  if (__pyx_m) return __Pyx_NewRef(__pyx_m);
  #endif
  /*--- Module creation code ---*/
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  __pyx_t_1 = __pyx_pyinit_module;
  Py_INCREF(__pyx_t_1);
  #else
  __pyx_t_1 = PyModule_Create(&__pyx_moduledef); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #if CYTHON_USE_MODULE_STATE
  {
    int add_module_result = __Pyx_State_AddModule(__pyx_t_1, &__pyx_moduledef);
    __pyx_t_1 = 0; /* transfer ownership from __pyx_t_1 to "core" pseudovariable */
    if (unlikely((add_module_result < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    pystate_addmodule_run = 1;
  }
  #else
  __pyx_m = __pyx_t_1;
  #endif
  #if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
  PyUnstable_Module_SetGIL(__pyx_m, Py_MOD_GIL_USED);
  #endif
  __pyx_mstate = __pyx_mstate_global;
  CYTHON_UNUSED_VAR(__pyx_t_1);
  __pyx_mstate->__pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_mstate->__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_mstate->__pyx_d);
  __pyx_mstate->__pyx_b = __Pyx_PyImport_AddModuleRef(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_mstate->__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_cython_runtime = __Pyx_PyImport_AddModuleRef("cython_runtime"); if (unlikely(!__pyx_mstate->__pyx_cython_runtime)) __PYX_ERR(0, 1, __pyx_L1_error)
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_mstate->__pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /* ImportRefnannyAPI */
  #if CYTHON_REFNANNY
__Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
if (!__Pyx_RefNanny) {
  PyErr_Clear();
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
  if (!__Pyx_RefNanny)
      Py_FatalError("failed to import 'refnanny' module");
}
#endif

__Pyx_RefNannySetupContext("PyInit_core", 0);
  if (__Pyx_check_binary_version(__PYX_LIMITED_VERSION_HEX, __Pyx_get_runtime_version(), CYTHON_COMPILING_IN_LIMITED_API) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pxy_PyFrame_Initialize_Offsets
  __Pxy_PyFrame_Initialize_Offsets();
  #endif
  __pyx_mstate->__pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_mstate->__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_mstate->__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_mstate->__pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_mstate->__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitConstants(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  stringtab_initialized = 1;
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if 0 || defined(__Pyx_CyFunction_USED) || defined(__Pyx_FusedFunction_USED) || defined(__Pyx_Coroutine_USED) || defined(__Pyx_Generator_USED) || defined(__Pyx_AsyncGen_USED)
  if (__pyx_CommonTypesMetaclass_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_AsyncGen_USED
  if (__pyx_AsyncGen_init(__pyx_m) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  if (__pyx_module_is_main_yirage__core) {
    if (PyObject_SetAttr(__pyx_m, __pyx_mstate_global->__pyx_n_u_name_2, __pyx_mstate_global->__pyx_n_u_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  if (!CYTHON_PEP489_MULTI_PHASE_INIT) {
    if (unlikely((__Pyx_SetPackagePathFromImportLib(__pyx_mstate_global->__pyx_kp_u_yirage_core) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "yirage.core")) {
      if (unlikely((PyDict_SetItemString(modules, "yirage.core", __pyx_m) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  if (__Pyx_CreateCodeObjects(__pyx_mstate) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global type/function init code ---*/
  (void)__Pyx_modinit_global_init_code(__pyx_mstate);
  (void)__Pyx_modinit_variable_export_code(__pyx_mstate);
  (void)__Pyx_modinit_function_export_code(__pyx_mstate);
  if (unlikely((__Pyx_modinit_type_init_code(__pyx_mstate) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  if (unlikely((__Pyx_modinit_type_import_code(__pyx_mstate) < 0))) __PYX_ERR(0, 1, __pyx_L1_error)
  (void)__Pyx_modinit_variable_import_code(__pyx_mstate);
  (void)__Pyx_modinit_function_import_code(__pyx_mstate);
  /*--- Execution code ---*/

  /* "yirage/_cython/core.pyx":18
 * from CCore cimport *
 * from cpython cimport array
 * import ctypes             # <<<<<<<<<<<<<<
 * import array
 * import numpy as np
*/
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_ctypes, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_ctypes, __pyx_t_2) < 0) __PYX_ERR(0, 18, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":19
 * from cpython cimport array
 * import ctypes
 * import array             # <<<<<<<<<<<<<<
 * import numpy as np
 * import torch
*/
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_array, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_array, __pyx_t_2) < 0) __PYX_ERR(0, 19, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":20
 * import ctypes
 * import array
 * import numpy as np             # <<<<<<<<<<<<<<
 * import torch
 * from libcpp.string cimport string
*/
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_numpy, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_np, __pyx_t_2) < 0) __PYX_ERR(0, 20, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":21
 * import array
 * import numpy as np
 * import torch             # <<<<<<<<<<<<<<
 * from libcpp.string cimport string
 * 
*/
  __pyx_t_2 = __Pyx_ImportDottedModule(__pyx_mstate_global->__pyx_n_u_torch, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_torch, __pyx_t_2) < 0) __PYX_ERR(0, 21, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":26
 * # Code snippet from OpenAI Triton
 * 
 * class dtype:             # <<<<<<<<<<<<<<
 *     SINT_TYPES = ['int8', 'int16', 'int32', 'int64']
 *     UINT_TYPES = ['uint8', 'uint16', 'uint32', 'uint64']
*/
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_mstate_global->__pyx_empty_tuple, __pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_dtype, (PyObject *) NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "yirage/_cython/core.pyx":27
 * 
 * class dtype:
 *     SINT_TYPES = ['int8', 'int16', 'int32', 'int64']             # <<<<<<<<<<<<<<
 *     UINT_TYPES = ['uint8', 'uint16', 'uint32', 'uint64']
 *     FP_TYPES = ['fp16', 'bf16', 'fp32', 'fp64']
*/
  __pyx_t_3 = __Pyx_PyList_Pack(4, __pyx_mstate_global->__pyx_n_u_int8, __pyx_mstate_global->__pyx_n_u_int16, __pyx_mstate_global->__pyx_n_u_int32, __pyx_mstate_global->__pyx_n_u_int64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_SINT_TYPES, __pyx_t_3) < 0) __PYX_ERR(0, 27, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":28
 * class dtype:
 *     SINT_TYPES = ['int8', 'int16', 'int32', 'int64']
 *     UINT_TYPES = ['uint8', 'uint16', 'uint32', 'uint64']             # <<<<<<<<<<<<<<
 *     FP_TYPES = ['fp16', 'bf16', 'fp32', 'fp64']
 * 
*/
  __pyx_t_3 = __Pyx_PyList_Pack(4, __pyx_mstate_global->__pyx_n_u_uint8, __pyx_mstate_global->__pyx_n_u_uint16, __pyx_mstate_global->__pyx_n_u_uint32, __pyx_mstate_global->__pyx_n_u_uint64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_UINT_TYPES, __pyx_t_3) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":29
 *     SINT_TYPES = ['int8', 'int16', 'int32', 'int64']
 *     UINT_TYPES = ['uint8', 'uint16', 'uint32', 'uint64']
 *     FP_TYPES = ['fp16', 'bf16', 'fp32', 'fp64']             # <<<<<<<<<<<<<<
 * 
 *     def __init__(self, name):
*/
  __pyx_t_3 = __Pyx_PyList_Pack(4, __pyx_mstate_global->__pyx_n_u_fp16, __pyx_mstate_global->__pyx_n_u_bf16, __pyx_mstate_global->__pyx_n_u_fp32, __pyx_mstate_global->__pyx_n_u_fp64); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_FP_TYPES, __pyx_t_3) < 0) __PYX_ERR(0, 29, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":31
 *     FP_TYPES = ['fp16', 'bf16', 'fp32', 'fp64']
 * 
 *     def __init__(self, name):             # <<<<<<<<<<<<<<
 *         self.name = name
 *         assert name in dtype.SINT_TYPES + dtype.UINT_TYPES + dtype.FP_TYPES, name
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_1__init__, 0, __pyx_mstate_global->__pyx_n_u_dtype___init, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[0])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_init, __pyx_t_3) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":35
 *         assert name in dtype.SINT_TYPES + dtype.UINT_TYPES + dtype.FP_TYPES, name
 * 
 *     def is_fp16(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'fp16'
 * 
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_3is_fp16, 0, __pyx_mstate_global->__pyx_n_u_dtype_is_fp16, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[1])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_is_fp16, __pyx_t_3) < 0) __PYX_ERR(0, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":38
 *         return self.name == 'fp16'
 * 
 *     def is_bf16(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'bf16'
 * 
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_5is_bf16, 0, __pyx_mstate_global->__pyx_n_u_dtype_is_bf16, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[2])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_is_bf16, __pyx_t_3) < 0) __PYX_ERR(0, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":41
 *         return self.name == 'bf16'
 * 
 *     def is_fp32(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'fp32'
 * 
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_7is_fp32, 0, __pyx_mstate_global->__pyx_n_u_dtype_is_fp32, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[3])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_is_fp32, __pyx_t_3) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":44
 *         return self.name == 'fp32'
 * 
 *     def is_fp64(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'fp64'
 * 
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_9is_fp64, 0, __pyx_mstate_global->__pyx_n_u_dtype_is_fp64, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[4])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_is_fp64, __pyx_t_3) < 0) __PYX_ERR(0, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":47
 *         return self.name == 'fp64'
 * 
 *     def is_int1(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'int1'
 * 
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_11is_int1, 0, __pyx_mstate_global->__pyx_n_u_dtype_is_int1, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[5])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_is_int1, __pyx_t_3) < 0) __PYX_ERR(0, 47, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":50
 *         return self.name == 'int1'
 * 
 *     def is_int8(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'int8'
 * 
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_13is_int8, 0, __pyx_mstate_global->__pyx_n_u_dtype_is_int8, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[6])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_is_int8, __pyx_t_3) < 0) __PYX_ERR(0, 50, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":53
 *         return self.name == 'int8'
 * 
 *     def is_int16(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'int16'
 * 
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_15is_int16, 0, __pyx_mstate_global->__pyx_n_u_dtype_is_int16, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[7])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_is_int16, __pyx_t_3) < 0) __PYX_ERR(0, 53, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":56
 *         return self.name == 'int16'
 * 
 *     def is_int32(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'int32'
 * 
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_17is_int32, 0, __pyx_mstate_global->__pyx_n_u_dtype_is_int32, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[8])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_is_int32, __pyx_t_3) < 0) __PYX_ERR(0, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":59
 *         return self.name == 'int32'
 * 
 *     def is_int64(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'int64'
 * 
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_19is_int64, 0, __pyx_mstate_global->__pyx_n_u_dtype_is_int64, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[9])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_is_int64, __pyx_t_3) < 0) __PYX_ERR(0, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":62
 *         return self.name == 'int64'
 * 
 *     def is_uint8(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'uint8'
 * 
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_21is_uint8, 0, __pyx_mstate_global->__pyx_n_u_dtype_is_uint8, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[10])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_is_uint8, __pyx_t_3) < 0) __PYX_ERR(0, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":65
 *         return self.name == 'uint8'
 * 
 *     def is_uint16(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'uint16'
 * 
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_23is_uint16, 0, __pyx_mstate_global->__pyx_n_u_dtype_is_uint16, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[11])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_is_uint16, __pyx_t_3) < 0) __PYX_ERR(0, 65, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":68
 *         return self.name == 'uint16'
 * 
 *     def is_uint32(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'uint32'
 * 
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_25is_uint32, 0, __pyx_mstate_global->__pyx_n_u_dtype_is_uint32, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[12])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_is_uint32, __pyx_t_3) < 0) __PYX_ERR(0, 68, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":71
 *         return self.name == 'uint32'
 * 
 *     def is_uint64(self):             # <<<<<<<<<<<<<<
 *         return self.name == 'uint64'
 * 
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_27is_uint64, 0, __pyx_mstate_global->__pyx_n_u_dtype_is_uint64, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[13])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_is_uint64, __pyx_t_3) < 0) __PYX_ERR(0, 71, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":74
 *         return self.name == 'uint64'
 * 
 *     def __eq__(self, other: dtype):             # <<<<<<<<<<<<<<
 *         if not isinstance(other, dtype):
 *             return False
*/
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_other, __pyx_mstate_global->__pyx_n_u_dtype) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_29__eq__, 0, __pyx_mstate_global->__pyx_n_u_dtype___eq, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[14])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_4, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_eq, __pyx_t_4) < 0) __PYX_ERR(0, 74, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":79
 *         return self.name == other.name
 * 
 *     def __ne__(self, other: dtype):             # <<<<<<<<<<<<<<
 *         return not self.__eq__(other)
 * 
*/
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_other, __pyx_mstate_global->__pyx_n_u_dtype) < 0) __PYX_ERR(0, 79, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_31__ne__, 0, __pyx_mstate_global->__pyx_n_u_dtype___ne, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[15])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_ne, __pyx_t_3) < 0) __PYX_ERR(0, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":82
 *         return not self.__eq__(other)
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return hash((self.name, ))
 * 
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_33__hash__, 0, __pyx_mstate_global->__pyx_n_u_dtype___hash, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[16])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_hash, __pyx_t_3) < 0) __PYX_ERR(0, 82, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":85
 *         return hash((self.name, ))
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.name
 * 
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_35__str__, 0, __pyx_mstate_global->__pyx_n_u_dtype___str, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[17])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_str, __pyx_t_3) < 0) __PYX_ERR(0, 85, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":88
 *         return self.name
 * 
 *     def is_dtype(type_str):             # <<<<<<<<<<<<<<
 *         return type_str in dtype.SINT_TYPES + dtype.UINT_TYPES + dtype.FP_TYPES
 * 
*/
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5dtype_37is_dtype, 0, __pyx_mstate_global->__pyx_n_u_dtype_is_dtype, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[18])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_SetNameInClass(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_is_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":26
 * # Code snippet from OpenAI Triton
 * 
 * class dtype:             # <<<<<<<<<<<<<<
 *     SINT_TYPES = ['int8', 'int16', 'int32', 'int64']
 *     UINT_TYPES = ['uint8', 'uint16', 'uint32', 'uint64']
*/
  __pyx_t_3 = __Pyx_Py3ClassCreate(((PyObject*)&PyType_Type), __pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_empty_tuple, __pyx_t_2, NULL, 0, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_dtype, __pyx_t_3) < 0) __PYX_ERR(0, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":92
 * 
 * # data types
 * int8 = dtype('int8')             # <<<<<<<<<<<<<<
 * int16 = dtype('int16')
 * int32 = dtype('int32')
*/
  __pyx_t_3 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_n_u_int8};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_int8, __pyx_t_2) < 0) __PYX_ERR(0, 92, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":93
 * # data types
 * int8 = dtype('int8')
 * int16 = dtype('int16')             # <<<<<<<<<<<<<<
 * int32 = dtype('int32')
 * int64 = dtype('int64')
*/
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_n_u_int16};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_int16, __pyx_t_2) < 0) __PYX_ERR(0, 93, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":94
 * int8 = dtype('int8')
 * int16 = dtype('int16')
 * int32 = dtype('int32')             # <<<<<<<<<<<<<<
 * int64 = dtype('int64')
 * uint8 = dtype('uint8')
*/
  __pyx_t_3 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_n_u_int32};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_int32, __pyx_t_2) < 0) __PYX_ERR(0, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":95
 * int16 = dtype('int16')
 * int32 = dtype('int32')
 * int64 = dtype('int64')             # <<<<<<<<<<<<<<
 * uint8 = dtype('uint8')
 * uint16 = dtype('uint16')
*/
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_n_u_int64};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 95, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_int64, __pyx_t_2) < 0) __PYX_ERR(0, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":96
 * int32 = dtype('int32')
 * int64 = dtype('int64')
 * uint8 = dtype('uint8')             # <<<<<<<<<<<<<<
 * uint16 = dtype('uint16')
 * uint32 = dtype('uint32')
*/
  __pyx_t_3 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_n_u_uint8};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_uint8, __pyx_t_2) < 0) __PYX_ERR(0, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":97
 * int64 = dtype('int64')
 * uint8 = dtype('uint8')
 * uint16 = dtype('uint16')             # <<<<<<<<<<<<<<
 * uint32 = dtype('uint32')
 * uint64 = dtype('uint64')
*/
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_n_u_uint16};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 97, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_uint16, __pyx_t_2) < 0) __PYX_ERR(0, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":98
 * uint8 = dtype('uint8')
 * uint16 = dtype('uint16')
 * uint32 = dtype('uint32')             # <<<<<<<<<<<<<<
 * uint64 = dtype('uint64')
 * float16 = dtype('fp16')
*/
  __pyx_t_3 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_n_u_uint32};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_uint32, __pyx_t_2) < 0) __PYX_ERR(0, 98, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":99
 * uint16 = dtype('uint16')
 * uint32 = dtype('uint32')
 * uint64 = dtype('uint64')             # <<<<<<<<<<<<<<
 * float16 = dtype('fp16')
 * bfloat16 = dtype('bf16')
*/
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_n_u_uint64};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_uint64, __pyx_t_2) < 0) __PYX_ERR(0, 99, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":100
 * uint32 = dtype('uint32')
 * uint64 = dtype('uint64')
 * float16 = dtype('fp16')             # <<<<<<<<<<<<<<
 * bfloat16 = dtype('bf16')
 * float32 = dtype('fp32')
*/
  __pyx_t_3 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_n_u_fp16};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_float16, __pyx_t_2) < 0) __PYX_ERR(0, 100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":101
 * uint64 = dtype('uint64')
 * float16 = dtype('fp16')
 * bfloat16 = dtype('bf16')             # <<<<<<<<<<<<<<
 * float32 = dtype('fp32')
 * float64 = dtype('fp64')
*/
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_n_u_bf16};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_bfloat16, __pyx_t_2) < 0) __PYX_ERR(0, 101, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":102
 * float16 = dtype('fp16')
 * bfloat16 = dtype('bf16')
 * float32 = dtype('fp32')             # <<<<<<<<<<<<<<
 * float64 = dtype('fp64')
 * 
*/
  __pyx_t_3 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_3, __pyx_mstate_global->__pyx_n_u_fp32};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_4, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_float32, __pyx_t_2) < 0) __PYX_ERR(0, 102, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":103
 * bfloat16 = dtype('bf16')
 * float32 = dtype('fp32')
 * float64 = dtype('fp64')             # <<<<<<<<<<<<<<
 * 
 * def get_kn_operator_type_string(int op_type):
*/
  __pyx_t_4 = NULL;
  __Pyx_GetModuleGlobalName(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_dtype); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = 1;
  {
    PyObject *__pyx_callargs[2] = {__pyx_t_4, __pyx_mstate_global->__pyx_n_u_fp64};
    __pyx_t_2 = __Pyx_PyObject_FastCall(__pyx_t_3, __pyx_callargs+__pyx_t_5, (2-__pyx_t_5) | (__pyx_t_5*__Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET));
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
  }
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_float64, __pyx_t_2) < 0) __PYX_ERR(0, 103, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":105
 * float64 = dtype('fp64')
 * 
 * def get_kn_operator_type_string(int op_type):             # <<<<<<<<<<<<<<
 *     if op_type == KN_UNKOWN:
 *         return "kn_unknown"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_1get_kn_operator_type_string, 0, __pyx_mstate_global->__pyx_n_u_get_kn_operator_type_string, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[19])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_get_kn_operator_type_string, __pyx_t_2) < 0) __PYX_ERR(0, 105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":184
 * 
 * 
 * def get_tb_operator_type_string(int op_type):             # <<<<<<<<<<<<<<
 *     if op_type == TB_UNKOWN:
 *         return "tb_unknown"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_3get_tb_operator_type_string, 0, __pyx_mstate_global->__pyx_n_u_get_tb_operator_type_string, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[20])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_get_tb_operator_type_string, __pyx_t_2) < 0) __PYX_ERR(0, 184, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":293
 * 
 * 
 * def convert_dtype_to_ctype(type : dtype):             # <<<<<<<<<<<<<<
 *     if type.is_int8():
 *         return DT_INT8
*/
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_type, __pyx_mstate_global->__pyx_n_u_dtype) < 0) __PYX_ERR(0, 293, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_5convert_dtype_to_ctype, 0, __pyx_mstate_global->__pyx_n_u_convert_dtype_to_ctype, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[21])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_convert_dtype_to_ctype, __pyx_t_3) < 0) __PYX_ERR(0, 293, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":311
 *         raise RuntimeError(f"Unsupported dtype: {dtype}")
 * 
 * def convert_dtype_to_torch_type(type : dtype):             # <<<<<<<<<<<<<<
 *     if type.is_int8():
 *         return torch.int8
*/
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_type, __pyx_mstate_global->__pyx_n_u_dtype) < 0) __PYX_ERR(0, 311, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_7convert_dtype_to_torch_type, 0, __pyx_mstate_global->__pyx_n_u_convert_dtype_to_torch_type, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[22])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_2, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_convert_dtype_to_torch_type, __pyx_t_2) < 0) __PYX_ERR(0, 311, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":329
 *         assert False, "Unsupported dtype: {}".format(type)
 * 
 * def convert_ctype_to_dtype(type):             # <<<<<<<<<<<<<<
 *     if type == DT_INT8:
 *         return int8
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9convert_ctype_to_dtype, 0, __pyx_mstate_global->__pyx_n_u_convert_ctype_to_dtype, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[23])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_convert_ctype_to_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 329, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":345
 *         return None
 * 
 * def convert_torch_type_to_dtype(type):             # <<<<<<<<<<<<<<
 *     if type is torch.int8:
 *         return int8
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_11convert_torch_type_to_dtype, 0, __pyx_mstate_global->__pyx_n_u_convert_torch_type_to_dtype, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[24])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_convert_torch_type_to_dtype, __pyx_t_2) < 0) __PYX_ERR(0, 345, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":364
 * 
 * 
 * def string_to_tbepilogue(epilogue):             # <<<<<<<<<<<<<<
 *     if epilogue is None:
 *         return TB_EPILOGUE_NONE
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_13string_to_tbepilogue, 0, __pyx_mstate_global->__pyx_n_u_string_to_tbepilogue, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[25])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_string_to_tbepilogue, __pyx_t_2) < 0) __PYX_ERR(0, 364, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":373
 *         return None
 * 
 * def string_to_accum_optype(acc):             # <<<<<<<<<<<<<<
 *     if acc is None:
 *         return TB_FORLOOP_ACCUM_NO_RED_OP
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_15string_to_accum_optype, 0, __pyx_mstate_global->__pyx_n_u_string_to_accum_optype, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[26])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_string_to_accum_optype, __pyx_t_2) < 0) __PYX_ERR(0, 373, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":388
 *         return None
 * 
 * def string_to_accum_rescale_optype(acc):             # <<<<<<<<<<<<<<
 *      if acc is None:
 *          return TB_FORLOOP_ACCUM_NO_RED_RESCALE_OP
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_17string_to_accum_rescale_optype, 0, __pyx_mstate_global->__pyx_n_u_string_to_accum_rescale_optype, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[27])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_string_to_accum_rescale_optype, __pyx_t_2) < 0) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":443
 *         self._set_tensor(tensor)
 * 
 *     def dim(self, int idx):             # <<<<<<<<<<<<<<
 *         if (idx < self.c_ptr.num_dims):
 *             return self.c_ptr.dim[idx]
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_7DTensor_3dim, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_DTensor_dim, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[28])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_DTensor, __pyx_mstate_global->__pyx_n_u_dim, __pyx_t_2) < 0) __PYX_ERR(0, 443, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_7DTensor_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_DTensor___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[29])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_7DTensor_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_DTensor___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[30])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":493
 *         self._set_tensor(tensor)
 * 
 *     def dim(self, int idx):             # <<<<<<<<<<<<<<
 *         if (idx < self.c_ptr.num_dims):
 *             return self.c_ptr.dim[idx]
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_7STensor_3dim, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_STensor_dim, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[31])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_STensor, __pyx_mstate_global->__pyx_n_u_dim, __pyx_t_2) < 0) __PYX_ERR(0, 493, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_7STensor_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_STensor___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[32])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_7STensor_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_STensor___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[33])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":511
 *             self.c_ptr = <CppKNOperator*>(ptr)
 * 
 *     def get_input_dtensors(self):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* cinputs[1024]
 *         num = self.c_ptr.get_input_dtensors(cinputs)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_12CyKNOperator_1get_input_dtensors, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNOperator_get_input_dtensors, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[34])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNOperator, __pyx_mstate_global->__pyx_n_u_get_input_dtensors, __pyx_t_2) < 0) __PYX_ERR(0, 511, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":520
 *         return inputs
 * 
 *     def get_output_dtensors(self):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* coutputs[1024]
 *         num = self.c_ptr.get_output_dtensors(coutputs)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_12CyKNOperator_3get_output_dtensors, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNOperator_get_output_dtensors, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[35])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNOperator, __pyx_mstate_global->__pyx_n_u_get_output_dtensors, __pyx_t_2) < 0) __PYX_ERR(0, 520, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_12CyKNOperator_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNOperator___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[36])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_12CyKNOperator_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNOperator___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[37])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":550
 *             self.c_customized_ptr = <CppKNCustomizedOp*>(ptr)
 * 
 *     def get_bgraph(self):             # <<<<<<<<<<<<<<
 *         cdef CppTBGraph* bgraph
 *         self.c_customized_ptr.get_bgraph(&bgraph)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_16CyKNCustomizedOp_3get_bgraph, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNCustomizedOp_get_bgraph, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[38])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNCustomizedOp, __pyx_mstate_global->__pyx_n_u_get_bgraph, __pyx_t_2) < 0) __PYX_ERR(0, 550, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_16CyKNCustomizedOp_5__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNCustomizedOp___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[39])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_16CyKNCustomizedOp_7__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNCustomizedOp___setstate_cyth, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[40])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":569
 *             self.c_ptr = <CppTBOperator*>(ptr)
 * 
 *     def get_input_stensors(self):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* cinputs[1024]
 *         num = self.c_ptr.get_input_stensors(cinputs)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_12CyTBOperator_1get_input_stensors, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBOperator_get_input_stensors, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[41])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBOperator, __pyx_mstate_global->__pyx_n_u_get_input_stensors, __pyx_t_2) < 0) __PYX_ERR(0, 569, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":578
 *         return inputs
 * 
 *     def get_output_stensors(self):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* coutputs[1024]
 *         num = self.c_ptr.get_output_stensors(coutputs)
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_12CyTBOperator_3get_output_stensors, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBOperator_get_output_stensors, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[42])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBOperator, __pyx_mstate_global->__pyx_n_u_get_output_stensors, __pyx_t_2) < 0) __PYX_ERR(0, 578, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_12CyTBOperator_7__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBOperator___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[43])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_12CyTBOperator_9__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBOperator___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[44])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_11CyTBInputOp_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBInputOp___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[45])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_11CyTBInputOp_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBInputOp___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[46])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_12CyTBOutputOp_3__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBOutputOp___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[47])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_2) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_12CyTBOutputOp_5__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBOutputOp___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[48])); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_2) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":684
 *             self.p_kgraph = <CppKNGraph*>(ptr)
 * 
 *     def new_input(self, tuple dims, tuple strides, dtype : dtype = float16):             # <<<<<<<<<<<<<<
 *         cdef vector[int] cdims
 *         cdef vector[size_t] cstrides
*/
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_float16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_mstate_global->__pyx_k_ = __pyx_t_2;
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __Pyx_GetModuleGlobalName(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_float16); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_Pack(1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_dtype, __pyx_mstate_global->__pyx_n_u_dtype) < 0) __PYX_ERR(0, 684, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_3new_input, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_new_input, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[49])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_4, __pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_new_input, __pyx_t_4) < 0) __PYX_ERR(0, 684, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":699
 *         return DTensor(t)
 * 
 *     def mark_output(self, DTensor A, tuple strides):             # <<<<<<<<<<<<<<
 *         cdef vector[size_t] cstrides
 *         if strides is None:
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_5mark_output, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_mark_output, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[50])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_mark_output, __pyx_t_4) < 0) __PYX_ERR(0, 699, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":709
 *         self.p_kgraph.mark_output(A.c_ptr, cstrides)
 * 
 *     def matmul(self, DTensor A, DTensor B):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.matmul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_7matmul, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_matmul, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[51])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_matmul, __pyx_t_4) < 0) __PYX_ERR(0, 709, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":714
 *         return DTensor(t)
 * 
 *     def reduction(self, DTensor input, int dim):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.reduction(input.c_ptr, dim, 1)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_9reduction, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_reduction, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[52])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_reduction, __pyx_t_4) < 0) __PYX_ERR(0, 714, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":719
 *         return DTensor(t)
 * 
 *     def rms_norm(self, DTensor input, tuple normalized_shape):             # <<<<<<<<<<<<<<
 *         cdef vector[int] cshape
 *         cshape.resize(len(normalized_shape))
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_11rms_norm, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_rms_norm, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[53])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_rms_norm, __pyx_t_4) < 0) __PYX_ERR(0, 719, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":728
 *         return DTensor(t)
 * 
 *     def exp(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.exp(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_13exp, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_exp, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[54])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_exp, __pyx_t_4) < 0) __PYX_ERR(0, 728, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":733
 *         return DTensor(t)
 * 
 *     def silu(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.silu(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_15silu, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_silu, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[55])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_silu, __pyx_t_4) < 0) __PYX_ERR(0, 733, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":738
 *         return DTensor(t)
 * 
 *     def gelu(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.gelu(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_17gelu, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_gelu, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[56])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_gelu, __pyx_t_4) < 0) __PYX_ERR(0, 738, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":743
 *         return DTensor(t)
 * 
 *     def relu(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.relu(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_19relu, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_relu, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[57])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_relu, __pyx_t_4) < 0) __PYX_ERR(0, 743, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":748
 *         return DTensor(t)
 * 
 *     def clamp(self, DTensor input, float min_val, float max_val):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.clamp(input.c_ptr, min_val, max_val)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_21clamp, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_clamp, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[58])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_clamp, __pyx_t_4) < 0) __PYX_ERR(0, 748, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":753
 *         return DTensor(t)
 * 
 *     def sqrt(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.sqrt(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_23sqrt, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_sqrt, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[59])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_sqrt, __pyx_t_4) < 0) __PYX_ERR(0, 753, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":758
 *         return DTensor(t)
 * 
 *     def square(self, DTensor input):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.square(input.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_25square, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_square, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[60])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_square, __pyx_t_4) < 0) __PYX_ERR(0, 758, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":763
 *         return DTensor(t)
 * 
 *     def add(self, DTensor A, DTensor B):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.add(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_27add, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_add, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[61])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_add, __pyx_t_4) < 0) __PYX_ERR(0, 763, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":768
 *         return DTensor(t)
 * 
 *     def mul(self, DTensor A, DTensor B):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.mul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_29mul, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_mul, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[62])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_mul, __pyx_t_4) < 0) __PYX_ERR(0, 768, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":773
 *         return DTensor(t)
 * 
 *     def div(self, DTensor A, DTensor B):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.div(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_31div, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_div, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[63])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_div, __pyx_t_4) < 0) __PYX_ERR(0, 773, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":778
 *         return DTensor(t)
 * 
 *     def pow(self, DTensor A, DTensor B):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* ptr = self.p_kgraph.pow(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_33pow, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_pow, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[64])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 778, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_pow, __pyx_t_4) < 0) __PYX_ERR(0, 778, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":783
 *         return DTensor(t)
 * 
 *     def customized(self, list inputs, CyTBGraph bgraph):             # <<<<<<<<<<<<<<
 *         cdef vector[const CppDTensor*] cinputs
 *         cinputs.resize(len(inputs))
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_35customized, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_customized, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[65])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_customized, __pyx_t_4) < 0) __PYX_ERR(0, 783, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":802
 *         return outputs
 * 
 *     def generate_triton_program(self, str filepath):             # <<<<<<<<<<<<<<
 *         assert filepath is not None, "filepath cannot be empty"
 *         py_byte_string = filepath.encode('UTF-8')
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_37generate_triton_program, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_generate_triton_progra, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[66])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_generate_triton_program, __pyx_t_4) < 0) __PYX_ERR(0, 802, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":809
 *         self.p_kgraph.generate_triton_program(cfilepath)
 * 
 *     def get_input_dtensors(self):             # <<<<<<<<<<<<<<
 *         cdef CppDTensor* cinputs[1024]
 *         num = self.p_kgraph.get_input_dtensors(cinputs)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_39get_input_dtensors, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_get_input_dtensors, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[67])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_get_input_dtensors, __pyx_t_4) < 0) __PYX_ERR(0, 809, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":818
 *         return inputs
 * 
 *     def get_owner_independent_hash(self):             # <<<<<<<<<<<<<<
 *         return self.p_kgraph.get_owner_independent_hash()
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_41get_owner_independent_hash, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_get_owner_independent, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[68])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_get_owner_independent_hash, __pyx_t_4) < 0) __PYX_ERR(0, 818, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":823
 *     # visualizer utils
 * 
 *     def _kn_tensor_to_dict(self, DTensor t):             # <<<<<<<<<<<<<<
 *         return {
 *             "num_dims": t.num_dims,
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_43_kn_tensor_to_dict, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph__kn_tensor_to_dict, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[69])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 823, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_kn_tensor_to_dict, __pyx_t_4) < 0) __PYX_ERR(0, 823, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":830
 *         }
 * 
 *     def _tb_tensor_to_dict(self, STensor t):             # <<<<<<<<<<<<<<
 *         return {
 *             "num_dims": t.num_dims,
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_45_tb_tensor_to_dict, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph__tb_tensor_to_dict, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[70])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 830, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_tb_tensor_to_dict, __pyx_t_4) < 0) __PYX_ERR(0, 830, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":837
 *         }
 * 
 *     def _get_tb_operator_info(self, CyTBOperator op):             # <<<<<<<<<<<<<<
 *         ans = {
 *             "op_type": op.op_type,
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_47_get_tb_operator_info, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph__get_tb_operator_info, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[71])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_get_tb_operator_info, __pyx_t_4) < 0) __PYX_ERR(0, 837, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":859
 *         return ans
 * 
 *     def _get_bgraph_info(self, CyKNOperator op):             # <<<<<<<<<<<<<<
 *         cop = CyKNCustomizedOp(ctypes.cast(<unsigned long long>(op.c_ptr), ctypes.c_void_p))
 *         bgraph = cop.get_bgraph()
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_49_get_bgraph_info, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph__get_bgraph_info, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[72])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_get_bgraph_info, __pyx_t_4) < 0) __PYX_ERR(0, 859, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":868
 *         }
 * 
 *     def _get_kn_operator_info(self, CyKNOperator op):             # <<<<<<<<<<<<<<
 *         if op.op_type == "kn_customized_op":
 *             return {
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_51_get_kn_operator_info, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph__get_kn_operator_info, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[73])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_get_kn_operator_info, __pyx_t_4) < 0) __PYX_ERR(0, 868, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":883
 *             }
 * 
 *     def get_graph_structure(self):             # <<<<<<<<<<<<<<
 *         operators = []
 *         ops = self.p_kgraph.operators
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_53get_graph_structure, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_get_graph_structure, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[74])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_get_graph_structure, __pyx_t_4) < 0) __PYX_ERR(0, 883, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":892
 *         return operators
 * 
 *     def get_num_inputs(self):             # <<<<<<<<<<<<<<
 *         return self.p_kgraph.get_num_input_dtensors()
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_55get_num_inputs, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_get_num_inputs, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[75])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_get_num_inputs, __pyx_t_4) < 0) __PYX_ERR(0, 892, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":895
 *         return self.p_kgraph.get_num_input_dtensors()
 * 
 *     def get_num_outputs(self):             # <<<<<<<<<<<<<<
 *         return self.p_kgraph.get_num_output_dtensors()
 * 
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_57get_num_outputs, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_get_num_outputs, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[76])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_get_num_outputs, __pyx_t_4) < 0) __PYX_ERR(0, 895, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":898
 *         return self.p_kgraph.get_num_output_dtensors()
 * 
 *     def get_input_dtensor_shape_and_stride(self, DTensor A):             # <<<<<<<<<<<<<<
 *         cdef int cstrides[128]
 *         cdef int cdims[128]
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_59get_input_dtensor_shape_and_stride, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_get_input_dtensor_shap, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[77])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_get_input_dtensor_shape_and_stri, __pyx_t_4) < 0) __PYX_ERR(0, 898, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":910
 * 
 *     # Functions for ersistent kernels
 *     def attach_torch_tensor(self, DTensor tensor, torch_tensor, str name):             # <<<<<<<<<<<<<<
 *         cdef unsigned long long torch_data_ptr = ctypes.cast(torch_tensor.data_ptr(), ctypes.c_void_p).value
 *         cdef char* cname = NULL
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_61attach_torch_tensor, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_attach_torch_tensor, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[78])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_attach_torch_tensor, __pyx_t_4) < 0) __PYX_ERR(0, 910, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":918
 *         self.p_kgraph.attach_torch_tensor(tensor.c_ptr, <void *>torch_data_ptr, cname)
 * 
 *     def attach_cuda_tensor(self, DTensor tensor, str name):             # <<<<<<<<<<<<<<
 *         cdef char* cname = NULL
 *         if name is not None:
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_63attach_cuda_tensor, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_attach_cuda_tensor, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[79])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_attach_cuda_tensor, __pyx_t_4) < 0) __PYX_ERR(0, 918, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":925
 *         self.p_kgraph.attach_cuda_tensor(tensor.c_ptr, cname)
 * 
 *     def attach_nvshmem_tensor(self, DTensor tensor, str name):             # <<<<<<<<<<<<<<
 *         cdef char* cname = NULL
 *         if name is not None:
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_65attach_nvshmem_tensor, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_attach_nvshmem_tensor, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[80])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_attach_nvshmem_tensor, __pyx_t_4) < 0) __PYX_ERR(0, 925, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":932
 *         self.p_kgraph.attach_nvshmem_tensor(tensor.c_ptr, cname)
 * 
 *     def fuse_tensors(self, list[DTensor] inputs, int fused_dim, int num_groups, str name):             # <<<<<<<<<<<<<<
 *         cdef vector[const CppDTensor*] cinputs
 *         cinputs.resize(len(inputs))
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_67fuse_tensors, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_fuse_tensors, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[81])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_fuse_tensors, __pyx_t_4) < 0) __PYX_ERR(0, 932, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":948
 *         return DTensor(output)
 * 
 *     def register_task(self, CyTBGraph bgraph, str task_type, list[int] params):             # <<<<<<<<<<<<<<
 *         cdef char* cname = NULL
 *         if task_type is not None:
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_69register_task, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_register_task, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[82])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_register_task, __pyx_t_4) < 0) __PYX_ERR(0, 948, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":961
 *         self.p_kgraph.register_task(cname, cparams)
 * 
 *     def generate_task_graph(self, int num_gpus, int my_gpu_id):             # <<<<<<<<<<<<<<
 *         cdef TaskGraphResult result = self.p_kgraph.generate_task_graph(num_gpus, my_gpu_id)
 *         return {
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_71generate_task_graph, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph_generate_task_graph, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[83])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyKNGraph, __pyx_mstate_global->__pyx_n_u_generate_task_graph, __pyx_t_4) < 0) __PYX_ERR(0, 961, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_73__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[84])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyKNGraph_75__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyKNGraph___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[85])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":997
 *                 assert False, "bgraph must be an integer or ctypes.c_void_p, but got " + str(type(bgraph))
 * 
 *     def new_input(self, DTensor dtensor, tuple input_map, int forloop_dim, bool store_in_dmem = False):             # <<<<<<<<<<<<<<
 *         assert len(input_map) == 3, "input_map must be of length 3"
 *         cdef int3 c_input_map
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_3new_input, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_new_input, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[86])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[0]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_new_input, __pyx_t_4) < 0) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1010
 *         return STensor(t)
 * 
 *     def new_output(self, STensor stensor, tuple output_map, int forloop_dim, str epilogue = None):             # <<<<<<<<<<<<<<
 *         assert len(output_map) == 3, "output_map must be of length 3"
 *         cdef int3 c_output_map
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_5new_output, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_new_output, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[87])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetDefaultsTuple(__pyx_t_4, __pyx_mstate_global->__pyx_tuple[1]);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_new_output, __pyx_t_4) < 0) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1019
 *         self.p_bgraph.new_output(stensor.c_ptr, c_output_map, forloop_dim, epilogue_type)
 * 
 *     def matmul(self, STensor A, STensor B):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.matmul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_7matmul, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_matmul, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[88])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1019, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_matmul, __pyx_t_4) < 0) __PYX_ERR(0, 1019, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1024
 *         return STensor(t)
 * 
 *     def exp(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.exp(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_9exp, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_exp, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[89])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1024, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_exp, __pyx_t_4) < 0) __PYX_ERR(0, 1024, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1029
 *         return STensor(t)
 * 
 *     def silu(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.silu(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_11silu, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_silu, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[90])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1029, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_silu, __pyx_t_4) < 0) __PYX_ERR(0, 1029, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1034
 *         return STensor(t)
 * 
 *     def gelu(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.gelu(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_13gelu, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_gelu, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[91])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_gelu, __pyx_t_4) < 0) __PYX_ERR(0, 1034, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1039
 *         return STensor(t)
 * 
 *     def relu(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.relu(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_15relu, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_relu, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[92])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_relu, __pyx_t_4) < 0) __PYX_ERR(0, 1039, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1044
 *         return STensor(t)
 * 
 *     def clamp(self, STensor A, float min_val, float max_val):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.clamp(A.c_ptr, min_val, max_val)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_17clamp, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_clamp, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[93])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_clamp, __pyx_t_4) < 0) __PYX_ERR(0, 1044, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1049
 *         return STensor(t)
 * 
 *     def square(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.square(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_19square, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_square, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[94])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_square, __pyx_t_4) < 0) __PYX_ERR(0, 1049, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1054
 *         return STensor(t)
 * 
 *     def sqrt(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.sqrt(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_21sqrt, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_sqrt, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[95])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_sqrt, __pyx_t_4) < 0) __PYX_ERR(0, 1054, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1059
 *         return STensor(t)
 * 
 *     def mul_scalar(self, STensor A, float scalar):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.mul_scalar(A.c_ptr, scalar)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_23mul_scalar, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_mul_scalar, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[96])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_mul_scalar, __pyx_t_4) < 0) __PYX_ERR(0, 1059, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1064
 *         return STensor(t)
 * 
 *     def add(self, STensor A, STensor B):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.add(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_25add, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_add, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[97])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_add, __pyx_t_4) < 0) __PYX_ERR(0, 1064, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1069
 *         return STensor(t)
 * 
 *     def mul(self, STensor A, STensor B):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.mul(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_27mul, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_mul, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[98])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_mul, __pyx_t_4) < 0) __PYX_ERR(0, 1069, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1074
 *         return STensor(t)
 * 
 *     def div(self, STensor A, STensor B):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.div(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_29div, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_div, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[99])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_div, __pyx_t_4) < 0) __PYX_ERR(0, 1074, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1079
 *         return STensor(t)
 * 
 *     def sub(self, STensor A, STensor B):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.sub(A.c_ptr, B.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_31sub, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_sub, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[100])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1079, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_sub, __pyx_t_4) < 0) __PYX_ERR(0, 1079, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1084
 *         return STensor(t)
 * 
 *     def reduction(self, STensor A, int dim):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.reduction(A.c_ptr, dim)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_33reduction, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_reduction, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[101])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_reduction, __pyx_t_4) < 0) __PYX_ERR(0, 1084, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1089
 *         return STensor(t)
 * 
 *     def reduction_max(self, STensor A, int dim):             # <<<<<<<<<<<<<<
 *         cdef vector[CppSTensor*] ptr = self.p_bgraph.reduction_max(A.c_ptr, dim)
 *         t0 = ctypes.cast(<unsigned long long>ptr[0], ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_35reduction_max, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_reduction_max, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[102])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1089, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_reduction_max, __pyx_t_4) < 0) __PYX_ERR(0, 1089, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1095
 *         return STensor(t0), STensor(t1)
 * 
 *     def rms_norm(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.rms_norm(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_37rms_norm, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_rms_norm, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[103])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1095, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_rms_norm, __pyx_t_4) < 0) __PYX_ERR(0, 1095, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1100
 *         return STensor(t)
 * 
 *     def concat(self, STensor A, STensor B, int dim):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.concat(A.c_ptr, B.c_ptr, dim)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_39concat, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_concat, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[104])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_concat, __pyx_t_4) < 0) __PYX_ERR(0, 1100, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1105
 *         return STensor(t)
 * 
 *     def forloop_accum(self, STensor A, str acc):             # <<<<<<<<<<<<<<
 *         optype = string_to_accum_optype(acc)
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum(A.c_ptr, optype)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_41forloop_accum, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_forloop_accum, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[105])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_forloop_accum, __pyx_t_4) < 0) __PYX_ERR(0, 1105, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1111
 *         return STensor(t)
 * 
 *     def forloop_accum_rescale(self, STensor A, STensor B, str acc):             # <<<<<<<<<<<<<<
 *         optype = string_to_accum_rescale_optype(acc)
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum_rescale(A.c_ptr, B.c_ptr, optype)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_43forloop_accum_rescale, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_forloop_accum_rescale, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[106])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_forloop_accum_rescale, __pyx_t_4) < 0) __PYX_ERR(0, 1111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1117
 *         return STensor(t)
 * 
 *     def forloop_accum_max(self, STensor A):             # <<<<<<<<<<<<<<
 *         cdef CppSTensor* ptr = self.p_bgraph.forloop_accum_max(A.c_ptr)
 *         t = ctypes.cast(<unsigned long long>ptr, ctypes.c_void_p)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_45forloop_accum_max, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph_forloop_accum_max, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[107])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (__Pyx_SetItemOnTypeDict(__pyx_mstate_global->__pyx_ptype_6yirage_4core_CyTBGraph, __pyx_mstate_global->__pyx_n_u_forloop_accum_max, __pyx_t_4) < 0) __PYX_ERR(0, 1117, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":1
 * def __reduce_cython__(self):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_47__reduce_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph___reduce_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[108])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_reduce_cython, __pyx_t_4) < 0) __PYX_ERR(1, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "(tree fragment)":3
 * def __reduce_cython__(self):
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
 * def __setstate_cython__(self, __pyx_state):             # <<<<<<<<<<<<<<
 *     raise TypeError, "no default __reduce__ due to non-trivial __cinit__"
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_9CyTBGraph_49__setstate_cython__, __Pyx_CYFUNCTION_CCLASS, __pyx_mstate_global->__pyx_n_u_CyTBGraph___setstate_cython, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[109])); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_setstate_cython, __pyx_t_4) < 0) __PYX_ERR(1, 3, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1144
 *             return operators
 * 
 * def search(CyKNGraph input_graph, *, int max_num_new_graphs = 1024, list imaps = None, list omaps = None, list griddims = None, list blockdims = None, list fmaps = None, list franges = None, str previous_checkpoint = None, bool verbose, str default_config = None, bool is_formal_verified):             # <<<<<<<<<<<<<<
 *     # set cimaps
 *     cdef vector[MInt3] cimaps
*/
  __pyx_t_4 = __Pyx_PyDict_NewPresized(9); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyLong_From_int(((int)0x400)); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_max_num_new_graphs, __pyx_t_2) < 0) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_imaps, Py_None) < 0) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_omaps, Py_None) < 0) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_griddims, Py_None) < 0) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_blockdims, Py_None) < 0) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_fmaps, Py_None) < 0) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_franges, Py_None) < 0) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_previous_checkpoint, Py_None) < 0) __PYX_ERR(0, 1144, __pyx_L1_error)
  if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_default_config, Py_None) < 0) __PYX_ERR(0, 1144, __pyx_L1_error)
  __pyx_t_2 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_19search, 0, __pyx_mstate_global->__pyx_n_u_search, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[110])); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_2, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_search, __pyx_t_2) < 0) __PYX_ERR(0, 1144, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "yirage/_cython/core.pyx":1224
 * # Generate CUDA program for a uGraph
 * # Return (CUDA code, buffer size in bytes)
 * def generate_cuda_program(CyKNGraph input_graph, *, int target_cc, list input_strides, int num_warp_groups = -1, int pipeline_stages = -1, bool profiling = False, bool enable_online_softmax = False) -> dict:             # <<<<<<<<<<<<<<
 *     # Set transpiler_config
 *     cdef TranspilerConfig transpiler_config
*/
  __pyx_t_2 = __Pyx_PyDict_NewPresized(4); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __Pyx_PyLong_From_int(((int)-1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_num_warp_groups, __pyx_t_4) < 0) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyLong_From_int(((int)-1)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_pipeline_stages, __pyx_t_4) < 0) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(((int)0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_profiling, __pyx_t_4) < 0) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyBool_FromLong(((int)0)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_2, __pyx_mstate_global->__pyx_n_u_enable_online_softmax, __pyx_t_4) < 0) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_return, __pyx_mstate_global->__pyx_n_u_dict) < 0) __PYX_ERR(0, 1224, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_21generate_cuda_program, 0, __pyx_mstate_global->__pyx_n_u_generate_cuda_program, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[111])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetDefaultsKwDict(__pyx_t_3, __pyx_t_2);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_generate_cuda_program, __pyx_t_3) < 0) __PYX_ERR(0, 1224, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":1272
 *     }
 * 
 * def generate_nki_program(CyKNGraph input_graph, *, int target_cc) -> dict:             # <<<<<<<<<<<<<<
 *     # Set transpiler_config
 *     cdef NKITranspilerConfig transpiler_config
*/
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_return, __pyx_mstate_global->__pyx_n_u_dict) < 0) __PYX_ERR(0, 1272, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_23generate_nki_program, 0, __pyx_mstate_global->__pyx_n_u_generate_nki_program, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[112])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_4, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_generate_nki_program, __pyx_t_4) < 0) __PYX_ERR(0, 1272, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1286
 *     }
 * 
 * def generate_triton_program(CyKNGraph input_graph, *, int target_cc) -> dict:             # <<<<<<<<<<<<<<
 *     cdef TritonTranspilerConfig transpiler_config
 *     transpiler_config.target_cc = target_cc
*/
  __pyx_t_4 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_t_4, __pyx_mstate_global->__pyx_n_u_return, __pyx_mstate_global->__pyx_n_u_dict) < 0) __PYX_ERR(0, 1286, __pyx_L1_error)
  __pyx_t_3 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_25generate_triton_program, 0, __pyx_mstate_global->__pyx_n_u_generate_triton_program, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[113])); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_3, __pyx_t_4);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_generate_triton_program, __pyx_t_3) < 0) __PYX_ERR(0, 1286, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "yirage/_cython/core.pyx":1297
 *     }
 * 
 * def set_gpu_device_id(gpu_id: int):             # <<<<<<<<<<<<<<
 *     cython_set_gpu_device_id(gpu_id)
 * 
*/
  __pyx_t_3 = __Pyx_PyDict_NewPresized(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (PyDict_SetItem(__pyx_t_3, __pyx_mstate_global->__pyx_n_u_gpu_id, __pyx_mstate_global->__pyx_n_u_int) < 0) __PYX_ERR(0, 1297, __pyx_L1_error)
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_27set_gpu_device_id, 0, __pyx_mstate_global->__pyx_n_u_set_gpu_device_id, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[114])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_CyFunction_SetAnnotationsDict(__pyx_t_4, __pyx_t_3);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_set_gpu_device_id, __pyx_t_4) < 0) __PYX_ERR(0, 1297, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1300
 *     cython_set_gpu_device_id(gpu_id)
 * 
 * def cy_to_json(CyKNGraph input_graph, str filename):             # <<<<<<<<<<<<<<
 *     cfilename = filename.encode('UTF-8')
 *     cython_to_json(input_graph.p_kgraph, cfilename)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_29cy_to_json, 0, __pyx_mstate_global->__pyx_n_u_cy_to_json, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[115])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_cy_to_json, __pyx_t_4) < 0) __PYX_ERR(0, 1300, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1304
 *     cython_to_json(input_graph.p_kgraph, cfilename)
 * 
 * def cy_from_json(str filename):             # <<<<<<<<<<<<<<
 *     cfilename = filename.encode('UTF-8')
 *     ptr = cython_from_json(cfilename)
*/
  __pyx_t_4 = __Pyx_CyFunction_New(&__pyx_mdef_6yirage_4core_31cy_from_json, 0, __pyx_mstate_global->__pyx_n_u_cy_from_json, NULL, __pyx_mstate_global->__pyx_n_u_yirage_core, __pyx_mstate_global->__pyx_d, ((PyObject *)__pyx_mstate_global->__pyx_codeobj_tab[116])); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_cy_from_json, __pyx_t_4) < 0) __PYX_ERR(0, 1304, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "yirage/_cython/core.pyx":1
 * # Copyright 2024 CMU             # <<<<<<<<<<<<<<
 * #
 * # Licensed under the Apache License, Version 2.0 (the "License");
*/
  __pyx_t_4 = __Pyx_PyDict_NewPresized(0); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_mstate_global->__pyx_d, __pyx_mstate_global->__pyx_n_u_test, __pyx_t_4) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_mstate->__pyx_d && stringtab_initialized) {
      __Pyx_AddTraceback("init yirage.core", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    #if !CYTHON_USE_MODULE_STATE
    Py_CLEAR(__pyx_m);
    #else
    Py_DECREF(__pyx_m);
    if (pystate_addmodule_run) {
      PyObject *tp, *value, *tb;
      PyErr_Fetch(&tp, &value, &tb);
      PyState_RemoveModule(&__pyx_moduledef);
      PyErr_Restore(tp, value, tb);
    }
    #endif
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init yirage.core");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if CYTHON_PEP489_MULTI_PHASE_INIT
  return (__pyx_m != NULL) ? 0 : -1;
  #else
  return __pyx_m;
  #endif
}
/* #### Code section: pystring_table ### */

typedef struct {
    const char *s;
#if 179 <= 65535
    const unsigned short n;
#elif 179 / 2 < INT_MAX
    const unsigned int n;
#elif 179 / 2 < LONG_MAX
    const unsigned long n;
#else
    const Py_ssize_t n;
#endif
#if 1 <= 31
    const unsigned int encoding : 5;
#elif 1 <= 255
    const unsigned char encoding;
#elif 1 <= 65535
    const unsigned short encoding;
#else
    const Py_ssize_t encoding;
#endif
    const unsigned int is_unicode : 1;
    const unsigned int intern : 1;
} __Pyx_StringTabEntry;
static const char * const __pyx_string_tab_encodings[] = { 0 };
static const __Pyx_StringTabEntry __pyx_string_tab[] = {
  {__pyx_k_A, sizeof(__pyx_k_A), 0, 1, 1}, /* PyObject cname: __pyx_n_u_A */
  {__pyx_k_AssertionError, sizeof(__pyx_k_AssertionError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_AssertionError */
  {__pyx_k_B, sizeof(__pyx_k_B), 0, 1, 1}, /* PyObject cname: __pyx_n_u_B */
  {__pyx_k_CyKNCustomizedOp, sizeof(__pyx_k_CyKNCustomizedOp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNCustomizedOp */
  {__pyx_k_CyKNCustomizedOp___reduce_cython, sizeof(__pyx_k_CyKNCustomizedOp___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNCustomizedOp___reduce_cython */
  {__pyx_k_CyKNCustomizedOp___setstate_cyth, sizeof(__pyx_k_CyKNCustomizedOp___setstate_cyth), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNCustomizedOp___setstate_cyth */
  {__pyx_k_CyKNCustomizedOp_get_bgraph, sizeof(__pyx_k_CyKNCustomizedOp_get_bgraph), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNCustomizedOp_get_bgraph */
  {__pyx_k_CyKNGraph, sizeof(__pyx_k_CyKNGraph), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph */
  {__pyx_k_CyKNGraph___reduce_cython, sizeof(__pyx_k_CyKNGraph___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph___reduce_cython */
  {__pyx_k_CyKNGraph___setstate_cython, sizeof(__pyx_k_CyKNGraph___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph___setstate_cython */
  {__pyx_k_CyKNGraph__get_bgraph_info, sizeof(__pyx_k_CyKNGraph__get_bgraph_info), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph__get_bgraph_info */
  {__pyx_k_CyKNGraph__get_kn_operator_info, sizeof(__pyx_k_CyKNGraph__get_kn_operator_info), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph__get_kn_operator_info */
  {__pyx_k_CyKNGraph__get_tb_operator_info, sizeof(__pyx_k_CyKNGraph__get_tb_operator_info), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph__get_tb_operator_info */
  {__pyx_k_CyKNGraph__kn_tensor_to_dict, sizeof(__pyx_k_CyKNGraph__kn_tensor_to_dict), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph__kn_tensor_to_dict */
  {__pyx_k_CyKNGraph__tb_tensor_to_dict, sizeof(__pyx_k_CyKNGraph__tb_tensor_to_dict), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph__tb_tensor_to_dict */
  {__pyx_k_CyKNGraph_add, sizeof(__pyx_k_CyKNGraph_add), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_add */
  {__pyx_k_CyKNGraph_attach_cuda_tensor, sizeof(__pyx_k_CyKNGraph_attach_cuda_tensor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_attach_cuda_tensor */
  {__pyx_k_CyKNGraph_attach_nvshmem_tensor, sizeof(__pyx_k_CyKNGraph_attach_nvshmem_tensor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_attach_nvshmem_tensor */
  {__pyx_k_CyKNGraph_attach_torch_tensor, sizeof(__pyx_k_CyKNGraph_attach_torch_tensor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_attach_torch_tensor */
  {__pyx_k_CyKNGraph_clamp, sizeof(__pyx_k_CyKNGraph_clamp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_clamp */
  {__pyx_k_CyKNGraph_customized, sizeof(__pyx_k_CyKNGraph_customized), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_customized */
  {__pyx_k_CyKNGraph_div, sizeof(__pyx_k_CyKNGraph_div), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_div */
  {__pyx_k_CyKNGraph_exp, sizeof(__pyx_k_CyKNGraph_exp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_exp */
  {__pyx_k_CyKNGraph_fuse_tensors, sizeof(__pyx_k_CyKNGraph_fuse_tensors), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_fuse_tensors */
  {__pyx_k_CyKNGraph_gelu, sizeof(__pyx_k_CyKNGraph_gelu), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_gelu */
  {__pyx_k_CyKNGraph_generate_task_graph, sizeof(__pyx_k_CyKNGraph_generate_task_graph), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_generate_task_graph */
  {__pyx_k_CyKNGraph_generate_triton_progra, sizeof(__pyx_k_CyKNGraph_generate_triton_progra), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_generate_triton_progra */
  {__pyx_k_CyKNGraph_get_graph_structure, sizeof(__pyx_k_CyKNGraph_get_graph_structure), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_get_graph_structure */
  {__pyx_k_CyKNGraph_get_input_dtensor_shap, sizeof(__pyx_k_CyKNGraph_get_input_dtensor_shap), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_get_input_dtensor_shap */
  {__pyx_k_CyKNGraph_get_input_dtensors, sizeof(__pyx_k_CyKNGraph_get_input_dtensors), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_get_input_dtensors */
  {__pyx_k_CyKNGraph_get_num_inputs, sizeof(__pyx_k_CyKNGraph_get_num_inputs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_get_num_inputs */
  {__pyx_k_CyKNGraph_get_num_outputs, sizeof(__pyx_k_CyKNGraph_get_num_outputs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_get_num_outputs */
  {__pyx_k_CyKNGraph_get_owner_independent, sizeof(__pyx_k_CyKNGraph_get_owner_independent), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_get_owner_independent */
  {__pyx_k_CyKNGraph_mark_output, sizeof(__pyx_k_CyKNGraph_mark_output), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_mark_output */
  {__pyx_k_CyKNGraph_matmul, sizeof(__pyx_k_CyKNGraph_matmul), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_matmul */
  {__pyx_k_CyKNGraph_mul, sizeof(__pyx_k_CyKNGraph_mul), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_mul */
  {__pyx_k_CyKNGraph_new_input, sizeof(__pyx_k_CyKNGraph_new_input), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_new_input */
  {__pyx_k_CyKNGraph_pow, sizeof(__pyx_k_CyKNGraph_pow), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_pow */
  {__pyx_k_CyKNGraph_reduction, sizeof(__pyx_k_CyKNGraph_reduction), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_reduction */
  {__pyx_k_CyKNGraph_register_task, sizeof(__pyx_k_CyKNGraph_register_task), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_register_task */
  {__pyx_k_CyKNGraph_relu, sizeof(__pyx_k_CyKNGraph_relu), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_relu */
  {__pyx_k_CyKNGraph_rms_norm, sizeof(__pyx_k_CyKNGraph_rms_norm), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_rms_norm */
  {__pyx_k_CyKNGraph_silu, sizeof(__pyx_k_CyKNGraph_silu), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_silu */
  {__pyx_k_CyKNGraph_sqrt, sizeof(__pyx_k_CyKNGraph_sqrt), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_sqrt */
  {__pyx_k_CyKNGraph_square, sizeof(__pyx_k_CyKNGraph_square), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNGraph_square */
  {__pyx_k_CyKNOperator, sizeof(__pyx_k_CyKNOperator), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNOperator */
  {__pyx_k_CyKNOperator___reduce_cython, sizeof(__pyx_k_CyKNOperator___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNOperator___reduce_cython */
  {__pyx_k_CyKNOperator___setstate_cython, sizeof(__pyx_k_CyKNOperator___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNOperator___setstate_cython */
  {__pyx_k_CyKNOperator_get_input_dtensors, sizeof(__pyx_k_CyKNOperator_get_input_dtensors), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNOperator_get_input_dtensors */
  {__pyx_k_CyKNOperator_get_output_dtensors, sizeof(__pyx_k_CyKNOperator_get_output_dtensors), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyKNOperator_get_output_dtensors */
  {__pyx_k_CyTBGraph, sizeof(__pyx_k_CyTBGraph), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph */
  {__pyx_k_CyTBGraph___reduce_cython, sizeof(__pyx_k_CyTBGraph___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph___reduce_cython */
  {__pyx_k_CyTBGraph___setstate_cython, sizeof(__pyx_k_CyTBGraph___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph___setstate_cython */
  {__pyx_k_CyTBGraph_add, sizeof(__pyx_k_CyTBGraph_add), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_add */
  {__pyx_k_CyTBGraph_clamp, sizeof(__pyx_k_CyTBGraph_clamp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_clamp */
  {__pyx_k_CyTBGraph_concat, sizeof(__pyx_k_CyTBGraph_concat), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_concat */
  {__pyx_k_CyTBGraph_div, sizeof(__pyx_k_CyTBGraph_div), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_div */
  {__pyx_k_CyTBGraph_exp, sizeof(__pyx_k_CyTBGraph_exp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_exp */
  {__pyx_k_CyTBGraph_forloop_accum, sizeof(__pyx_k_CyTBGraph_forloop_accum), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_forloop_accum */
  {__pyx_k_CyTBGraph_forloop_accum_max, sizeof(__pyx_k_CyTBGraph_forloop_accum_max), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_forloop_accum_max */
  {__pyx_k_CyTBGraph_forloop_accum_rescale, sizeof(__pyx_k_CyTBGraph_forloop_accum_rescale), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_forloop_accum_rescale */
  {__pyx_k_CyTBGraph_gelu, sizeof(__pyx_k_CyTBGraph_gelu), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_gelu */
  {__pyx_k_CyTBGraph_matmul, sizeof(__pyx_k_CyTBGraph_matmul), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_matmul */
  {__pyx_k_CyTBGraph_mul, sizeof(__pyx_k_CyTBGraph_mul), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_mul */
  {__pyx_k_CyTBGraph_mul_scalar, sizeof(__pyx_k_CyTBGraph_mul_scalar), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_mul_scalar */
  {__pyx_k_CyTBGraph_new_input, sizeof(__pyx_k_CyTBGraph_new_input), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_new_input */
  {__pyx_k_CyTBGraph_new_output, sizeof(__pyx_k_CyTBGraph_new_output), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_new_output */
  {__pyx_k_CyTBGraph_reduction, sizeof(__pyx_k_CyTBGraph_reduction), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_reduction */
  {__pyx_k_CyTBGraph_reduction_max, sizeof(__pyx_k_CyTBGraph_reduction_max), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_reduction_max */
  {__pyx_k_CyTBGraph_relu, sizeof(__pyx_k_CyTBGraph_relu), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_relu */
  {__pyx_k_CyTBGraph_rms_norm, sizeof(__pyx_k_CyTBGraph_rms_norm), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_rms_norm */
  {__pyx_k_CyTBGraph_silu, sizeof(__pyx_k_CyTBGraph_silu), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_silu */
  {__pyx_k_CyTBGraph_sqrt, sizeof(__pyx_k_CyTBGraph_sqrt), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_sqrt */
  {__pyx_k_CyTBGraph_square, sizeof(__pyx_k_CyTBGraph_square), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_square */
  {__pyx_k_CyTBGraph_sub, sizeof(__pyx_k_CyTBGraph_sub), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBGraph_sub */
  {__pyx_k_CyTBInputOp, sizeof(__pyx_k_CyTBInputOp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBInputOp */
  {__pyx_k_CyTBInputOp___reduce_cython, sizeof(__pyx_k_CyTBInputOp___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBInputOp___reduce_cython */
  {__pyx_k_CyTBInputOp___setstate_cython, sizeof(__pyx_k_CyTBInputOp___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBInputOp___setstate_cython */
  {__pyx_k_CyTBOperator, sizeof(__pyx_k_CyTBOperator), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBOperator */
  {__pyx_k_CyTBOperator___reduce_cython, sizeof(__pyx_k_CyTBOperator___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBOperator___reduce_cython */
  {__pyx_k_CyTBOperator___setstate_cython, sizeof(__pyx_k_CyTBOperator___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBOperator___setstate_cython */
  {__pyx_k_CyTBOperator_get_input_stensors, sizeof(__pyx_k_CyTBOperator_get_input_stensors), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBOperator_get_input_stensors */
  {__pyx_k_CyTBOperator_get_output_stensors, sizeof(__pyx_k_CyTBOperator_get_output_stensors), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBOperator_get_output_stensors */
  {__pyx_k_CyTBOutputOp, sizeof(__pyx_k_CyTBOutputOp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBOutputOp */
  {__pyx_k_CyTBOutputOp___reduce_cython, sizeof(__pyx_k_CyTBOutputOp___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBOutputOp___reduce_cython */
  {__pyx_k_CyTBOutputOp___setstate_cython, sizeof(__pyx_k_CyTBOutputOp___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_CyTBOutputOp___setstate_cython */
  {__pyx_k_DTensor, sizeof(__pyx_k_DTensor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_DTensor */
  {__pyx_k_DTensor___reduce_cython, sizeof(__pyx_k_DTensor___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_DTensor___reduce_cython */
  {__pyx_k_DTensor___setstate_cython, sizeof(__pyx_k_DTensor___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_DTensor___setstate_cython */
  {__pyx_k_DTensor_dim, sizeof(__pyx_k_DTensor_dim), 0, 1, 1}, /* PyObject cname: __pyx_n_u_DTensor_dim */
  {__pyx_k_Each_griddim_must_be_a_tuple_of, sizeof(__pyx_k_Each_griddim_must_be_a_tuple_of), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Each_griddim_must_be_a_tuple_of */
  {__pyx_k_Each_imap_must_be_a_tuple_of_3_i, sizeof(__pyx_k_Each_imap_must_be_a_tuple_of_3_i), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Each_imap_must_be_a_tuple_of_3_i */
  {__pyx_k_Each_omap_must_be_a_tuple_of_3_i, sizeof(__pyx_k_Each_omap_must_be_a_tuple_of_3_i), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Each_omap_must_be_a_tuple_of_3_i */
  {__pyx_k_Error_index_out_of_range, sizeof(__pyx_k_Error_index_out_of_range), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Error_index_out_of_range */
  {__pyx_k_Error_tensor_is_None_in_num_dims, sizeof(__pyx_k_Error_tensor_is_None_in_num_dims), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Error_tensor_is_None_in_num_dims */
  {__pyx_k_FP_TYPES, sizeof(__pyx_k_FP_TYPES), 0, 1, 1}, /* PyObject cname: __pyx_n_u_FP_TYPES */
  {__pyx_k_MemoryError, sizeof(__pyx_k_MemoryError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_MemoryError */
  {__pyx_k_Note_that_Cython_is_deliberately, sizeof(__pyx_k_Note_that_Cython_is_deliberately), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Note_that_Cython_is_deliberately */
  {__pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_RuntimeError */
  {__pyx_k_SINT_TYPES, sizeof(__pyx_k_SINT_TYPES), 0, 1, 1}, /* PyObject cname: __pyx_n_u_SINT_TYPES */
  {__pyx_k_STensor, sizeof(__pyx_k_STensor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_STensor */
  {__pyx_k_STensor___reduce_cython, sizeof(__pyx_k_STensor___reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_STensor___reduce_cython */
  {__pyx_k_STensor___setstate_cython, sizeof(__pyx_k_STensor___setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_STensor___setstate_cython */
  {__pyx_k_STensor_dim, sizeof(__pyx_k_STensor_dim), 0, 1, 1}, /* PyObject cname: __pyx_n_u_STensor_dim */
  {__pyx_k_TODO_support_blockdims, sizeof(__pyx_k_TODO_support_blockdims), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_TODO_support_blockdims */
  {__pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 1, 1}, /* PyObject cname: __pyx_n_u_TypeError */
  {__pyx_k_UINT_TYPES, sizeof(__pyx_k_UINT_TYPES), 0, 1, 1}, /* PyObject cname: __pyx_n_u_UINT_TYPES */
  {__pyx_k_Unsupported_accum_optype, sizeof(__pyx_k_Unsupported_accum_optype), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Unsupported_accum_optype */
  {__pyx_k_Unsupported_accum_rescale_optype, sizeof(__pyx_k_Unsupported_accum_rescale_optype), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Unsupported_accum_rescale_optype */
  {__pyx_k_Unsupported_dtype, sizeof(__pyx_k_Unsupported_dtype), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Unsupported_dtype */
  {__pyx_k_Unsupported_dtype_2, sizeof(__pyx_k_Unsupported_dtype_2), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Unsupported_dtype_2 */
  {__pyx_k_Unsupported_threadblock_epilogue, sizeof(__pyx_k_Unsupported_threadblock_epilogue), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_Unsupported_threadblock_epilogue */
  {__pyx_k__2, sizeof(__pyx_k__2), 0, 1, 0}, /* PyObject cname: __pyx_kp_u__2 */
  {__pyx_k_acc, sizeof(__pyx_k_acc), 0, 1, 1}, /* PyObject cname: __pyx_n_u_acc */
  {__pyx_k_add, sizeof(__pyx_k_add), 0, 1, 1}, /* PyObject cname: __pyx_n_u_add */
  {__pyx_k_add_note, sizeof(__pyx_k_add_note), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_add_note */
  {__pyx_k_alloc_size, sizeof(__pyx_k_alloc_size), 0, 1, 1}, /* PyObject cname: __pyx_n_u_alloc_size */
  {__pyx_k_allreduce, sizeof(__pyx_k_allreduce), 0, 1, 1}, /* PyObject cname: __pyx_n_u_allreduce */
  {__pyx_k_ans, sizeof(__pyx_k_ans), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ans */
  {__pyx_k_array, sizeof(__pyx_k_array), 0, 1, 1}, /* PyObject cname: __pyx_n_u_array */
  {__pyx_k_asyncio_coroutines, sizeof(__pyx_k_asyncio_coroutines), 0, 1, 1}, /* PyObject cname: __pyx_n_u_asyncio_coroutines */
  {__pyx_k_attach_cuda_tensor, sizeof(__pyx_k_attach_cuda_tensor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_attach_cuda_tensor */
  {__pyx_k_attach_nvshmem_tensor, sizeof(__pyx_k_attach_nvshmem_tensor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_attach_nvshmem_tensor */
  {__pyx_k_attach_torch_tensor, sizeof(__pyx_k_attach_torch_tensor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_attach_torch_tensor */
  {__pyx_k_bf16, sizeof(__pyx_k_bf16), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bf16 */
  {__pyx_k_bfloat16, sizeof(__pyx_k_bfloat16), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bfloat16 */
  {__pyx_k_bgraph, sizeof(__pyx_k_bgraph), 0, 1, 1}, /* PyObject cname: __pyx_n_u_bgraph */
  {__pyx_k_bgraph_must_be_an_integer_or_cty, sizeof(__pyx_k_bgraph_must_be_an_integer_or_cty), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_bgraph_must_be_an_integer_or_cty */
  {__pyx_k_block_dim, sizeof(__pyx_k_block_dim), 0, 1, 1}, /* PyObject cname: __pyx_n_u_block_dim */
  {__pyx_k_block_dim_must_include_3_dimensi, sizeof(__pyx_k_block_dim_must_include_3_dimensi), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_block_dim_must_include_3_dimensi */
  {__pyx_k_blockdims, sizeof(__pyx_k_blockdims), 0, 1, 1}, /* PyObject cname: __pyx_n_u_blockdims */
  {__pyx_k_buf_size, sizeof(__pyx_k_buf_size), 0, 1, 1}, /* PyObject cname: __pyx_n_u_buf_size */
  {__pyx_k_c_input_map, sizeof(__pyx_k_c_input_map), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_input_map */
  {__pyx_k_c_output_map, sizeof(__pyx_k_c_output_map), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_output_map */
  {__pyx_k_c_type, sizeof(__pyx_k_c_type), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_type */
  {__pyx_k_c_void_p, sizeof(__pyx_k_c_void_p), 0, 1, 1}, /* PyObject cname: __pyx_n_u_c_void_p */
  {__pyx_k_cast, sizeof(__pyx_k_cast), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cast */
  {__pyx_k_cblockdims, sizeof(__pyx_k_cblockdims), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cblockdims */
  {__pyx_k_cconfig, sizeof(__pyx_k_cconfig), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cconfig */
  {__pyx_k_cdims, sizeof(__pyx_k_cdims), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cdims */
  {__pyx_k_cfilename, sizeof(__pyx_k_cfilename), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cfilename */
  {__pyx_k_cfilepath, sizeof(__pyx_k_cfilepath), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cfilepath */
  {__pyx_k_cfmaps, sizeof(__pyx_k_cfmaps), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cfmaps */
  {__pyx_k_cfranges, sizeof(__pyx_k_cfranges), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cfranges */
  {__pyx_k_cgriddims, sizeof(__pyx_k_cgriddims), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cgriddims */
  {__pyx_k_cimaps, sizeof(__pyx_k_cimaps), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cimaps */
  {__pyx_k_cinput_strides, sizeof(__pyx_k_cinput_strides), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cinput_strides */
  {__pyx_k_cinputs, sizeof(__pyx_k_cinputs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cinputs */
  {__pyx_k_cis_formal_verifed, sizeof(__pyx_k_cis_formal_verifed), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cis_formal_verifed */
  {__pyx_k_clamp, sizeof(__pyx_k_clamp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_clamp */
  {__pyx_k_cline_in_traceback, sizeof(__pyx_k_cline_in_traceback), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cline_in_traceback */
  {__pyx_k_cname, sizeof(__pyx_k_cname), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cname */
  {__pyx_k_cnewgraphs, sizeof(__pyx_k_cnewgraphs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cnewgraphs */
  {__pyx_k_code, sizeof(__pyx_k_code), 0, 1, 1}, /* PyObject cname: __pyx_n_u_code */
  {__pyx_k_comaps, sizeof(__pyx_k_comaps), 0, 1, 1}, /* PyObject cname: __pyx_n_u_comaps */
  {__pyx_k_concat, sizeof(__pyx_k_concat), 0, 1, 1}, /* PyObject cname: __pyx_n_u_concat */
  {__pyx_k_convert_ctype_to_dtype, sizeof(__pyx_k_convert_ctype_to_dtype), 0, 1, 1}, /* PyObject cname: __pyx_n_u_convert_ctype_to_dtype */
  {__pyx_k_convert_dtype_to_ctype, sizeof(__pyx_k_convert_dtype_to_ctype), 0, 1, 1}, /* PyObject cname: __pyx_n_u_convert_dtype_to_ctype */
  {__pyx_k_convert_dtype_to_torch_type, sizeof(__pyx_k_convert_dtype_to_torch_type), 0, 1, 1}, /* PyObject cname: __pyx_n_u_convert_dtype_to_torch_type */
  {__pyx_k_convert_torch_type_to_dtype, sizeof(__pyx_k_convert_torch_type_to_dtype), 0, 1, 1}, /* PyObject cname: __pyx_n_u_convert_torch_type_to_dtype */
  {__pyx_k_cop, sizeof(__pyx_k_cop), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cop */
  {__pyx_k_coutputs, sizeof(__pyx_k_coutputs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_coutputs */
  {__pyx_k_cparams, sizeof(__pyx_k_cparams), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cparams */
  {__pyx_k_cprevious_checkpoint, sizeof(__pyx_k_cprevious_checkpoint), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cprevious_checkpoint */
  {__pyx_k_cshape, sizeof(__pyx_k_cshape), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cshape */
  {__pyx_k_cstrides, sizeof(__pyx_k_cstrides), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cstrides */
  {__pyx_k_ctypes, sizeof(__pyx_k_ctypes), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ctypes */
  {__pyx_k_cuda_code, sizeof(__pyx_k_cuda_code), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cuda_code */
  {__pyx_k_cur_output_shape, sizeof(__pyx_k_cur_output_shape), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cur_output_shape */
  {__pyx_k_cur_output_strides, sizeof(__pyx_k_cur_output_strides), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cur_output_strides */
  {__pyx_k_customized, sizeof(__pyx_k_customized), 0, 1, 1}, /* PyObject cname: __pyx_n_u_customized */
  {__pyx_k_cverbose, sizeof(__pyx_k_cverbose), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cverbose */
  {__pyx_k_cy_from_json, sizeof(__pyx_k_cy_from_json), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cy_from_json */
  {__pyx_k_cy_to_json, sizeof(__pyx_k_cy_to_json), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cy_to_json */
  {__pyx_k_cybgraph, sizeof(__pyx_k_cybgraph), 0, 1, 1}, /* PyObject cname: __pyx_n_u_cybgraph */
  {__pyx_k_data_ptr, sizeof(__pyx_k_data_ptr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_data_ptr */
  {__pyx_k_default_config, sizeof(__pyx_k_default_config), 0, 1, 1}, /* PyObject cname: __pyx_n_u_default_config */
  {__pyx_k_dict, sizeof(__pyx_k_dict), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dict */
  {__pyx_k_dim, sizeof(__pyx_k_dim), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dim */
  {__pyx_k_dims, sizeof(__pyx_k_dims), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dims */
  {__pyx_k_dimx, sizeof(__pyx_k_dimx), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dimx */
  {__pyx_k_disable, sizeof(__pyx_k_disable), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_disable */
  {__pyx_k_disable_fingerprint, sizeof(__pyx_k_disable_fingerprint), 0, 1, 1}, /* PyObject cname: __pyx_n_u_disable_fingerprint */
  {__pyx_k_div, sizeof(__pyx_k_div), 0, 1, 1}, /* PyObject cname: __pyx_n_u_div */
  {__pyx_k_doc, sizeof(__pyx_k_doc), 0, 1, 1}, /* PyObject cname: __pyx_n_u_doc */
  {__pyx_k_dtensor, sizeof(__pyx_k_dtensor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtensor */
  {__pyx_k_dtensor_cptr, sizeof(__pyx_k_dtensor_cptr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtensor_cptr */
  {__pyx_k_dtensor_guid, sizeof(__pyx_k_dtensor_guid), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtensor_guid */
  {__pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype */
  {__pyx_k_dtype___eq, sizeof(__pyx_k_dtype___eq), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype___eq */
  {__pyx_k_dtype___hash, sizeof(__pyx_k_dtype___hash), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype___hash */
  {__pyx_k_dtype___init, sizeof(__pyx_k_dtype___init), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype___init */
  {__pyx_k_dtype___ne, sizeof(__pyx_k_dtype___ne), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype___ne */
  {__pyx_k_dtype___str, sizeof(__pyx_k_dtype___str), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype___str */
  {__pyx_k_dtype_is_bf16, sizeof(__pyx_k_dtype_is_bf16), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype_is_bf16 */
  {__pyx_k_dtype_is_dtype, sizeof(__pyx_k_dtype_is_dtype), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype_is_dtype */
  {__pyx_k_dtype_is_fp16, sizeof(__pyx_k_dtype_is_fp16), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype_is_fp16 */
  {__pyx_k_dtype_is_fp32, sizeof(__pyx_k_dtype_is_fp32), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype_is_fp32 */
  {__pyx_k_dtype_is_fp64, sizeof(__pyx_k_dtype_is_fp64), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype_is_fp64 */
  {__pyx_k_dtype_is_int1, sizeof(__pyx_k_dtype_is_int1), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype_is_int1 */
  {__pyx_k_dtype_is_int16, sizeof(__pyx_k_dtype_is_int16), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype_is_int16 */
  {__pyx_k_dtype_is_int32, sizeof(__pyx_k_dtype_is_int32), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype_is_int32 */
  {__pyx_k_dtype_is_int64, sizeof(__pyx_k_dtype_is_int64), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype_is_int64 */
  {__pyx_k_dtype_is_int8, sizeof(__pyx_k_dtype_is_int8), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype_is_int8 */
  {__pyx_k_dtype_is_uint16, sizeof(__pyx_k_dtype_is_uint16), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype_is_uint16 */
  {__pyx_k_dtype_is_uint32, sizeof(__pyx_k_dtype_is_uint32), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype_is_uint32 */
  {__pyx_k_dtype_is_uint64, sizeof(__pyx_k_dtype_is_uint64), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype_is_uint64 */
  {__pyx_k_dtype_is_uint8, sizeof(__pyx_k_dtype_is_uint8), 0, 1, 1}, /* PyObject cname: __pyx_n_u_dtype_is_uint8 */
  {__pyx_k_enable, sizeof(__pyx_k_enable), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_enable */
  {__pyx_k_enable_online_softmax, sizeof(__pyx_k_enable_online_softmax), 0, 1, 1}, /* PyObject cname: __pyx_n_u_enable_online_softmax */
  {__pyx_k_epilogue, sizeof(__pyx_k_epilogue), 0, 1, 1}, /* PyObject cname: __pyx_n_u_epilogue */
  {__pyx_k_epilogue_type, sizeof(__pyx_k_epilogue_type), 0, 1, 1}, /* PyObject cname: __pyx_n_u_epilogue_type */
  {__pyx_k_eq, sizeof(__pyx_k_eq), 0, 1, 1}, /* PyObject cname: __pyx_n_u_eq */
  {__pyx_k_error, sizeof(__pyx_k_error), 0, 1, 1}, /* PyObject cname: __pyx_n_u_error */
  {__pyx_k_error_list, sizeof(__pyx_k_error_list), 0, 1, 1}, /* PyObject cname: __pyx_n_u_error_list */
  {__pyx_k_errors, sizeof(__pyx_k_errors), 0, 1, 1}, /* PyObject cname: __pyx_n_u_errors */
  {__pyx_k_exp, sizeof(__pyx_k_exp), 0, 1, 1}, /* PyObject cname: __pyx_n_u_exp */
  {__pyx_k_filename, sizeof(__pyx_k_filename), 0, 1, 1}, /* PyObject cname: __pyx_n_u_filename */
  {__pyx_k_filepath, sizeof(__pyx_k_filepath), 0, 1, 1}, /* PyObject cname: __pyx_n_u_filepath */
  {__pyx_k_filepath_cannot_be_empty, sizeof(__pyx_k_filepath_cannot_be_empty), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_filepath_cannot_be_empty */
  {__pyx_k_float16, sizeof(__pyx_k_float16), 0, 1, 1}, /* PyObject cname: __pyx_n_u_float16 */
  {__pyx_k_float32, sizeof(__pyx_k_float32), 0, 1, 1}, /* PyObject cname: __pyx_n_u_float32 */
  {__pyx_k_float64, sizeof(__pyx_k_float64), 0, 1, 1}, /* PyObject cname: __pyx_n_u_float64 */
  {__pyx_k_fmaps, sizeof(__pyx_k_fmaps), 0, 1, 1}, /* PyObject cname: __pyx_n_u_fmaps */
  {__pyx_k_forloop_accum, sizeof(__pyx_k_forloop_accum), 0, 1, 1}, /* PyObject cname: __pyx_n_u_forloop_accum */
  {__pyx_k_forloop_accum_max, sizeof(__pyx_k_forloop_accum_max), 0, 1, 1}, /* PyObject cname: __pyx_n_u_forloop_accum_max */
  {__pyx_k_forloop_accum_rescale, sizeof(__pyx_k_forloop_accum_rescale), 0, 1, 1}, /* PyObject cname: __pyx_n_u_forloop_accum_rescale */
  {__pyx_k_forloop_dim, sizeof(__pyx_k_forloop_dim), 0, 1, 1}, /* PyObject cname: __pyx_n_u_forloop_dim */
  {__pyx_k_forloop_range, sizeof(__pyx_k_forloop_range), 0, 1, 1}, /* PyObject cname: __pyx_n_u_forloop_range */
  {__pyx_k_format, sizeof(__pyx_k_format), 0, 1, 1}, /* PyObject cname: __pyx_n_u_format */
  {__pyx_k_fp16, sizeof(__pyx_k_fp16), 0, 1, 1}, /* PyObject cname: __pyx_n_u_fp16 */
  {__pyx_k_fp32, sizeof(__pyx_k_fp32), 0, 1, 1}, /* PyObject cname: __pyx_n_u_fp32 */
  {__pyx_k_fp64, sizeof(__pyx_k_fp64), 0, 1, 1}, /* PyObject cname: __pyx_n_u_fp64 */
  {__pyx_k_franges, sizeof(__pyx_k_franges), 0, 1, 1}, /* PyObject cname: __pyx_n_u_franges */
  {__pyx_k_func, sizeof(__pyx_k_func), 0, 1, 1}, /* PyObject cname: __pyx_n_u_func */
  {__pyx_k_fuse_tensors, sizeof(__pyx_k_fuse_tensors), 0, 1, 1}, /* PyObject cname: __pyx_n_u_fuse_tensors */
  {__pyx_k_fused_dim, sizeof(__pyx_k_fused_dim), 0, 1, 1}, /* PyObject cname: __pyx_n_u_fused_dim */
  {__pyx_k_gc, sizeof(__pyx_k_gc), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_gc */
  {__pyx_k_gelu, sizeof(__pyx_k_gelu), 0, 1, 1}, /* PyObject cname: __pyx_n_u_gelu */
  {__pyx_k_generate_cuda_program, sizeof(__pyx_k_generate_cuda_program), 0, 1, 1}, /* PyObject cname: __pyx_n_u_generate_cuda_program */
  {__pyx_k_generate_nki_program, sizeof(__pyx_k_generate_nki_program), 0, 1, 1}, /* PyObject cname: __pyx_n_u_generate_nki_program */
  {__pyx_k_generate_task_graph, sizeof(__pyx_k_generate_task_graph), 0, 1, 1}, /* PyObject cname: __pyx_n_u_generate_task_graph */
  {__pyx_k_generate_triton_program, sizeof(__pyx_k_generate_triton_program), 0, 1, 1}, /* PyObject cname: __pyx_n_u_generate_triton_program */
  {__pyx_k_get_bgraph, sizeof(__pyx_k_get_bgraph), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_bgraph */
  {__pyx_k_get_bgraph_info, sizeof(__pyx_k_get_bgraph_info), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_bgraph_info */
  {__pyx_k_get_graph_structure, sizeof(__pyx_k_get_graph_structure), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_graph_structure */
  {__pyx_k_get_input_dtensor_shape_and_stri, sizeof(__pyx_k_get_input_dtensor_shape_and_stri), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_input_dtensor_shape_and_stri */
  {__pyx_k_get_input_dtensors, sizeof(__pyx_k_get_input_dtensors), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_input_dtensors */
  {__pyx_k_get_input_stensors, sizeof(__pyx_k_get_input_stensors), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_input_stensors */
  {__pyx_k_get_kn_operator_info, sizeof(__pyx_k_get_kn_operator_info), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_kn_operator_info */
  {__pyx_k_get_kn_operator_type_string, sizeof(__pyx_k_get_kn_operator_type_string), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_kn_operator_type_string */
  {__pyx_k_get_num_inputs, sizeof(__pyx_k_get_num_inputs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_num_inputs */
  {__pyx_k_get_num_outputs, sizeof(__pyx_k_get_num_outputs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_num_outputs */
  {__pyx_k_get_output_dtensors, sizeof(__pyx_k_get_output_dtensors), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_output_dtensors */
  {__pyx_k_get_output_stensors, sizeof(__pyx_k_get_output_stensors), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_output_stensors */
  {__pyx_k_get_owner_independent_hash, sizeof(__pyx_k_get_owner_independent_hash), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_owner_independent_hash */
  {__pyx_k_get_tb_operator_info, sizeof(__pyx_k_get_tb_operator_info), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_tb_operator_info */
  {__pyx_k_get_tb_operator_type_string, sizeof(__pyx_k_get_tb_operator_type_string), 0, 1, 1}, /* PyObject cname: __pyx_n_u_get_tb_operator_type_string */
  {__pyx_k_getstate, sizeof(__pyx_k_getstate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_getstate */
  {__pyx_k_gpu_id, sizeof(__pyx_k_gpu_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_gpu_id */
  {__pyx_k_graph, sizeof(__pyx_k_graph), 0, 1, 1}, /* PyObject cname: __pyx_n_u_graph */
  {__pyx_k_grid_dim, sizeof(__pyx_k_grid_dim), 0, 1, 1}, /* PyObject cname: __pyx_n_u_grid_dim */
  {__pyx_k_grid_dim_block_dim_forloop_range, sizeof(__pyx_k_grid_dim_block_dim_forloop_range), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_grid_dim_block_dim_forloop_range */
  {__pyx_k_grid_dim_must_include_3_dimensio, sizeof(__pyx_k_grid_dim_must_include_3_dimensio), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_grid_dim_must_include_3_dimensio */
  {__pyx_k_griddims, sizeof(__pyx_k_griddims), 0, 1, 1}, /* PyObject cname: __pyx_n_u_griddims */
  {__pyx_k_guid, sizeof(__pyx_k_guid), 0, 1, 1}, /* PyObject cname: __pyx_n_u_guid */
  {__pyx_k_hash, sizeof(__pyx_k_hash), 0, 1, 1}, /* PyObject cname: __pyx_n_u_hash */
  {__pyx_k_i, sizeof(__pyx_k_i), 0, 1, 1}, /* PyObject cname: __pyx_n_u_i */
  {__pyx_k_idx, sizeof(__pyx_k_idx), 0, 1, 1}, /* PyObject cname: __pyx_n_u_idx */
  {__pyx_k_imaps, sizeof(__pyx_k_imaps), 0, 1, 1}, /* PyObject cname: __pyx_n_u_imaps */
  {__pyx_k_init, sizeof(__pyx_k_init), 0, 1, 1}, /* PyObject cname: __pyx_n_u_init */
  {__pyx_k_initializing, sizeof(__pyx_k_initializing), 0, 1, 1}, /* PyObject cname: __pyx_n_u_initializing */
  {__pyx_k_input, sizeof(__pyx_k_input), 0, 1, 1}, /* PyObject cname: __pyx_n_u_input */
  {__pyx_k_input_graph, sizeof(__pyx_k_input_graph), 0, 1, 1}, /* PyObject cname: __pyx_n_u_input_graph */
  {__pyx_k_input_map, sizeof(__pyx_k_input_map), 0, 1, 1}, /* PyObject cname: __pyx_n_u_input_map */
  {__pyx_k_input_map_must_be_of_length_3, sizeof(__pyx_k_input_map_must_be_of_length_3), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_input_map_must_be_of_length_3 */
  {__pyx_k_input_op, sizeof(__pyx_k_input_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_input_op */
  {__pyx_k_input_strides, sizeof(__pyx_k_input_strides), 0, 1, 1}, /* PyObject cname: __pyx_n_u_input_strides */
  {__pyx_k_input_tensors, sizeof(__pyx_k_input_tensors), 0, 1, 1}, /* PyObject cname: __pyx_n_u_input_tensors */
  {__pyx_k_inputs, sizeof(__pyx_k_inputs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_inputs */
  {__pyx_k_int, sizeof(__pyx_k_int), 0, 1, 1}, /* PyObject cname: __pyx_n_u_int */
  {__pyx_k_int1, sizeof(__pyx_k_int1), 0, 1, 1}, /* PyObject cname: __pyx_n_u_int1 */
  {__pyx_k_int16, sizeof(__pyx_k_int16), 0, 1, 1}, /* PyObject cname: __pyx_n_u_int16 */
  {__pyx_k_int32, sizeof(__pyx_k_int32), 0, 1, 1}, /* PyObject cname: __pyx_n_u_int32 */
  {__pyx_k_int64, sizeof(__pyx_k_int64), 0, 1, 1}, /* PyObject cname: __pyx_n_u_int64 */
  {__pyx_k_int8, sizeof(__pyx_k_int8), 0, 1, 1}, /* PyObject cname: __pyx_n_u_int8 */
  {__pyx_k_is_bf16, sizeof(__pyx_k_is_bf16), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_bf16 */
  {__pyx_k_is_coroutine, sizeof(__pyx_k_is_coroutine), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_coroutine */
  {__pyx_k_is_dtype, sizeof(__pyx_k_is_dtype), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_dtype */
  {__pyx_k_is_formal_verified, sizeof(__pyx_k_is_formal_verified), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_formal_verified */
  {__pyx_k_is_fp16, sizeof(__pyx_k_is_fp16), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_fp16 */
  {__pyx_k_is_fp32, sizeof(__pyx_k_is_fp32), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_fp32 */
  {__pyx_k_is_fp64, sizeof(__pyx_k_is_fp64), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_fp64 */
  {__pyx_k_is_int1, sizeof(__pyx_k_is_int1), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_int1 */
  {__pyx_k_is_int16, sizeof(__pyx_k_is_int16), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_int16 */
  {__pyx_k_is_int32, sizeof(__pyx_k_is_int32), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_int32 */
  {__pyx_k_is_int64, sizeof(__pyx_k_is_int64), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_int64 */
  {__pyx_k_is_int8, sizeof(__pyx_k_is_int8), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_int8 */
  {__pyx_k_is_uint16, sizeof(__pyx_k_is_uint16), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_uint16 */
  {__pyx_k_is_uint32, sizeof(__pyx_k_is_uint32), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_uint32 */
  {__pyx_k_is_uint64, sizeof(__pyx_k_is_uint64), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_uint64 */
  {__pyx_k_is_uint8, sizeof(__pyx_k_is_uint8), 0, 1, 1}, /* PyObject cname: __pyx_n_u_is_uint8 */
  {__pyx_k_isenabled, sizeof(__pyx_k_isenabled), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_isenabled */
  {__pyx_k_j, sizeof(__pyx_k_j), 0, 1, 1}, /* PyObject cname: __pyx_n_u_j */
  {__pyx_k_json_file, sizeof(__pyx_k_json_file), 0, 1, 1}, /* PyObject cname: __pyx_n_u_json_file */
  {__pyx_k_kn_add_op, sizeof(__pyx_k_kn_add_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_add_op */
  {__pyx_k_kn_allreduce_op, sizeof(__pyx_k_kn_allreduce_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_allreduce_op */
  {__pyx_k_kn_chunk_0_op, sizeof(__pyx_k_kn_chunk_0_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_chunk_0_op */
  {__pyx_k_kn_chunk_1_op, sizeof(__pyx_k_kn_chunk_1_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_chunk_1_op */
  {__pyx_k_kn_chunk_2_op, sizeof(__pyx_k_kn_chunk_2_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_chunk_2_op */
  {__pyx_k_kn_clamp_op, sizeof(__pyx_k_kn_clamp_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_clamp_op */
  {__pyx_k_kn_concat_0_op, sizeof(__pyx_k_kn_concat_0_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_concat_0_op */
  {__pyx_k_kn_concat_1_op, sizeof(__pyx_k_kn_concat_1_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_concat_1_op */
  {__pyx_k_kn_concat_2_op, sizeof(__pyx_k_kn_concat_2_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_concat_2_op */
  {__pyx_k_kn_concat_first_op_id, sizeof(__pyx_k_kn_concat_first_op_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_concat_first_op_id */
  {__pyx_k_kn_concat_last_op_id, sizeof(__pyx_k_kn_concat_last_op_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_concat_last_op_id */
  {__pyx_k_kn_customized_op, sizeof(__pyx_k_kn_customized_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_customized_op */
  {__pyx_k_kn_div_op, sizeof(__pyx_k_kn_div_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_div_op */
  {__pyx_k_kn_exp_op, sizeof(__pyx_k_kn_exp_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_exp_op */
  {__pyx_k_kn_gelu_op, sizeof(__pyx_k_kn_gelu_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_gelu_op */
  {__pyx_k_kn_input_op, sizeof(__pyx_k_kn_input_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_input_op */
  {__pyx_k_kn_log_op, sizeof(__pyx_k_kn_log_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_log_op */
  {__pyx_k_kn_matmul_op, sizeof(__pyx_k_kn_matmul_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_matmul_op */
  {__pyx_k_kn_mul_op, sizeof(__pyx_k_kn_mul_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_mul_op */
  {__pyx_k_kn_mul_scalar_op, sizeof(__pyx_k_kn_mul_scalar_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_mul_scalar_op */
  {__pyx_k_kn_output_op, sizeof(__pyx_k_kn_output_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_output_op */
  {__pyx_k_kn_pow_op, sizeof(__pyx_k_kn_pow_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_pow_op */
  {__pyx_k_kn_reduction_0_op, sizeof(__pyx_k_kn_reduction_0_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_reduction_0_op */
  {__pyx_k_kn_reduction_1_op, sizeof(__pyx_k_kn_reduction_1_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_reduction_1_op */
  {__pyx_k_kn_reduction_2_op, sizeof(__pyx_k_kn_reduction_2_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_reduction_2_op */
  {__pyx_k_kn_relu_op, sizeof(__pyx_k_kn_relu_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_relu_op */
  {__pyx_k_kn_rms_norm_op, sizeof(__pyx_k_kn_rms_norm_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_rms_norm_op */
  {__pyx_k_kn_sigmoid_op, sizeof(__pyx_k_kn_sigmoid_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_sigmoid_op */
  {__pyx_k_kn_silu_op, sizeof(__pyx_k_kn_silu_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_silu_op */
  {__pyx_k_kn_split_0_op, sizeof(__pyx_k_kn_split_0_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_split_0_op */
  {__pyx_k_kn_split_1_op, sizeof(__pyx_k_kn_split_1_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_split_1_op */
  {__pyx_k_kn_split_2_op, sizeof(__pyx_k_kn_split_2_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_split_2_op */
  {__pyx_k_kn_split_first_op_id, sizeof(__pyx_k_kn_split_first_op_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_split_first_op_id */
  {__pyx_k_kn_split_last_op_id, sizeof(__pyx_k_kn_split_last_op_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_split_last_op_id */
  {__pyx_k_kn_sqrt_op, sizeof(__pyx_k_kn_sqrt_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_sqrt_op */
  {__pyx_k_kn_square_op, sizeof(__pyx_k_kn_square_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_square_op */
  {__pyx_k_kn_tensor_to_dict, sizeof(__pyx_k_kn_tensor_to_dict), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_tensor_to_dict */
  {__pyx_k_kn_unknown, sizeof(__pyx_k_kn_unknown), 0, 1, 1}, /* PyObject cname: __pyx_n_u_kn_unknown */
  {__pyx_k_main, sizeof(__pyx_k_main), 0, 1, 1}, /* PyObject cname: __pyx_n_u_main */
  {__pyx_k_mark_output, sizeof(__pyx_k_mark_output), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mark_output */
  {__pyx_k_matmul, sizeof(__pyx_k_matmul), 0, 1, 1}, /* PyObject cname: __pyx_n_u_matmul */
  {__pyx_k_max_num_new_graphs, sizeof(__pyx_k_max_num_new_graphs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_max_num_new_graphs */
  {__pyx_k_max_smem_size, sizeof(__pyx_k_max_smem_size), 0, 1, 1}, /* PyObject cname: __pyx_n_u_max_smem_size */
  {__pyx_k_max_val, sizeof(__pyx_k_max_val), 0, 1, 1}, /* PyObject cname: __pyx_n_u_max_val */
  {__pyx_k_mean, sizeof(__pyx_k_mean), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mean */
  {__pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 1, 1}, /* PyObject cname: __pyx_n_u_metaclass */
  {__pyx_k_min_val, sizeof(__pyx_k_min_val), 0, 1, 1}, /* PyObject cname: __pyx_n_u_min_val */
  {__pyx_k_module, sizeof(__pyx_k_module), 0, 1, 1}, /* PyObject cname: __pyx_n_u_module */
  {__pyx_k_mul, sizeof(__pyx_k_mul), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mul */
  {__pyx_k_mul_scalar, sizeof(__pyx_k_mul_scalar), 0, 1, 1}, /* PyObject cname: __pyx_n_u_mul_scalar */
  {__pyx_k_my_gpu_id, sizeof(__pyx_k_my_gpu_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_my_gpu_id */
  {__pyx_k_name, sizeof(__pyx_k_name), 0, 1, 1}, /* PyObject cname: __pyx_n_u_name */
  {__pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 1, 1}, /* PyObject cname: __pyx_n_u_name_2 */
  {__pyx_k_ne, sizeof(__pyx_k_ne), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ne */
  {__pyx_k_new_graphs, sizeof(__pyx_k_new_graphs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_new_graphs */
  {__pyx_k_new_input, sizeof(__pyx_k_new_input), 0, 1, 1}, /* PyObject cname: __pyx_n_u_new_input */
  {__pyx_k_new_output, sizeof(__pyx_k_new_output), 0, 1, 1}, /* PyObject cname: __pyx_n_u_new_output */
  {__pyx_k_no_default___reduce___due_to_non, sizeof(__pyx_k_no_default___reduce___due_to_non), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_no_default___reduce___due_to_non */
  {__pyx_k_normalized_shape, sizeof(__pyx_k_normalized_shape), 0, 1, 1}, /* PyObject cname: __pyx_n_u_normalized_shape */
  {__pyx_k_np, sizeof(__pyx_k_np), 0, 1, 1}, /* PyObject cname: __pyx_n_u_np */
  {__pyx_k_num, sizeof(__pyx_k_num), 0, 1, 1}, /* PyObject cname: __pyx_n_u_num */
  {__pyx_k_num_dims, sizeof(__pyx_k_num_dims), 0, 1, 1}, /* PyObject cname: __pyx_n_u_num_dims */
  {__pyx_k_num_gpus, sizeof(__pyx_k_num_gpus), 0, 1, 1}, /* PyObject cname: __pyx_n_u_num_gpus */
  {__pyx_k_num_groups, sizeof(__pyx_k_num_groups), 0, 1, 1}, /* PyObject cname: __pyx_n_u_num_groups */
  {__pyx_k_num_outputs, sizeof(__pyx_k_num_outputs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_num_outputs */
  {__pyx_k_num_warp_groups, sizeof(__pyx_k_num_warp_groups), 0, 1, 1}, /* PyObject cname: __pyx_n_u_num_warp_groups */
  {__pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 1, 1}, /* PyObject cname: __pyx_n_u_numpy */
  {__pyx_k_omaps, sizeof(__pyx_k_omaps), 0, 1, 1}, /* PyObject cname: __pyx_n_u_omaps */
  {__pyx_k_op, sizeof(__pyx_k_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_op */
  {__pyx_k_op_type, sizeof(__pyx_k_op_type), 0, 1, 1}, /* PyObject cname: __pyx_n_u_op_type */
  {__pyx_k_operators, sizeof(__pyx_k_operators), 0, 1, 1}, /* PyObject cname: __pyx_n_u_operators */
  {__pyx_k_ops, sizeof(__pyx_k_ops), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ops */
  {__pyx_k_optype, sizeof(__pyx_k_optype), 0, 1, 1}, /* PyObject cname: __pyx_n_u_optype */
  {__pyx_k_other, sizeof(__pyx_k_other), 0, 1, 1}, /* PyObject cname: __pyx_n_u_other */
  {__pyx_k_output, sizeof(__pyx_k_output), 0, 1, 1}, /* PyObject cname: __pyx_n_u_output */
  {__pyx_k_output_directives, sizeof(__pyx_k_output_directives), 0, 1, 1}, /* PyObject cname: __pyx_n_u_output_directives */
  {__pyx_k_output_map, sizeof(__pyx_k_output_map), 0, 1, 1}, /* PyObject cname: __pyx_n_u_output_map */
  {__pyx_k_output_map_must_be_of_length_3, sizeof(__pyx_k_output_map_must_be_of_length_3), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_output_map_must_be_of_length_3 */
  {__pyx_k_output_op, sizeof(__pyx_k_output_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_output_op */
  {__pyx_k_output_shapes, sizeof(__pyx_k_output_shapes), 0, 1, 1}, /* PyObject cname: __pyx_n_u_output_shapes */
  {__pyx_k_output_tensors, sizeof(__pyx_k_output_tensors), 0, 1, 1}, /* PyObject cname: __pyx_n_u_output_tensors */
  {__pyx_k_outputs, sizeof(__pyx_k_outputs), 0, 1, 1}, /* PyObject cname: __pyx_n_u_outputs */
  {__pyx_k_params, sizeof(__pyx_k_params), 0, 1, 1}, /* PyObject cname: __pyx_n_u_params */
  {__pyx_k_pipeline_stages, sizeof(__pyx_k_pipeline_stages), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pipeline_stages */
  {__pyx_k_pop, sizeof(__pyx_k_pop), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pop */
  {__pyx_k_pow, sizeof(__pyx_k_pow), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pow */
  {__pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 1, 1}, /* PyObject cname: __pyx_n_u_prepare */
  {__pyx_k_previous_checkpoint, sizeof(__pyx_k_previous_checkpoint), 0, 1, 1}, /* PyObject cname: __pyx_n_u_previous_checkpoint */
  {__pyx_k_print, sizeof(__pyx_k_print), 0, 1, 1}, /* PyObject cname: __pyx_n_u_print */
  {__pyx_k_profiler_buf_size, sizeof(__pyx_k_profiler_buf_size), 0, 1, 1}, /* PyObject cname: __pyx_n_u_profiler_buf_size */
  {__pyx_k_profiling, sizeof(__pyx_k_profiling), 0, 1, 1}, /* PyObject cname: __pyx_n_u_profiling */
  {__pyx_k_ptr, sizeof(__pyx_k_ptr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_ptr */
  {__pyx_k_py_byte_string, sizeof(__pyx_k_py_byte_string), 0, 1, 1}, /* PyObject cname: __pyx_n_u_py_byte_string */
  {__pyx_k_pyx_state, sizeof(__pyx_k_pyx_state), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pyx_state */
  {__pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 1, 1}, /* PyObject cname: __pyx_n_u_pyx_vtable */
  {__pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 1, 1}, /* PyObject cname: __pyx_n_u_qualname */
  {__pyx_k_range, sizeof(__pyx_k_range), 0, 1, 1}, /* PyObject cname: __pyx_n_u_range */
  {__pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduce */
  {__pyx_k_reduce_cython, sizeof(__pyx_k_reduce_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduce_cython */
  {__pyx_k_reduce_ex, sizeof(__pyx_k_reduce_ex), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduce_ex */
  {__pyx_k_reduction, sizeof(__pyx_k_reduction), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduction */
  {__pyx_k_reduction_max, sizeof(__pyx_k_reduction_max), 0, 1, 1}, /* PyObject cname: __pyx_n_u_reduction_max */
  {__pyx_k_register_task, sizeof(__pyx_k_register_task), 0, 1, 1}, /* PyObject cname: __pyx_n_u_register_task */
  {__pyx_k_relu, sizeof(__pyx_k_relu), 0, 1, 1}, /* PyObject cname: __pyx_n_u_relu */
  {__pyx_k_result, sizeof(__pyx_k_result), 0, 1, 1}, /* PyObject cname: __pyx_n_u_result */
  {__pyx_k_return, sizeof(__pyx_k_return), 0, 1, 1}, /* PyObject cname: __pyx_n_u_return */
  {__pyx_k_rms, sizeof(__pyx_k_rms), 0, 1, 1}, /* PyObject cname: __pyx_n_u_rms */
  {__pyx_k_rms_norm, sizeof(__pyx_k_rms_norm), 0, 1, 1}, /* PyObject cname: __pyx_n_u_rms_norm */
  {__pyx_k_scalar, sizeof(__pyx_k_scalar), 0, 1, 1}, /* PyObject cname: __pyx_n_u_scalar */
  {__pyx_k_search, sizeof(__pyx_k_search), 0, 1, 1}, /* PyObject cname: __pyx_n_u_search */
  {__pyx_k_self, sizeof(__pyx_k_self), 0, 1, 1}, /* PyObject cname: __pyx_n_u_self */
  {__pyx_k_set_gpu_device_id, sizeof(__pyx_k_set_gpu_device_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_set_gpu_device_id */
  {__pyx_k_set_name, sizeof(__pyx_k_set_name), 0, 1, 1}, /* PyObject cname: __pyx_n_u_set_name */
  {__pyx_k_setstate, sizeof(__pyx_k_setstate), 0, 1, 1}, /* PyObject cname: __pyx_n_u_setstate */
  {__pyx_k_setstate_cython, sizeof(__pyx_k_setstate_cython), 0, 1, 1}, /* PyObject cname: __pyx_n_u_setstate_cython */
  {__pyx_k_shape, sizeof(__pyx_k_shape), 0, 1, 1}, /* PyObject cname: __pyx_n_u_shape */
  {__pyx_k_silu, sizeof(__pyx_k_silu), 0, 1, 1}, /* PyObject cname: __pyx_n_u_silu */
  {__pyx_k_spec, sizeof(__pyx_k_spec), 0, 1, 1}, /* PyObject cname: __pyx_n_u_spec */
  {__pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sqrt */
  {__pyx_k_square, sizeof(__pyx_k_square), 0, 1, 1}, /* PyObject cname: __pyx_n_u_square */
  {__pyx_k_stensor, sizeof(__pyx_k_stensor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_stensor */
  {__pyx_k_store_in_dmem, sizeof(__pyx_k_store_in_dmem), 0, 1, 1}, /* PyObject cname: __pyx_n_u_store_in_dmem */
  {__pyx_k_str, sizeof(__pyx_k_str), 0, 1, 1}, /* PyObject cname: __pyx_n_u_str */
  {__pyx_k_strides, sizeof(__pyx_k_strides), 0, 1, 1}, /* PyObject cname: __pyx_n_u_strides */
  {__pyx_k_string_to_accum_optype, sizeof(__pyx_k_string_to_accum_optype), 0, 1, 1}, /* PyObject cname: __pyx_n_u_string_to_accum_optype */
  {__pyx_k_string_to_accum_rescale_optype, sizeof(__pyx_k_string_to_accum_rescale_optype), 0, 1, 1}, /* PyObject cname: __pyx_n_u_string_to_accum_rescale_optype */
  {__pyx_k_string_to_tbepilogue, sizeof(__pyx_k_string_to_tbepilogue), 0, 1, 1}, /* PyObject cname: __pyx_n_u_string_to_tbepilogue */
  {__pyx_k_stringsource, sizeof(__pyx_k_stringsource), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_stringsource */
  {__pyx_k_sub, sizeof(__pyx_k_sub), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sub */
  {__pyx_k_sum, sizeof(__pyx_k_sum), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sum */
  {__pyx_k_sum_todimx, sizeof(__pyx_k_sum_todimx), 0, 1, 1}, /* PyObject cname: __pyx_n_u_sum_todimx */
  {__pyx_k_t, sizeof(__pyx_k_t), 0, 1, 1}, /* PyObject cname: __pyx_n_u_t */
  {__pyx_k_t0, sizeof(__pyx_k_t0), 0, 1, 1}, /* PyObject cname: __pyx_n_u_t0 */
  {__pyx_k_t1, sizeof(__pyx_k_t1), 0, 1, 1}, /* PyObject cname: __pyx_n_u_t1 */
  {__pyx_k_target_cc, sizeof(__pyx_k_target_cc), 0, 1, 1}, /* PyObject cname: __pyx_n_u_target_cc */
  {__pyx_k_task_type, sizeof(__pyx_k_task_type), 0, 1, 1}, /* PyObject cname: __pyx_n_u_task_type */
  {__pyx_k_tb_add_op, sizeof(__pyx_k_tb_add_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_add_op */
  {__pyx_k_tb_clamp_op, sizeof(__pyx_k_tb_clamp_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_clamp_op */
  {__pyx_k_tb_concat_0_op, sizeof(__pyx_k_tb_concat_0_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_concat_0_op */
  {__pyx_k_tb_concat_1_op, sizeof(__pyx_k_tb_concat_1_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_concat_1_op */
  {__pyx_k_tb_concat_2_op, sizeof(__pyx_k_tb_concat_2_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_concat_2_op */
  {__pyx_k_tb_concat_first_op_id, sizeof(__pyx_k_tb_concat_first_op_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_concat_first_op_id */
  {__pyx_k_tb_concat_last_op_id, sizeof(__pyx_k_tb_concat_last_op_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_concat_last_op_id */
  {__pyx_k_tb_concat_then_matmul_op, sizeof(__pyx_k_tb_concat_then_matmul_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_concat_then_matmul_op */
  {__pyx_k_tb_customized_op, sizeof(__pyx_k_tb_customized_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_customized_op */
  {__pyx_k_tb_div_op, sizeof(__pyx_k_tb_div_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_div_op */
  {__pyx_k_tb_exp_op, sizeof(__pyx_k_tb_exp_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_exp_op */
  {__pyx_k_tb_forloop_accum_last_op, sizeof(__pyx_k_tb_forloop_accum_last_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_forloop_accum_last_op */
  {__pyx_k_tb_forloop_accum_max_op, sizeof(__pyx_k_tb_forloop_accum_max_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_forloop_accum_max_op */
  {__pyx_k_tb_forloop_accum_no_red_op, sizeof(__pyx_k_tb_forloop_accum_no_red_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_forloop_accum_no_red_op */
  {__pyx_k_tb_forloop_accum_no_red_rescale, sizeof(__pyx_k_tb_forloop_accum_no_red_rescale), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_forloop_accum_no_red_rescale */
  {__pyx_k_tb_forloop_accum_red_ld_mean_op, sizeof(__pyx_k_tb_forloop_accum_red_ld_mean_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_forloop_accum_red_ld_mean_op */
  {__pyx_k_tb_forloop_accum_red_ld_rms_op, sizeof(__pyx_k_tb_forloop_accum_red_ld_rms_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_forloop_accum_red_ld_rms_op */
  {__pyx_k_tb_forloop_accum_red_ld_sum_op, sizeof(__pyx_k_tb_forloop_accum_red_ld_sum_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_forloop_accum_red_ld_sum_op */
  {__pyx_k_tb_forloop_accum_red_ld_sum_resc, sizeof(__pyx_k_tb_forloop_accum_red_ld_sum_resc), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_forloop_accum_red_ld_sum_resc */
  {__pyx_k_tb_forloop_accum_redtox_ld_sum_o, sizeof(__pyx_k_tb_forloop_accum_redtox_ld_sum_o), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_forloop_accum_redtox_ld_sum_o */
  {__pyx_k_tb_gelu_op, sizeof(__pyx_k_tb_gelu_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_gelu_op */
  {__pyx_k_tb_input_op, sizeof(__pyx_k_tb_input_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_input_op */
  {__pyx_k_tb_log_op, sizeof(__pyx_k_tb_log_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_log_op */
  {__pyx_k_tb_matmul_op, sizeof(__pyx_k_tb_matmul_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_matmul_op */
  {__pyx_k_tb_mul_op, sizeof(__pyx_k_tb_mul_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_mul_op */
  {__pyx_k_tb_mul_scalar_op, sizeof(__pyx_k_tb_mul_scalar_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_mul_scalar_op */
  {__pyx_k_tb_output_op, sizeof(__pyx_k_tb_output_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_output_op */
  {__pyx_k_tb_pow_op, sizeof(__pyx_k_tb_pow_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_pow_op */
  {__pyx_k_tb_reduction_0_max_op, sizeof(__pyx_k_tb_reduction_0_max_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_reduction_0_max_op */
  {__pyx_k_tb_reduction_0_op, sizeof(__pyx_k_tb_reduction_0_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_reduction_0_op */
  {__pyx_k_tb_reduction_0_to_dimx_op, sizeof(__pyx_k_tb_reduction_0_to_dimx_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_reduction_0_to_dimx_op */
  {__pyx_k_tb_reduction_1_max_op, sizeof(__pyx_k_tb_reduction_1_max_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_reduction_1_max_op */
  {__pyx_k_tb_reduction_1_op, sizeof(__pyx_k_tb_reduction_1_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_reduction_1_op */
  {__pyx_k_tb_reduction_1_to_dimx_op, sizeof(__pyx_k_tb_reduction_1_to_dimx_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_reduction_1_to_dimx_op */
  {__pyx_k_tb_reduction_2_max_op, sizeof(__pyx_k_tb_reduction_2_max_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_reduction_2_max_op */
  {__pyx_k_tb_reduction_2_op, sizeof(__pyx_k_tb_reduction_2_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_reduction_2_op */
  {__pyx_k_tb_reduction_2_to_dimx_op, sizeof(__pyx_k_tb_reduction_2_to_dimx_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_reduction_2_to_dimx_op */
  {__pyx_k_tb_reduction_first_op_id, sizeof(__pyx_k_tb_reduction_first_op_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_reduction_first_op_id */
  {__pyx_k_tb_reduction_last_op_id, sizeof(__pyx_k_tb_reduction_last_op_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_reduction_last_op_id */
  {__pyx_k_tb_relu_op, sizeof(__pyx_k_tb_relu_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_relu_op */
  {__pyx_k_tb_rms_norm_op, sizeof(__pyx_k_tb_rms_norm_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_rms_norm_op */
  {__pyx_k_tb_sigmoid_op, sizeof(__pyx_k_tb_sigmoid_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_sigmoid_op */
  {__pyx_k_tb_silu_op, sizeof(__pyx_k_tb_silu_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_silu_op */
  {__pyx_k_tb_split_0_op, sizeof(__pyx_k_tb_split_0_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_split_0_op */
  {__pyx_k_tb_split_1_op, sizeof(__pyx_k_tb_split_1_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_split_1_op */
  {__pyx_k_tb_split_2_op, sizeof(__pyx_k_tb_split_2_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_split_2_op */
  {__pyx_k_tb_split_first_op_id, sizeof(__pyx_k_tb_split_first_op_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_split_first_op_id */
  {__pyx_k_tb_split_last_op_id, sizeof(__pyx_k_tb_split_last_op_id), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_split_last_op_id */
  {__pyx_k_tb_sqrt_op, sizeof(__pyx_k_tb_sqrt_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_sqrt_op */
  {__pyx_k_tb_square_op, sizeof(__pyx_k_tb_square_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_square_op */
  {__pyx_k_tb_sub_op, sizeof(__pyx_k_tb_sub_op), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_sub_op */
  {__pyx_k_tb_tensor_to_dict, sizeof(__pyx_k_tb_tensor_to_dict), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_tensor_to_dict */
  {__pyx_k_tb_unknown, sizeof(__pyx_k_tb_unknown), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tb_unknown */
  {__pyx_k_tensor, sizeof(__pyx_k_tensor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_tensor */
  {__pyx_k_test, sizeof(__pyx_k_test), 0, 1, 1}, /* PyObject cname: __pyx_n_u_test */
  {__pyx_k_torch, sizeof(__pyx_k_torch), 0, 1, 1}, /* PyObject cname: __pyx_n_u_torch */
  {__pyx_k_torch_data_ptr, sizeof(__pyx_k_torch_data_ptr), 0, 1, 1}, /* PyObject cname: __pyx_n_u_torch_data_ptr */
  {__pyx_k_torch_tensor, sizeof(__pyx_k_torch_tensor), 0, 1, 1}, /* PyObject cname: __pyx_n_u_torch_tensor */
  {__pyx_k_transpiler_config, sizeof(__pyx_k_transpiler_config), 0, 1, 1}, /* PyObject cname: __pyx_n_u_transpiler_config */
  {__pyx_k_type, sizeof(__pyx_k_type), 0, 1, 1}, /* PyObject cname: __pyx_n_u_type */
  {__pyx_k_type_str, sizeof(__pyx_k_type_str), 0, 1, 1}, /* PyObject cname: __pyx_n_u_type_str */
  {__pyx_k_uint16, sizeof(__pyx_k_uint16), 0, 1, 1}, /* PyObject cname: __pyx_n_u_uint16 */
  {__pyx_k_uint32, sizeof(__pyx_k_uint32), 0, 1, 1}, /* PyObject cname: __pyx_n_u_uint32 */
  {__pyx_k_uint64, sizeof(__pyx_k_uint64), 0, 1, 1}, /* PyObject cname: __pyx_n_u_uint64 */
  {__pyx_k_uint8, sizeof(__pyx_k_uint8), 0, 1, 1}, /* PyObject cname: __pyx_n_u_uint8 */
  {__pyx_k_unknown_op_type, sizeof(__pyx_k_unknown_op_type), 0, 1, 1}, /* PyObject cname: __pyx_n_u_unknown_op_type */
  {__pyx_k_value, sizeof(__pyx_k_value), 0, 1, 1}, /* PyObject cname: __pyx_n_u_value */
  {__pyx_k_verbose, sizeof(__pyx_k_verbose), 0, 1, 1}, /* PyObject cname: __pyx_n_u_verbose */
  {__pyx_k_x, sizeof(__pyx_k_x), 0, 1, 1}, /* PyObject cname: __pyx_n_u_x */
  {__pyx_k_y, sizeof(__pyx_k_y), 0, 1, 1}, /* PyObject cname: __pyx_n_u_y */
  {__pyx_k_yirage__cython_core_pyx, sizeof(__pyx_k_yirage__cython_core_pyx), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_yirage__cython_core_pyx */
  {__pyx_k_yirage_core, sizeof(__pyx_k_yirage_core), 0, 1, 1}, /* PyObject cname: __pyx_n_u_yirage_core */
  {__pyx_k_yirage_core, sizeof(__pyx_k_yirage_core), 0, 1, 0}, /* PyObject cname: __pyx_kp_u_yirage_core */
  {__pyx_k_z, sizeof(__pyx_k_z), 0, 1, 1}, /* PyObject cname: __pyx_n_u_z */
  {0, 0, 0, 0, 0}
};
/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry const *t, PyObject **target, const char* const* encoding_names);

/* #### Code section: cached_builtins ### */

static int __Pyx_InitCachedBuiltins(__pyx_mstatetype *__pyx_mstate) {
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __pyx_builtin_AssertionError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_AssertionError); if (!__pyx_builtin_AssertionError) __PYX_ERR(0, 33, __pyx_L1_error)
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 309, __pyx_L1_error)
  __pyx_builtin_print = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_print); if (!__pyx_builtin_print) __PYX_ERR(0, 428, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(1, 2, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_range); if (!__pyx_builtin_range) __PYX_ERR(0, 515, __pyx_L1_error)
  __pyx_builtin_MemoryError = __Pyx_GetBuiltinName(__pyx_mstate->__pyx_n_u_MemoryError); if (!__pyx_builtin_MemoryError) __PYX_ERR(1, 79, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cached_constants ### */

static int __Pyx_InitCachedConstants(__pyx_mstatetype *__pyx_mstate) {
  __Pyx_RefNannyDeclarations
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "yirage/_cython/core.pyx":997
 *                 assert False, "bgraph must be an integer or ctypes.c_void_p, but got " + str(type(bgraph))
 * 
 *     def new_input(self, DTensor dtensor, tuple input_map, int forloop_dim, bool store_in_dmem = False):             # <<<<<<<<<<<<<<
 *         assert len(input_map) == 3, "input_map must be of length 3"
 *         cdef int3 c_input_map
*/
  __pyx_mstate_global->__pyx_tuple[0] = PyTuple_Pack(1, Py_False); if (unlikely(!__pyx_mstate_global->__pyx_tuple[0])) __PYX_ERR(0, 997, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[0]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[0]);

  /* "yirage/_cython/core.pyx":1010
 *         return STensor(t)
 * 
 *     def new_output(self, STensor stensor, tuple output_map, int forloop_dim, str epilogue = None):             # <<<<<<<<<<<<<<
 *         assert len(output_map) == 3, "output_map must be of length 3"
 *         cdef int3 c_output_map
*/
  __pyx_mstate_global->__pyx_tuple[1] = PyTuple_Pack(1, Py_None); if (unlikely(!__pyx_mstate_global->__pyx_tuple[1])) __PYX_ERR(0, 1010, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_mstate_global->__pyx_tuple[1]);
  __Pyx_GIVEREF(__pyx_mstate_global->__pyx_tuple[1]);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}
/* #### Code section: init_constants ### */

static int __Pyx_InitConstants(__pyx_mstatetype *__pyx_mstate) {
  CYTHON_UNUSED_VAR(__pyx_mstate);
  __pyx_mstate->__pyx_umethod_PyDict_Type_pop.type = (PyObject*)&PyDict_Type;
  __pyx_mstate->__pyx_umethod_PyDict_Type_pop.method_name = &__pyx_mstate->__pyx_n_u_pop;
  if (__Pyx_InitStrings(__pyx_string_tab, __pyx_mstate->__pyx_string_tab, __pyx_string_tab_encodings) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: init_codeobjects ### */
\
        typedef struct {
            unsigned int argcount : 3;
            unsigned int num_posonly_args : 1;
            unsigned int num_kwonly_args : 4;
            unsigned int nlocals : 5;
            unsigned int flags : 10;
            unsigned int first_line : 11;
            unsigned int line_table_length : 14;
        } __Pyx_PyCode_New_function_description;
/* NewCodeObj.proto */
static PyObject* __Pyx_PyCode_New(
        const __Pyx_PyCode_New_function_description descr,
        PyObject * const *varnames,
        PyObject *filename,
        PyObject *funcname,
        const char *line_table,
        PyObject *tuple_dedup_map
);


static int __Pyx_CreateCodeObjects(__pyx_mstatetype *__pyx_mstate) {
  PyObject* tuple_dedup_map = PyDict_New();
  if (unlikely(!tuple_dedup_map)) return -1;
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 31, 34};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_name};
    __pyx_mstate_global->__pyx_codeobj_tab[0] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_init, __pyx_k_A_HA_uCuL_2U_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[0])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 35, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[1] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_is_fp16, __pyx_k_A_t6_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[1])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 38, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[2] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_is_bf16, __pyx_k_A_t6_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[2])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 41, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[3] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_is_fp32, __pyx_k_A_t6_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[3])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 44, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[4] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_is_fp64, __pyx_k_A_t6_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[4])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 47, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[5] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_is_int1, __pyx_k_A_t6_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[5])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 50, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[6] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_is_int8, __pyx_k_A_t6_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[6])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 53, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[7] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_is_int16, __pyx_k_A_t6_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[7])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 56, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[8] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_is_int32, __pyx_k_A_t6_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[8])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 59, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[9] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_is_int64, __pyx_k_A_t6_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[9])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 62, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[10] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_is_uint8, __pyx_k_A_t6_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[10])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 65, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[11] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_is_uint16, __pyx_k_A_t6_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[11])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 68, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[12] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_is_uint32, __pyx_k_A_t6_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[12])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 71, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[13] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_is_uint64, __pyx_k_A_t6_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[13])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 74, 36};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_other};
    __pyx_mstate_global->__pyx_codeobj_tab[14] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_eq, __pyx_k_A_4z_1_t6_E, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[14])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 79, 18};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_other};
    __pyx_mstate_global->__pyx_codeobj_tab[15] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_ne, __pyx_k_A_t4waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[15])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 82, 13};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[16] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_hash, __pyx_k_A_t2T, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[16])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 85, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[17] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_str, __pyx_k_A_t1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[17])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 88, 25};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_type_str};
    __pyx_mstate_global->__pyx_codeobj_tab[18] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_is_dtype, __pyx_k_A_y_5_Be_r_a, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[18])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 105, 462};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_op_type};
    __pyx_mstate_global->__pyx_codeobj_tab[19] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_get_kn_operator_type_string, __pyx_k_xs_q_A_q_A_q_A_q_A_q_A_q_A_q_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[19])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 184, 642};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_op_type};
    __pyx_mstate_global->__pyx_codeobj_tab[20] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_get_tb_operator_type_string, __pyx_k_xs_q_A_q_A_q_A_q_A_q_A_q_A_q_A_2, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[20])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 293, 105};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_type};
    __pyx_mstate_global->__pyx_codeobj_tab[21] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_convert_dtype_to_ctype, __pyx_k_t81_q_Zq_q_XQ_q_XQ_q_XQ_q_Ya_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[21])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 311, 119};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_type};
    __pyx_mstate_global->__pyx_codeobj_tab[22] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_convert_dtype_to_torch_type, __pyx_k_q_t81_uA_Zq_uA_XQ_uA_XQ_uA_XQ_u, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[22])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 329, 81};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_type};
    __pyx_mstate_global->__pyx_codeobj_tab[23] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_convert_ctype_to_dtype, __pyx_k_uCq_q_c_q_c_q_c_q_c_q_c_q_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[23])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 345, 116};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_type};
    __pyx_mstate_global->__pyx_codeobj_tab[24] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_convert_torch_type_to_dtype, __pyx_k_uCuA_q_c_a_q_c_a_q_c_a_q_c_a_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[24])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 364, 40};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_epilogue};
    __pyx_mstate_global->__pyx_codeobj_tab[25] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_string_to_tbepilogue, __pyx_k_y_1_q_Q_q_wa_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[25])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 373, 76};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_acc};
    __pyx_mstate_global->__pyx_codeobj_tab[26] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_string_to_accum_optype, __pyx_k_t3a_q_S_q_S_q_S_q_S_q_wa_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[26])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 388, 40};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_acc};
    __pyx_mstate_global->__pyx_codeobj_tab[27] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_string_to_accum_rescale_optype, __pyx_k_Cq_c_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[27])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 443, 40};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_idx};
    __pyx_mstate_global->__pyx_codeobj_tab[28] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_dim, __pyx_k_A_D_fA_4vT_81_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[28])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[29] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[29])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[30] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[30])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 493, 40};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_idx};
    __pyx_mstate_global->__pyx_codeobj_tab[31] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_dim, __pyx_k_A_D_fA_4vT_81_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[31])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[32] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[32])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[33] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[33])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 511, 72};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_cinputs, __pyx_mstate->__pyx_n_u_num, __pyx_mstate->__pyx_n_u_inputs, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_ptr};
    __pyx_mstate_global->__pyx_codeobj_tab[34] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_get_input_dtensors, __pyx_k_A_d_1A_Q_E_aq_Q_2_fA_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[34])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 520, 72};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_coutputs, __pyx_mstate->__pyx_n_u_num, __pyx_mstate->__pyx_n_u_outputs, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_ptr};
    __pyx_mstate_global->__pyx_codeobj_tab[35] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_get_output_dtensors, __pyx_k_A_d_AQ_a_E_aq_Q_2_4vQ_7_7_1_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[35])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[36] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[36])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[37] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[37])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 550, 50};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_bgraph, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_cybgraph};
    __pyx_mstate_global->__pyx_codeobj_tab[38] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_get_bgraph, __pyx_k_A_fE_hfA_9AYa_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[38])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[39] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[39])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[40] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[40])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 569, 72};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_cinputs, __pyx_mstate->__pyx_n_u_num, __pyx_mstate->__pyx_n_u_inputs, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_ptr};
    __pyx_mstate_global->__pyx_codeobj_tab[41] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_get_input_stensors, __pyx_k_A_d_1A_Q_E_aq_Q_2_fA_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[41])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 578, 72};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_coutputs, __pyx_mstate->__pyx_n_u_num, __pyx_mstate->__pyx_n_u_outputs, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_ptr};
    __pyx_mstate_global->__pyx_codeobj_tab[42] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_get_output_stensors, __pyx_k_A_d_AQ_a_E_aq_Q_2_4vQ_7_7_1_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[42])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[43] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[43])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[44] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[44])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[45] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[45])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[46] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[46])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[47] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[47])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[48] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[48])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 10, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 684, 148};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_dims, __pyx_mstate->__pyx_n_u_strides, __pyx_mstate->__pyx_n_u_dtype, __pyx_mstate->__pyx_n_u_cdims, __pyx_mstate->__pyx_n_u_cstrides, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_c_type, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[49] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_new_input, __pyx_k_81_WAS_E_as_1_t1A_q_1A_E_as_1_A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[49])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 699, 76};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_strides, __pyx_mstate->__pyx_n_u_cstrides, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[50] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_mark_output, __pyx_k_A_83a_G1A_G1Cq_U_3aq_gQa_I_81, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[50])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 709, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_B, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[51] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_matmul, __pyx_k_A_t9G1AXQa_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[51])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 714, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_input, __pyx_mstate->__pyx_n_u_dim, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[52] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_reduction, __pyx_k_A_t9JauHE_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[52])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 719, 88};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_input, __pyx_mstate->__pyx_n_u_normalized_shape, __pyx_mstate->__pyx_n_u_cshape, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[53] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_rms_norm, __pyx_k_A_gQc_E_as_1_5_t9IQe81_F_q_E_q_w, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[53])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 728, 44};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_input, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[54] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_exp, __pyx_k_A_t9D_a_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[54])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 733, 44};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_input, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[55] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_silu, __pyx_k_A_t9E_q_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[55])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 738, 44};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_input, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[56] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_gelu, __pyx_k_A_t9E_q_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[56])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 743, 44};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_input, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[57] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_relu, __pyx_k_A_t9E_q_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[57])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 748, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_input, __pyx_mstate->__pyx_n_u_min_val, __pyx_mstate->__pyx_n_u_max_val, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[58] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_clamp, __pyx_k_A_t9F_5_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[58])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 753, 44};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_input, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[59] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_sqrt, __pyx_k_A_t9E_q_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[59])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 758, 44};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_input, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[60] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_square, __pyx_k_A_t9G1E_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[60])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 763, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_B, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[61] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_add, __pyx_k_A_t9D_1_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[61])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 768, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_B, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[62] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_mul, __pyx_k_A_t9D_1_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[62])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 773, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_B, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[63] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_div, __pyx_k_A_t9D_1_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[63])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 778, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_B, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[64] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_pow, __pyx_k_A_t9D_1_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[64])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 10, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 783, 164};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_inputs, __pyx_mstate->__pyx_n_u_bgraph, __pyx_mstate->__pyx_n_u_cinputs, __pyx_mstate->__pyx_n_u_t, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_coutputs, __pyx_mstate->__pyx_n_u_num_outputs, __pyx_mstate->__pyx_n_u_outputs, __pyx_mstate->__pyx_n_u_ptr};
    __pyx_mstate_global->__pyx_codeobj_tab[65] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_customized, __pyx_k_A_was_1_E_as_1_vQc_A_q_Q_AV1D_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[65])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 802, 46};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_filepath, __pyx_mstate->__pyx_n_u_py_byte_string, __pyx_mstate->__pyx_n_u_cfilepath};
    __pyx_mstate_global->__pyx_codeobj_tab[66] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_generate_triton_program, __pyx_k_A_y_vQ_q_A_I_Qa, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[66])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 809, 72};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_cinputs, __pyx_mstate->__pyx_n_u_num, __pyx_mstate->__pyx_n_u_inputs, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_ptr};
    __pyx_mstate_global->__pyx_codeobj_tab[67] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_get_input_dtensors, __pyx_k_A_d_aq_Q_E_aq_Q_2_fA_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[67])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 818, 14};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[68] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_get_owner_independent_hash, __pyx_k_A_t9_7q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[68])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 823, 44};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_t, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[69] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_kn_tensor_to_dict, __pyx_k_A_1AT_T_e1AQ_AQ, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[69])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 830, 44};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_t, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[70] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_tb_tensor_to_dict, __pyx_k_A_1AT_T_e1AQ_AQ, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[70])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 837, 215};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_op, __pyx_mstate->__pyx_n_u_ans, __pyx_mstate->__pyx_n_u_input_op, __pyx_mstate->__pyx_n_u_output_op, __pyx_mstate->__pyx_n_u_t, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[71] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_get_tb_operator_info, __pyx_k_A_r_Qd_5Qc_U_DWWX_at_6as_e2EYYZ, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[71])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 859, 76};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_op, __pyx_mstate->__pyx_n_u_cop, __pyx_mstate->__pyx_n_u_bgraph, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[72] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_get_bgraph_info, __pyx_k_A_avU_6QR_Kq_a_V1_4AS_E_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[72])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 868, 151};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_op, __pyx_mstate->__pyx_n_u_t, __pyx_mstate->__pyx_n_u_t, __pyx_mstate->__pyx_n_u_t, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[73] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_get_kn_operator_info, __pyx_k_A_2Yc_2Q_9_T_bH_4_3d_rI_q_2Q_9_T, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[73])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 883, 72};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_operators, __pyx_mstate->__pyx_n_u_ops, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_op};
    __pyx_mstate_global->__pyx_codeobj_tab[74] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_get_graph_structure, __pyx_k_A_A_d_1_E_as_q_Qa_is_1_WAT_7q_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[74])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 892, 14};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[75] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_get_num_inputs, __pyx_k_A_t9_31, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[75])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 895, 14};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[76] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_get_num_outputs, __pyx_k_A_t9_4A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[76])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 8, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 898, 87};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_cstrides, __pyx_mstate->__pyx_n_u_cdims, __pyx_mstate->__pyx_n_u_num, __pyx_mstate->__pyx_n_u_strides, __pyx_mstate->__pyx_n_u_dims, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[77] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_get_input_dtensor_shape_and_stri, __pyx_k_A_d_aq_RS_a_1_E_aq_7_81A_q_Qa_uA, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[77])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 910, 79};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_tensor, __pyx_mstate->__pyx_n_u_torch_tensor, __pyx_mstate->__pyx_n_u_name, __pyx_mstate->__pyx_n_u_torch_data_ptr, __pyx_mstate->__pyx_n_u_cname, __pyx_mstate->__pyx_n_u_py_byte_string};
    __pyx_mstate_global->__pyx_codeobj_tab[78] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_attach_torch_tensor, __pyx_k_A_1_uA_RVV_ffg_1_5_q_T_A_I_PPQ, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[78])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 918, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_tensor, __pyx_mstate->__pyx_n_u_name, __pyx_mstate->__pyx_n_u_cname, __pyx_mstate->__pyx_n_u_py_byte_string};
    __pyx_mstate_global->__pyx_codeobj_tab[79] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_attach_cuda_tensor, __pyx_k_A_1_5_q_T_A_I_xq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[79])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 925, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_tensor, __pyx_mstate->__pyx_n_u_name, __pyx_mstate->__pyx_n_u_cname, __pyx_mstate->__pyx_n_u_py_byte_string};
    __pyx_mstate_global->__pyx_codeobj_tab[80] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_attach_nvshmem_tensor, __pyx_k_A_1_5_q_T_A_I_1F, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[80])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 12, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 932, 144};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_inputs, __pyx_mstate->__pyx_n_u_fused_dim, __pyx_mstate->__pyx_n_u_num_groups, __pyx_mstate->__pyx_n_u_name, __pyx_mstate->__pyx_n_u_cinputs, __pyx_mstate->__pyx_n_u_t, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_cname, __pyx_mstate->__pyx_n_u_py_byte_string, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_output};
    __pyx_mstate_global->__pyx_codeobj_tab[81] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_fuse_tensors, __pyx_k_A_was_1_E_as_1_4q_at3a_aq_1E_1_5, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[81])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 8, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 948, 104};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_bgraph, __pyx_mstate->__pyx_n_u_task_type, __pyx_mstate->__pyx_n_u_params, __pyx_mstate->__pyx_n_u_cname, __pyx_mstate->__pyx_n_u_py_byte_string, __pyx_mstate->__pyx_n_u_cparams, __pyx_mstate->__pyx_n_u_i};
    __pyx_mstate_global->__pyx_codeobj_tab[82] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_register_task, __pyx_k_A_1_WA_YgQa_A_waq_7_7_3aq_U_3aq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[82])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 961, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_num_gpus, __pyx_mstate->__pyx_n_u_my_gpu_id, __pyx_mstate->__pyx_n_u_result};
    __pyx_mstate_global->__pyx_codeobj_tab[83] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_generate_task_graph, __pyx_k_A_d_3Gq_RS_z_z, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[83])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[84] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[84])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[85] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[85])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 9, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 997, 126};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_dtensor, __pyx_mstate->__pyx_n_u_input_map, __pyx_mstate->__pyx_n_u_forloop_dim, __pyx_mstate->__pyx_n_u_store_in_dmem, __pyx_mstate->__pyx_n_u_c_input_map, __pyx_mstate->__pyx_n_u_dtensor_cptr, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[86] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_new_input, __pyx_k_a_s_c_A_5_5_5_87_7_t9Ja_R__mmn, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[86])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {5, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1010, 83};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_stensor, __pyx_mstate->__pyx_n_u_output_map, __pyx_mstate->__pyx_n_u_forloop_dim, __pyx_mstate->__pyx_n_u_epilogue, __pyx_mstate->__pyx_n_u_c_output_map, __pyx_mstate->__pyx_n_u_epilogue_type};
    __pyx_mstate_global->__pyx_codeobj_tab[87] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_new_output, __pyx_k_s_s_Q_E_1A_E_1A_E_1A_AQ_I_m1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[87])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1019, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_B, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[88] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_matmul, __pyx_k_A_t9G1AXQa_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[88])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1024, 44};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[89] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_exp, __pyx_k_A_t9D_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[89])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1029, 44};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[90] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_silu, __pyx_k_A_t9E_1_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[90])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1034, 44};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[91] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_gelu, __pyx_k_A_t9E_1_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[91])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1039, 44};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[92] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_relu, __pyx_k_A_t9E_1_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[92])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1044, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_min_val, __pyx_mstate->__pyx_n_u_max_val, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[93] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_clamp, __pyx_k_A_t9F_1HIQ_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[93])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1049, 44};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[94] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_square, __pyx_k_A_t9G1AQ_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[94])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1054, 44};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[95] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_sqrt, __pyx_k_A_t9E_1_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[95])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1059, 46};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_scalar, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[96] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_mul_scalar, __pyx_k_A_t9Kq_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[96])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1064, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_B, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[97] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_add, __pyx_k_A_t9D_1_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[97])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1069, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_B, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[98] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_mul, __pyx_k_A_t9D_1_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[98])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1074, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_B, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[99] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_div, __pyx_k_A_t9D_1_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[99])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1079, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_B, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[100] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_sub, __pyx_k_A_t9D_1_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[100])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 5, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1084, 46};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_dim, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[101] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_reduction, __pyx_k_A_t9Jaq_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[101])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1089, 78};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_dim, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t0, __pyx_mstate->__pyx_n_u_t1};
    __pyx_mstate_global->__pyx_codeobj_tab[102] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_reduction_max, __pyx_k_A_t9N_1HA_V5_S_V1_V5_S_V1_wauG1A, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[102])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1095, 44};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[103] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_rms_norm, __pyx_k_A_t9IQaq_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[103])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1100, 50};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_B, __pyx_mstate->__pyx_n_u_dim, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[104] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_concat, __pyx_k_A_t9G1AXQha_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[104])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {3, 0, 0, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1105, 56};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_acc, __pyx_mstate->__pyx_n_u_optype, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[105] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_forloop_accum, __pyx_k_A_q_t9N_1HA_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[105])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {4, 0, 0, 7, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1111, 62};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_B, __pyx_mstate->__pyx_n_u_acc, __pyx_mstate->__pyx_n_u_optype, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[106] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_forloop_accum_rescale, __pyx_k_A_q_t9_B_1HAXUV_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[106])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1117, 45};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_A, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_t};
    __pyx_mstate_global->__pyx_codeobj_tab[107] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_forloop_accum_max, __pyx_k_A_t9_aq_F_q_E_q_waq, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[107])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self};
    __pyx_mstate_global->__pyx_codeobj_tab[108] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_reduce_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[108])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 2, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 3, 9};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_self, __pyx_mstate->__pyx_n_u_pyx_state};
    __pyx_mstate_global->__pyx_codeobj_tab[109] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_stringsource, __pyx_mstate->__pyx_n_u_setstate_cython, __pyx_k_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[109])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 11, 28, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1144, 832};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_input_graph, __pyx_mstate->__pyx_n_u_max_num_new_graphs, __pyx_mstate->__pyx_n_u_imaps, __pyx_mstate->__pyx_n_u_omaps, __pyx_mstate->__pyx_n_u_griddims, __pyx_mstate->__pyx_n_u_blockdims, __pyx_mstate->__pyx_n_u_fmaps, __pyx_mstate->__pyx_n_u_franges, __pyx_mstate->__pyx_n_u_previous_checkpoint, __pyx_mstate->__pyx_n_u_verbose, __pyx_mstate->__pyx_n_u_default_config, __pyx_mstate->__pyx_n_u_is_formal_verified, __pyx_mstate->__pyx_n_u_cimaps, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_comaps, __pyx_mstate->__pyx_n_u_cgriddims, __pyx_mstate->__pyx_n_u_cblockdims, __pyx_mstate->__pyx_n_u_cfmaps, __pyx_mstate->__pyx_n_u_cfranges, __pyx_mstate->__pyx_n_u_cnewgraphs, __pyx_mstate->__pyx_n_u_cverbose, __pyx_mstate->__pyx_n_u_cprevious_checkpoint, __pyx_mstate->__pyx_n_u_py_byte_string, __pyx_mstate->__pyx_n_u_cconfig, __pyx_mstate->__pyx_n_u_cis_formal_verifed, __pyx_mstate->__pyx_n_u_num, __pyx_mstate->__pyx_n_u_new_graphs, __pyx_mstate->__pyx_n_u_ptr};
    __pyx_mstate_global->__pyx_codeobj_tab[110] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_search, __pyx_k_DDWWj_k_A_A_X_X_k_k_n_n_o_vWA_g, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[110])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 6, 16, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1224, 400};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_input_graph, __pyx_mstate->__pyx_n_u_target_cc, __pyx_mstate->__pyx_n_u_input_strides, __pyx_mstate->__pyx_n_u_num_warp_groups, __pyx_mstate->__pyx_n_u_pipeline_stages, __pyx_mstate->__pyx_n_u_profiling, __pyx_mstate->__pyx_n_u_enable_online_softmax, __pyx_mstate->__pyx_n_u_transpiler_config, __pyx_mstate->__pyx_n_u_cinput_strides, __pyx_mstate->__pyx_n_u_i, __pyx_mstate->__pyx_n_u_j, __pyx_mstate->__pyx_n_u_result, __pyx_mstate->__pyx_n_u_output_directives, __pyx_mstate->__pyx_n_u_cur_output_shape, __pyx_mstate->__pyx_n_u_cur_output_strides, __pyx_mstate->__pyx_n_u_num_dims};
    __pyx_mstate_global->__pyx_codeobj_tab[111] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_generate_cuda_program, __pyx_k_WWq_r_L_L_d_d_K_K_L_a_t2T_1_Q_Q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[111])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 1, 6, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1272, 74};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_input_graph, __pyx_mstate->__pyx_n_u_target_cc, __pyx_mstate->__pyx_n_u_transpiler_config, __pyx_mstate->__pyx_n_u_result, __pyx_mstate->__pyx_n_u_error_list, __pyx_mstate->__pyx_n_u_error};
    __pyx_mstate_global->__pyx_codeobj_tab[112] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_generate_nki_program, __pyx_k_EQ_Ya_Q_1E_iv_QR_e7_1, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[112])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 1, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1286, 48};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_input_graph, __pyx_mstate->__pyx_n_u_target_cc, __pyx_mstate->__pyx_n_u_transpiler_config, __pyx_mstate->__pyx_n_u_result};
    __pyx_mstate_global->__pyx_codeobj_tab[113] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_generate_triton_program, __pyx_k_H_e7_1_q, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[113])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 1, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1297, 12};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_gpu_id};
    __pyx_mstate_global->__pyx_codeobj_tab[114] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_set_gpu_device_id, __pyx_k_a_AQ, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[114])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {2, 0, 0, 3, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1300, 24};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_input_graph, __pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_cfilename};
    __pyx_mstate_global->__pyx_codeobj_tab[115] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_cy_to_json, __pyx_k_q_k, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[115])) goto bad;
  }
  {
    const __Pyx_PyCode_New_function_description descr = {1, 0, 0, 4, (unsigned int)(CO_OPTIMIZED|CO_NEWLOCALS), 1304, 50};
    PyObject* const varnames[] = {__pyx_mstate->__pyx_n_u_filename, __pyx_mstate->__pyx_n_u_cfilename, __pyx_mstate->__pyx_n_u_ptr, __pyx_mstate->__pyx_n_u_graph};
    __pyx_mstate_global->__pyx_codeobj_tab[116] = __Pyx_PyCode_New(descr, varnames, __pyx_mstate->__pyx_kp_u_yirage__cython_core_pyx, __pyx_mstate->__pyx_n_u_cy_from_json, __pyx_k_q_1_F_q_E_q_9AQ, tuple_dedup_map); if (unlikely(!__pyx_mstate_global->__pyx_codeobj_tab[116])) goto bad;
  }
  Py_DECREF(tuple_dedup_map);
  return 0;
  bad:
  Py_DECREF(tuple_dedup_map);
  return -1;
}
/* #### Code section: init_globals ### */

static int __Pyx_InitGlobals(void) {
  /* PythonCompatibility.init */
  if (likely(__Pyx_init_co_variables() == 0)); else

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  /* AssertionsEnabled.init */
  if (likely(__Pyx_init_assertions_enabled() == 0)); else

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  /* CachedMethodType.init */
  #if CYTHON_COMPILING_IN_LIMITED_API
{
    PyObject *typesModule=NULL;
    typesModule = PyImport_ImportModule("types");
    if (typesModule) {
        __pyx_mstate_global->__Pyx_CachedMethodType = PyObject_GetAttrString(typesModule, "MethodType");
        Py_DECREF(typesModule);
    }
} // error handling follows
#endif

if (unlikely(PyErr_Occurred())) __PYX_ERR(0, 1, __pyx_L1_error)

  return 0;
  __pyx_L1_error:;
  return -1;
}
/* #### Code section: cleanup_globals ### */
/* #### Code section: cleanup_module ### */
/* #### Code section: main_method ### */
/* #### Code section: utility_code_pragmas ### */
#ifdef _MSC_VER
#pragma warning( push )
/* Warning 4127: conditional expression is constant
 * Cython uses constant conditional expressions to allow in inline functions to be optimized at
 * compile-time, so this warning is not useful
 */
#pragma warning( disable : 4127 )
#endif



/* #### Code section: utility_code_def ### */

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule(modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, "RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* PyErrExceptionMatches */
#if CYTHON_FAST_THREAD_STATE
static int __Pyx_PyErr_ExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    n = PyTuple_GET_SIZE(tuple);
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
    for (i=0; i<n; i++) {
        if (__Pyx_PyErr_GivenExceptionMatches(exc_type, PyTuple_GET_ITEM(tuple, i))) return 1;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    int result;
    PyObject *exc_type;
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *current_exception = tstate->current_exception;
    if (unlikely(!current_exception)) return 0;
    exc_type = (PyObject*) Py_TYPE(current_exception);
    if (exc_type == err) return 1;
#else
    exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
#endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(exc_type);
    #endif
    if (unlikely(PyTuple_Check(err))) {
        result = __Pyx_PyErr_ExceptionMatchesTuple(exc_type, err);
    } else {
        result = __Pyx_PyErr_GivenExceptionMatches(exc_type, err);
    }
    #if CYTHON_AVOID_BORROWED_REFS
    Py_DECREF(exc_type);
    #endif
    return result;
}
#endif

/* PyErrFetchRestore */
#if CYTHON_FAST_THREAD_STATE
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject *tmp_value;
    assert(type == NULL || (value != NULL && type == (PyObject*) Py_TYPE(value)));
    if (value) {
        #if CYTHON_COMPILING_IN_CPYTHON
        if (unlikely(((PyBaseExceptionObject*) value)->traceback != tb))
        #endif
            PyException_SetTraceback(value, tb);
    }
    tmp_value = tstate->current_exception;
    tstate->current_exception = value;
    Py_XDECREF(tmp_value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
#else
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#if PY_VERSION_HEX >= 0x030C00A6
    PyObject* exc_value;
    exc_value = tstate->current_exception;
    tstate->current_exception = 0;
    *value = exc_value;
    *type = NULL;
    *tb = NULL;
    if (exc_value) {
        *type = (PyObject*) Py_TYPE(exc_value);
        Py_INCREF(*type);
        #if CYTHON_COMPILING_IN_CPYTHON
        *tb = ((PyBaseExceptionObject*) exc_value)->traceback;
        Py_XINCREF(*tb);
        #else
        *tb = PyException_GetTraceback(exc_value);
        #endif
    }
#else
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#endif
}
#endif

/* PyObjectGetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
    return PyObject_GetAttr(obj, attr_name);
}
#endif

/* PyObjectGetAttrStrNoError */
#if __PYX_LIMITED_VERSION_HEX < 0x030d0000
static void __Pyx_PyObject_GetAttrStr_ClearAttributeError(void) {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    if (likely(__Pyx_PyErr_ExceptionMatches(PyExc_AttributeError)))
        __Pyx_PyErr_Clear();
}
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStrNoError(PyObject* obj, PyObject* attr_name) {
    PyObject *result;
#if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
    (void) PyObject_GetOptionalAttr(obj, attr_name, &result);
    return result;
#else
#if CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_TYPE_SLOTS
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro == PyObject_GenericGetAttr)) {
        return _PyObject_GenericGetAttrWithDict(obj, attr_name, NULL, 1);
    }
#endif
    result = __Pyx_PyObject_GetAttrStr(obj, attr_name);
    if (unlikely(!result)) {
        __Pyx_PyObject_GetAttrStr_ClearAttributeError();
    }
    return result;
#endif
}

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_b, name);
    if (unlikely(!result) && !PyErr_Occurred()) {
        PyErr_Format(PyExc_NameError,
            "name '%U' is not defined", name);
    }
    return result;
}

/* TupleAndListFromArray */
#if !CYTHON_COMPILING_IN_CPYTHON && CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    Py_ssize_t i;
    if (n <= 0) {
        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_tuple);
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    for (i = 0; i < n; i++) {
        if (unlikely(__Pyx_PyTuple_SET_ITEM(res, i, src[i]) < 0)) {
            Py_DECREF(res);
            return NULL;
        }
        Py_INCREF(src[i]);
    }
    return res;
}
#elif CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject *const *CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject *
__Pyx_PyTuple_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_tuple);
    }
    res = PyTuple_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyTupleObject*)res)->ob_item, n);
    return res;
}
static CYTHON_INLINE PyObject *
__Pyx_PyList_FromArray(PyObject *const *src, Py_ssize_t n)
{
    PyObject *res;
    if (n <= 0) {
        return PyList_New(0);
    }
    res = PyList_New(n);
    if (unlikely(res == NULL)) return NULL;
    __Pyx_copy_object_array(src, ((PyListObject*)res)->ob_item, n);
    return res;
}
#endif

/* BytesEquals */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL ||\
        !(CYTHON_ASSUME_SAFE_SIZE && CYTHON_ASSUME_SAFE_MACROS)
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result;
#if CYTHON_USE_UNICODE_INTERNALS && (PY_VERSION_HEX < 0x030B0000)
            Py_hash_t hash1, hash2;
            hash1 = ((PyBytesObject*)s1)->ob_shash;
            hash2 = ((PyBytesObject*)s2)->ob_shash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                return (equals == Py_NE);
            }
#endif
            result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_GRAAL
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length, length2;
        int kind;
        void *data1, *data2;
        #if !CYTHON_COMPILING_IN_LIMITED_API
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        #endif
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(length < 0)) return -1;
        #endif
        length2 = __Pyx_PyUnicode_GET_LENGTH(s2);
        #if !CYTHON_ASSUME_SAFE_SIZE
        if (unlikely(length2 < 0)) return -1;
        #endif
        if (length != length2) {
            goto return_ne;
        }
#if CYTHON_USE_UNICODE_INTERNALS
        {
            Py_hash_t hash1, hash2;
            hash1 = ((PyASCIIObject*)s1)->hash;
            hash2 = ((PyASCIIObject*)s2)->hash;
            if (hash1 != hash2 && hash1 != -1 && hash2 != -1) {
                goto return_ne;
            }
        }
#endif
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    return (equals == Py_EQ);
return_ne:
    return (equals == Py_NE);
#endif
}

/* fastcall */
#if CYTHON_METH_FASTCALL
static CYTHON_INLINE PyObject * __Pyx_GetKwValue_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues, PyObject *s)
{
    Py_ssize_t i, n = __Pyx_PyTuple_GET_SIZE(kwnames);
    #if !CYTHON_ASSUME_SAFE_SIZE
    if (unlikely(n == -1)) return NULL;
    #endif
    for (i = 0; i < n; i++)
    {
        PyObject *namei = __Pyx_PyTuple_GET_ITEM(kwnames, i);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!namei)) return NULL;
        #endif
        if (s == namei) return kwvalues[i];
    }
    for (i = 0; i < n; i++)
    {
        PyObject *namei = __Pyx_PyTuple_GET_ITEM(kwnames, i);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!namei)) return NULL;
        #endif
        int eq = __Pyx_PyUnicode_Equals(s, namei, Py_EQ);
        if (unlikely(eq != 0)) {
            if (unlikely(eq < 0)) return NULL;
            return kwvalues[i];
        }
    }
    return NULL;
}
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x030d0000 || CYTHON_COMPILING_IN_LIMITED_API
CYTHON_UNUSED static PyObject *__Pyx_KwargsAsDict_FASTCALL(PyObject *kwnames, PyObject *const *kwvalues) {
    Py_ssize_t i, nkwargs;
    PyObject *dict;
#if !CYTHON_ASSUME_SAFE_SIZE
    nkwargs = PyTuple_Size(kwnames);
    if (unlikely(nkwargs < 0)) return NULL;
#else
    nkwargs = PyTuple_GET_SIZE(kwnames);
#endif
    dict = PyDict_New();
    if (unlikely(!dict))
        return NULL;
    for (i=0; i<nkwargs; i++) {
#if !CYTHON_ASSUME_SAFE_MACROS
        PyObject *key = PyTuple_GetItem(kwnames, i);
        if (!key) goto bad;
#else
        PyObject *key = PyTuple_GET_ITEM(kwnames, i);
#endif
        if (unlikely(PyDict_SetItem(dict, key, kwvalues[i]) < 0))
            goto bad;
    }
    return dict;
bad:
    Py_DECREF(dict);
    return NULL;
}
#endif
#endif

/* RaiseDoubleKeywords */
static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
}

/* PyFunctionFastCall */
#if CYTHON_FAST_PYCALL && !CYTHON_VECTORCALL
static PyObject* __Pyx_PyFunction_FastCallNoKw(PyCodeObject *co, PyObject *const *args, Py_ssize_t na,
                                               PyObject *globals) {
    PyFrameObject *f;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject **fastlocals;
    Py_ssize_t i;
    PyObject *result;
    assert(globals != NULL);
    /* XXX Perhaps we should create a specialized
       PyFrame_New() that doesn't take locals, but does
       take builtins without sanity checking them.
       */
    assert(tstate != NULL);
    f = PyFrame_New(tstate, co, globals, NULL);
    if (f == NULL) {
        return NULL;
    }
    fastlocals = __Pyx_PyFrame_GetLocalsplus(f);
    for (i = 0; i < na; i++) {
        Py_INCREF(*args);
        fastlocals[i] = *args++;
    }
    result = PyEval_EvalFrameEx(f,0);
    ++tstate->recursion_depth;
    Py_DECREF(f);
    --tstate->recursion_depth;
    return result;
}
static PyObject *__Pyx_PyFunction_FastCallDict(PyObject *func, PyObject *const *args, Py_ssize_t nargs, PyObject *kwargs) {
    PyCodeObject *co = (PyCodeObject *)PyFunction_GET_CODE(func);
    PyObject *globals = PyFunction_GET_GLOBALS(func);
    PyObject *argdefs = PyFunction_GET_DEFAULTS(func);
    PyObject *closure;
    PyObject *kwdefs;
    PyObject *kwtuple, **k;
    PyObject **d;
    Py_ssize_t nd;
    Py_ssize_t nk;
    PyObject *result;
    assert(kwargs == NULL || PyDict_Check(kwargs));
    nk = kwargs ? PyDict_Size(kwargs) : 0;
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object"))) {
        return NULL;
    }
    if (
            co->co_kwonlyargcount == 0 &&
            likely(kwargs == NULL || nk == 0) &&
            co->co_flags == (CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE)) {
        if (argdefs == NULL && co->co_argcount == nargs) {
            result = __Pyx_PyFunction_FastCallNoKw(co, args, nargs, globals);
            goto done;
        }
        else if (nargs == 0 && argdefs != NULL
                 && co->co_argcount == Py_SIZE(argdefs)) {
            /* function called with no arguments, but all parameters have
               a default value: use default values as arguments .*/
            args = &PyTuple_GET_ITEM(argdefs, 0);
            result =__Pyx_PyFunction_FastCallNoKw(co, args, Py_SIZE(argdefs), globals);
            goto done;
        }
    }
    if (kwargs != NULL) {
        Py_ssize_t pos, i;
        kwtuple = PyTuple_New(2 * nk);
        if (kwtuple == NULL) {
            result = NULL;
            goto done;
        }
        k = &PyTuple_GET_ITEM(kwtuple, 0);
        pos = i = 0;
        while (PyDict_Next(kwargs, &pos, &k[i], &k[i+1])) {
            Py_INCREF(k[i]);
            Py_INCREF(k[i+1]);
            i += 2;
        }
        nk = i / 2;
    }
    else {
        kwtuple = NULL;
        k = NULL;
    }
    closure = PyFunction_GET_CLOSURE(func);
    kwdefs = PyFunction_GET_KW_DEFAULTS(func);
    if (argdefs != NULL) {
        d = &PyTuple_GET_ITEM(argdefs, 0);
        nd = Py_SIZE(argdefs);
    }
    else {
        d = NULL;
        nd = 0;
    }
    result = PyEval_EvalCodeEx((PyObject*)co, globals, (PyObject *)NULL,
                               args, (int)nargs,
                               k, (int)nk,
                               d, (int)nd, kwdefs, closure);
    Py_XDECREF(kwtuple);
done:
    Py_LeaveRecursiveCall();
    return result;
}
#endif

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = Py_TYPE(func)->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = __Pyx_CyOrPyCFunction_GET_FUNCTION(func);
    self = __Pyx_CyOrPyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall(" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectFastCall */
#if PY_VERSION_HEX < 0x03090000 || CYTHON_COMPILING_IN_LIMITED_API
static PyObject* __Pyx_PyObject_FastCall_fallback(PyObject *func, PyObject * const*args, size_t nargs, PyObject *kwargs) {
    PyObject *argstuple;
    PyObject *result = 0;
    size_t i;
    argstuple = PyTuple_New((Py_ssize_t)nargs);
    if (unlikely(!argstuple)) return NULL;
    for (i = 0; i < nargs; i++) {
        Py_INCREF(args[i]);
        if (__Pyx_PyTuple_SET_ITEM(argstuple, (Py_ssize_t)i, args[i]) != (0)) goto bad;
    }
    result = __Pyx_PyObject_Call(func, argstuple, kwargs);
  bad:
    Py_DECREF(argstuple);
    return result;
}
#endif
#if CYTHON_VECTORCALL && !CYTHON_COMPILING_IN_LIMITED_API
  #if PY_VERSION_HEX < 0x03090000
    #define __Pyx_PyVectorcall_Function(callable) _PyVectorcall_Function(callable)
  #elif CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE vectorcallfunc __Pyx_PyVectorcall_Function(PyObject *callable) {
    PyTypeObject *tp = Py_TYPE(callable);
    #if defined(__Pyx_CyFunction_USED)
    if (__Pyx_CyFunction_CheckExact(callable)) {
        return __Pyx_CyFunction_func_vectorcall(callable);
    }
    #endif
    if (!PyType_HasFeature(tp, Py_TPFLAGS_HAVE_VECTORCALL)) {
        return NULL;
    }
    assert(PyCallable_Check(callable));
    Py_ssize_t offset = tp->tp_vectorcall_offset;
    assert(offset > 0);
    vectorcallfunc ptr;
    memcpy(&ptr, (char *) callable + offset, sizeof(ptr));
    return ptr;
}
  #else
    #define __Pyx_PyVectorcall_Function(callable) PyVectorcall_Function(callable)
  #endif
#endif
static CYTHON_INLINE PyObject* __Pyx_PyObject_FastCallDict(PyObject *func, PyObject *const *args, size_t _nargs, PyObject *kwargs) {
    Py_ssize_t nargs = __Pyx_PyVectorcall_NARGS(_nargs);
#if CYTHON_COMPILING_IN_CPYTHON
    if (nargs == 0 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_NOARGS))
            return __Pyx_PyObject_CallMethO(func, NULL);
    }
    else if (nargs == 1 && kwargs == NULL) {
        if (__Pyx_CyOrPyCFunction_Check(func) && likely( __Pyx_CyOrPyCFunction_GET_FLAGS(func) & METH_O))
            return __Pyx_PyObject_CallMethO(func, args[0]);
    }
#endif
    #if PY_VERSION_HEX < 0x030800B1
    #if CYTHON_FAST_PYCCALL
    if (PyCFunction_Check(func)) {
        if (kwargs) {
            return _PyCFunction_FastCallDict(func, args, nargs, kwargs);
        } else {
            return _PyCFunction_FastCallKeywords(func, args, nargs, NULL);
        }
    }
    if (!kwargs && __Pyx_IS_TYPE(func, &PyMethodDescr_Type)) {
        return _PyMethodDescr_FastCallKeywords(func, args, nargs, NULL);
    }
    #endif
    #if CYTHON_FAST_PYCALL
    if (PyFunction_Check(func)) {
        return __Pyx_PyFunction_FastCallDict(func, args, nargs, kwargs);
    }
    #endif
    #endif
    if (kwargs == NULL) {
        #if CYTHON_VECTORCALL && !CYTHON_COMPILING_IN_LIMITED_API
        vectorcallfunc f = __Pyx_PyVectorcall_Function(func);
        if (f) {
            return f(func, args, _nargs, NULL);
        }
        #elif defined(__Pyx_CyFunction_USED) && CYTHON_BACKPORT_VECTORCALL
        if (__Pyx_CyFunction_CheckExact(func)) {
            __pyx_vectorcallfunc f = __Pyx_CyFunction_func_vectorcall(func);
            if (f) return f(func, args, _nargs, NULL);
        }
        #elif CYTHON_COMPILING_IN_LIMITED_API && CYTHON_VECTORCALL
        return PyObject_Vectorcall(func, args, _nargs, NULL);
        #endif
    }
    if (nargs == 0) {
        return __Pyx_PyObject_Call(func, __pyx_mstate_global->__pyx_empty_tuple, kwargs);
    }
    #if PY_VERSION_HEX >= 0x03090000 && !CYTHON_COMPILING_IN_LIMITED_API
    return PyObject_VectorcallDict(func, args, (size_t)nargs, kwargs);
    #else
    return __Pyx_PyObject_FastCall_fallback(func, args, (size_t)nargs, kwargs);
    #endif
}

/* UnpackUnboundCMethod */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030C0000
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *args, PyObject *kwargs) {
    PyObject *result;
    PyObject *selfless_args = PyTuple_GetSlice(args, 1, PyTuple_Size(args));
    if (unlikely(!selfless_args)) return NULL;
    result = PyObject_Call(method, selfless_args, kwargs);
    Py_DECREF(selfless_args);
    return result;
}
#elif CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x03090000
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject **args, Py_ssize_t nargs, PyObject *kwnames) {
        return _PyObject_Vectorcall
            (method, args ? args+1 : NULL, nargs ? nargs-1 : 0, kwnames);
}
#else
static PyObject *__Pyx_SelflessCall(PyObject *method, PyObject *const *args, Py_ssize_t nargs, PyObject *kwnames) {
    return
#if PY_VERSION_HEX < 0x03090000
    _PyObject_Vectorcall
#else
    PyObject_Vectorcall
#endif
        (method, args ? args+1 : NULL, nargs ? (size_t) nargs-1 : 0, kwnames);
}
#endif
static PyMethodDef __Pyx_UnboundCMethod_Def = {
     "CythonUnboundCMethod",
     __PYX_REINTERPRET_FUNCION(PyCFunction, __Pyx_SelflessCall),
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030C0000
     METH_VARARGS | METH_KEYWORDS,
#else
     METH_FASTCALL | METH_KEYWORDS,
#endif
     NULL
};
static int __Pyx_TryUnpackUnboundCMethod(__Pyx_CachedCFunction* target) {
    PyObject *method, *result=NULL;
    method = __Pyx_PyObject_GetAttrStr(target->type, *target->method_name);
    if (unlikely(!method))
        return -1;
    result = method;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(__Pyx_TypeCheck(method, &PyMethodDescr_Type)))
    {
        PyMethodDescrObject *descr = (PyMethodDescrObject*) method;
        target->func = descr->d_method->ml_meth;
        target->flag = descr->d_method->ml_flags & ~(METH_CLASS | METH_STATIC | METH_COEXIST | METH_STACKLESS);
    } else
#endif
#if CYTHON_COMPILING_IN_PYPY
#else
    if (PyCFunction_Check(method))
#endif
    {
        PyObject *self;
        int self_found;
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        self = PyObject_GetAttrString(method, "__self__");
        if (!self) {
            PyErr_Clear();
        }
#else
        self = PyCFunction_GET_SELF(method);
#endif
        self_found = (self && self != Py_None);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_COMPILING_IN_PYPY
        Py_XDECREF(self);
#endif
        if (self_found) {
            PyObject *unbound_method = PyCFunction_New(&__Pyx_UnboundCMethod_Def, method);
            if (unlikely(!unbound_method)) return -1;
            Py_DECREF(method);
            result = unbound_method;
        }
    }
#if !CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    if (unlikely(target->method)) {
        Py_DECREF(result);
    } else
#endif
    target->method = result;
    return 0;
}

/* CallUnboundCMethod2 */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject *__Pyx_CallUnboundCMethod2(__Pyx_CachedCFunction *cfunc, PyObject *self, PyObject *arg1, PyObject *arg2) {
    int was_initialized = __Pyx_CachedCFunction_GetAndSetInitializing(cfunc);
    if (likely(was_initialized == 2 && cfunc->func)) {
        PyObject *args[2] = {arg1, arg2};
        if (cfunc->flag == METH_FASTCALL) {
            return __Pyx_CallCFunctionFast(cfunc, self, args, 2);
        }
        if (cfunc->flag == (METH_FASTCALL | METH_KEYWORDS))
            return __Pyx_CallCFunctionFastWithKeywords(cfunc, self, args, 2, NULL);
    }
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    else if (unlikely(was_initialized == 1)) {
        __Pyx_CachedCFunction tmp_cfunc = {
#ifndef __cplusplus
            0
#endif
        };
        tmp_cfunc.type = cfunc->type;
        tmp_cfunc.method_name = cfunc->method_name;
        return __Pyx__CallUnboundCMethod2(&tmp_cfunc, self, arg1, arg2);
    }
#endif
    PyObject *result = __Pyx__CallUnboundCMethod2(cfunc, self, arg1, arg2);
    __Pyx_CachedCFunction_SetFinishedInitializing(cfunc);
    return result;
}
#endif
static PyObject* __Pyx__CallUnboundCMethod2(__Pyx_CachedCFunction* cfunc, PyObject* self, PyObject* arg1, PyObject* arg2){
    if (unlikely(!cfunc->func && !cfunc->method) && unlikely(__Pyx_TryUnpackUnboundCMethod(cfunc) < 0)) return NULL;
#if CYTHON_COMPILING_IN_CPYTHON
    if (cfunc->func && (cfunc->flag & METH_VARARGS)) {
        PyObject *result = NULL;
        PyObject *args = PyTuple_New(2);
        if (unlikely(!args)) return NULL;
        Py_INCREF(arg1);
        PyTuple_SET_ITEM(args, 0, arg1);
        Py_INCREF(arg2);
        PyTuple_SET_ITEM(args, 1, arg2);
        if (cfunc->flag & METH_KEYWORDS)
            result = __Pyx_CallCFunctionWithKeywords(cfunc, self, args, NULL);
        else
            result = __Pyx_CallCFunction(cfunc, self, args);
        Py_DECREF(args);
        return result;
    }
#endif
    {
        PyObject *args[4] = {NULL, self, arg1, arg2};
        return __Pyx_PyObject_FastCall(cfunc->method, args+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
    }
}

/* ParseKeywords */
static int __Pyx_ValidateDuplicatePosArgs(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    const char* function_name)
{
    PyObject ** const *name = argnames;
    while (name != first_kw_arg) {
        PyObject *key = **name;
        int found = PyDict_Contains(kwds, key);
        if (unlikely(found)) {
            if (found == 1) __Pyx_RaiseDoubleKeywordsError(function_name, key);
            goto bad;
        }
        name++;
    }
    return 0;
bad:
    return -1;
}
#if CYTHON_USE_UNICODE_INTERNALS
static CYTHON_INLINE int __Pyx_UnicodeKeywordsEqual(PyObject *s1, PyObject *s2) {
    int kind;
    Py_ssize_t len = PyUnicode_GET_LENGTH(s1);
    if (len != PyUnicode_GET_LENGTH(s2)) return 0;
    kind = PyUnicode_KIND(s1);
    if (kind != PyUnicode_KIND(s2)) return 0;
    const void *data1 = PyUnicode_DATA(s1);
    const void *data2 = PyUnicode_DATA(s2);
    return (memcmp(data1, data2, (size_t) len * (size_t) kind) == 0);
}
#endif
static int __Pyx_MatchKeywordArg_str(
    PyObject *key,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    size_t *index_found,
    const char *function_name)
{
    PyObject ** const *name;
    #if CYTHON_USE_UNICODE_INTERNALS
    Py_hash_t key_hash = ((PyASCIIObject*)key)->hash;
    if (unlikely(key_hash == -1)) {
        key_hash = PyObject_Hash(key);
        if (unlikely(key_hash == -1))
            goto bad;
    }
    #endif
    name = first_kw_arg;
    while (*name) {
        PyObject *name_str = **name;
        #if CYTHON_USE_UNICODE_INTERNALS
        if (key_hash == ((PyASCIIObject*)name_str)->hash && __Pyx_UnicodeKeywordsEqual(name_str, key)) {
            *index_found = (size_t) (name - argnames);
            return 1;
        }
        #else
        #if CYTHON_ASSUME_SAFE_SIZE
        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))
        #endif
        {
            int cmp = PyUnicode_Compare(name_str, key);
            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
            if (cmp == 0) {
                *index_found = (size_t) (name - argnames);
                return 1;
            }
        }
        #endif
        name++;
    }
    name = argnames;
    while (name != first_kw_arg) {
        PyObject *name_str = **name;
        #if CYTHON_USE_UNICODE_INTERNALS
        if (unlikely(key_hash == ((PyASCIIObject*)name_str)->hash)) {
            if (__Pyx_UnicodeKeywordsEqual(name_str, key))
                goto arg_passed_twice;
        }
        #else
        #if CYTHON_ASSUME_SAFE_SIZE
        if (PyUnicode_GET_LENGTH(name_str) == PyUnicode_GET_LENGTH(key))
        #endif
        {
            if (unlikely(name_str == key)) goto arg_passed_twice;
            int cmp = PyUnicode_Compare(name_str, key);
            if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
            if (cmp == 0) goto arg_passed_twice;
        }
        #endif
        name++;
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
bad:
    return -1;
}
static int __Pyx_MatchKeywordArg_nostr(
    PyObject *key,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    size_t *index_found,
    const char *function_name)
{
    PyObject ** const *name;
    if (unlikely(!PyUnicode_Check(key))) goto invalid_keyword_type;
    name = first_kw_arg;
    while (*name) {
        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);
        if (cmp == 1) {
            *index_found = (size_t) (name - argnames);
            return 1;
        }
        if (unlikely(cmp == -1)) goto bad;
        name++;
    }
    name = argnames;
    while (name != first_kw_arg) {
        int cmp = PyObject_RichCompareBool(**name, key, Py_EQ);
        if (unlikely(cmp != 0)) {
            if (cmp == 1) goto arg_passed_twice;
            else goto bad;
        }
        name++;
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
bad:
    return -1;
}
static CYTHON_INLINE int __Pyx_MatchKeywordArg(
    PyObject *key,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    size_t *index_found,
    const char *function_name)
{
    return likely(PyUnicode_CheckExact(key)) ?
        __Pyx_MatchKeywordArg_str(key, argnames, first_kw_arg, index_found, function_name) :
        __Pyx_MatchKeywordArg_nostr(key, argnames, first_kw_arg, index_found, function_name);
}
static void __Pyx_RejectUnknownKeyword(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject ** const *first_kw_arg,
    const char *function_name)
{
    Py_ssize_t pos = 0;
    PyObject *key = NULL;
    __Pyx_BEGIN_CRITICAL_SECTION(kwds);
    while (PyDict_Next(kwds, &pos, &key, NULL)) {
        PyObject** const *name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (!*name) {
            #if CYTHON_AVOID_BORROWED_REFS
            Py_INCREF(key);
            #endif
            size_t index_found = 0;
            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);
            if (cmp != 1) {
                if (cmp == 0) {
                    PyErr_Format(PyExc_TypeError,
                        "%s() got an unexpected keyword argument '%U'",
                        function_name, key);
                }
                #if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(key);
                #endif
                break;
            }
            #if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(key);
            #endif
        }
    }
    __Pyx_END_CRITICAL_SECTION();
    assert(PyErr_Occurred());
}
static int __Pyx_ParseKeywordDict(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject *values[],
    Py_ssize_t num_pos_args,
    Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs)
{
    PyObject** const *name;
    PyObject** const *first_kw_arg = argnames + num_pos_args;
    Py_ssize_t extracted = 0;
#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)
    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;
#endif
    name = first_kw_arg;
    while (*name && num_kwargs > extracted) {
        PyObject * key = **name;
        PyObject *value;
        int found = 0;
        #if __PYX_LIMITED_VERSION_HEX >= 0x030d0000
        found = PyDict_GetItemRef(kwds, key, &value);
        #else
        value = PyDict_GetItemWithError(kwds, key);
        if (value) {
            Py_INCREF(value);
            found = 1;
        } else {
            if (unlikely(PyErr_Occurred())) goto bad;
        }
        #endif
        if (found) {
            if (unlikely(found < 0)) goto bad;
            values[name-argnames] = value;
            extracted++;
        }
        name++;
    }
    if (num_kwargs > extracted) {
        if (ignore_unknown_kwargs) {
            if (unlikely(__Pyx_ValidateDuplicatePosArgs(kwds, argnames, first_kw_arg, function_name) == -1))
                goto bad;
        } else {
            __Pyx_RejectUnknownKeyword(kwds, argnames, first_kw_arg, function_name);
            goto bad;
        }
    }
    return 0;
bad:
    return -1;
}
static int __Pyx_ParseKeywordDictToDict(
    PyObject *kwds,
    PyObject ** const argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject** const *name;
    PyObject** const *first_kw_arg = argnames + num_pos_args;
    Py_ssize_t len;
#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)
    if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return -1;
#endif
    if (PyDict_Update(kwds2, kwds) < 0) goto bad;
    name = first_kw_arg;
    while (*name) {
        PyObject *key = **name;
        PyObject *value;
#if !CYTHON_COMPILING_IN_LIMITED_API && (PY_VERSION_HEX >= 0x030d00A2 || defined(PyDict_Pop))
        int found = PyDict_Pop(kwds2, key, &value);
        if (found) {
            if (unlikely(found < 0)) goto bad;
            values[name-argnames] = value;
        }
#elif __PYX_LIMITED_VERSION_HEX >= 0x030d0000
        int found = PyDict_GetItemRef(kwds2, key, &value);
        if (found) {
            if (unlikely(found < 0)) goto bad;
            values[name-argnames] = value;
            if (unlikely(PyDict_DelItem(kwds2, key) < 0)) goto bad;
        }
#else
    #if CYTHON_COMPILING_IN_CPYTHON
        value = _PyDict_Pop(kwds2, key, kwds2);
    #else
        value = __Pyx_CallUnboundCMethod2(&__pyx_mstate_global->__pyx_umethod_PyDict_Type_pop, kwds2, key, kwds2);
    #endif
        if (value == kwds2) {
            Py_DECREF(value);
        } else {
            if (unlikely(!value)) goto bad;
            values[name-argnames] = value;
        }
#endif
        name++;
    }
    len = PyDict_Size(kwds2);
    if (len > 0) {
        return __Pyx_ValidateDuplicatePosArgs(kwds, argnames, first_kw_arg, function_name);
    } else if (unlikely(len == -1)) {
        goto bad;
    }
    return 0;
bad:
    return -1;
}
static int __Pyx_ParseKeywordsTuple(
    PyObject *kwds,
    PyObject * const *kwvalues,
    PyObject ** const argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs)
{
    PyObject *key = NULL;
    PyObject** const * name;
    PyObject** const *first_kw_arg = argnames + num_pos_args;
    for (Py_ssize_t pos = 0; pos < num_kwargs; pos++) {
#if CYTHON_AVOID_BORROWED_REFS
        key = __Pyx_PySequence_ITEM(kwds, pos);
#else
        key = __Pyx_PyTuple_GET_ITEM(kwds, pos);
#endif
#if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(!key)) goto bad;
#endif
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            PyObject *value = kwvalues[pos];
            values[name-argnames] = __Pyx_NewRef(value);
        } else {
            size_t index_found = 0;
            int cmp = __Pyx_MatchKeywordArg(key, argnames, first_kw_arg, &index_found, function_name);
            if (cmp == 1) {
                PyObject *value = kwvalues[pos];
                values[index_found] = __Pyx_NewRef(value);
            } else {
                if (unlikely(cmp == -1)) goto bad;
                if (kwds2) {
                    PyObject *value = kwvalues[pos];
                    if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
                } else if (!ignore_unknown_kwargs) {
                    goto invalid_keyword;
                }
            }
        }
        #if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(key);
        key = NULL;
        #endif
    }
    return 0;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    goto bad;
bad:
    #if CYTHON_AVOID_BORROWED_REFS
    Py_XDECREF(key);
    #endif
    return -1;
}
static int __Pyx_ParseKeywords(
    PyObject *kwds,
    PyObject * const *kwvalues,
    PyObject ** const argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    Py_ssize_t num_kwargs,
    const char* function_name,
    int ignore_unknown_kwargs)
{
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds)))
        return __Pyx_ParseKeywordsTuple(kwds, kwvalues, argnames, kwds2, values, num_pos_args, num_kwargs, function_name, ignore_unknown_kwargs);
    else if (kwds2)
        return __Pyx_ParseKeywordDictToDict(kwds, argnames, kwds2, values, num_pos_args, function_name);
    else
        return __Pyx_ParseKeywordDict(kwds, argnames, values, num_pos_args, num_kwargs, function_name, ignore_unknown_kwargs);
}

/* RaiseArgTupleInvalid */
static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* PyObjectSetAttrStr */
#if CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
    return PyObject_SetAttr(obj, attr_name, value);
}
#endif

/* PyDictVersioning */
#if CYTHON_USE_DICT_VERSIONS && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PY_UINT64_T __Pyx_get_tp_dict_version(PyObject *obj) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    return likely(dict) ? __PYX_GET_DICT_VERSION(dict) : 0;
}
static CYTHON_INLINE PY_UINT64_T __Pyx_get_object_dict_version(PyObject *obj) {
    PyObject **dictptr = NULL;
    Py_ssize_t offset = Py_TYPE(obj)->tp_dictoffset;
    if (offset) {
#if CYTHON_COMPILING_IN_CPYTHON
        dictptr = (likely(offset > 0)) ? (PyObject **) ((char *)obj + offset) : _PyObject_GetDictPtr(obj);
#else
        dictptr = _PyObject_GetDictPtr(obj);
#endif
    }
    return (dictptr && *dictptr) ? __PYX_GET_DICT_VERSION(*dictptr) : 0;
}
static CYTHON_INLINE int __Pyx_object_dict_version_matches(PyObject* obj, PY_UINT64_T tp_dict_version, PY_UINT64_T obj_dict_version) {
    PyObject *dict = Py_TYPE(obj)->tp_dict;
    if (unlikely(!dict) || unlikely(tp_dict_version != __PYX_GET_DICT_VERSION(dict)))
        return 0;
    return obj_dict_version == __Pyx_get_object_dict_version(obj);
}
#endif

/* GetModuleGlobalName */
#if CYTHON_USE_DICT_VERSIONS
static PyObject *__Pyx__GetModuleGlobalName(PyObject *name, PY_UINT64_T *dict_version, PyObject **dict_cached_value)
#else
static CYTHON_INLINE PyObject *__Pyx__GetModuleGlobalName(PyObject *name)
#endif
{
    PyObject *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(!__pyx_m)) {
        if (!PyErr_Occurred())
            PyErr_SetNone(PyExc_NameError);
        return NULL;
    }
    result = PyObject_GetAttr(__pyx_m, name);
    if (likely(result)) {
        return result;
    }
    PyErr_Clear();
#elif CYTHON_AVOID_BORROWED_REFS || CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    if (unlikely(__Pyx_PyDict_GetItemRef(__pyx_mstate_global->__pyx_d, name, &result) == -1)) PyErr_Clear();
    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return result;
    }
#else
    result = _PyDict_GetItem_KnownHash(__pyx_mstate_global->__pyx_d, name, ((PyASCIIObject *) name)->hash);
    __PYX_UPDATE_DICT_CACHE(__pyx_mstate_global->__pyx_d, result, *dict_cached_value, *dict_version)
    if (likely(result)) {
        return __Pyx_NewRef(result);
    }
    PyErr_Clear();
#endif
    return __Pyx_GetBuiltinName(name);
}

/* RaiseException */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
    if (cause) {
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if PY_VERSION_HEX >= 0x030C00A6
        PyException_SetTraceback(value, tb);
#elif CYTHON_FAST_THREAD_STATE
        PyThreadState *tstate = __Pyx_PyThreadState_Current;
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#else
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}

/* PyObjectFastCallMethod */
#if !CYTHON_VECTORCALL || PY_VERSION_HEX < 0x03090000
static PyObject *__Pyx_PyObject_FastCallMethod(PyObject *name, PyObject *const *args, size_t nargsf) {
    PyObject *result;
    PyObject *attr = PyObject_GetAttr(args[0], name);
    if (unlikely(!attr))
        return NULL;
    result = __Pyx_PyObject_FastCall(attr, args+1, nargsf - 1);
    Py_DECREF(attr);
    return result;
}
#endif

/* RejectKeywords */
static void __Pyx_RejectKeywords(const char* function_name, PyObject *kwds) {
    PyObject *key = NULL;
    if (CYTHON_METH_FASTCALL && likely(PyTuple_Check(kwds))) {
        key = __Pyx_PySequence_ITEM(kwds, 0);
    } else {
        Py_ssize_t pos = 0;
#if !CYTHON_COMPILING_IN_PYPY || defined(PyArg_ValidateKeywordArguments)
        if (unlikely(!PyArg_ValidateKeywordArguments(kwds))) return;
#endif
        PyDict_Next(kwds, &pos, &key, NULL);
        Py_INCREF(key);
    }
    if (likely(key)) {
        PyErr_Format(PyExc_TypeError,
            "%s() got an unexpected keyword argument '%U'",
            function_name, key);
        Py_DECREF(key);
    }
}

/* PyObjectVectorCallKwBuilder */
#if CYTHON_VECTORCALL
static int __Pyx_VectorcallBuilder_AddArg(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    (void)__Pyx_PyObject_FastCallDict;
    if (__Pyx_PyTuple_SET_ITEM(builder, n, key) != (0)) return -1;
    Py_INCREF(key);
    args[n] = value;
    return 0;
}
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    (void)__Pyx_VectorcallBuilder_AddArgStr;
    if (unlikely(!PyUnicode_Check(key))) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        return -1;
    }
    return __Pyx_VectorcallBuilder_AddArg(key, value, builder, args, n);
}
static int __Pyx_VectorcallBuilder_AddArgStr(const char *key, PyObject *value, PyObject *builder, PyObject **args, int n) {
    PyObject *pyKey = PyUnicode_FromString(key);
    if (!pyKey) return -1;
    return __Pyx_VectorcallBuilder_AddArg(pyKey, value, builder, args, n);
}
#else // CYTHON_VECTORCALL
CYTHON_UNUSED static int __Pyx_VectorcallBuilder_AddArg_Check(PyObject *key, PyObject *value, PyObject *builder, CYTHON_UNUSED PyObject **args, CYTHON_UNUSED int n) {
    if (unlikely(!PyUnicode_Check(key))) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        return -1;
    }
    return PyDict_SetItem(builder, key, value);
}
#endif

/* ArgTypeTest */
static int __Pyx__ArgTypeTest(PyObject *obj, PyTypeObject *type, const char *name, int exact)
{
    __Pyx_TypeName type_name;
    __Pyx_TypeName obj_type_name;
    PyObject *extra_info = __pyx_mstate_global->__pyx_empty_unicode;
    int from_annotation_subclass = 0;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    else if (!exact) {
        if (likely(__Pyx_TypeCheck(obj, type))) return 1;
    } else if (exact == 2) {
        if (__Pyx_TypeCheck(obj, type)) {
            from_annotation_subclass = 1;
            extra_info = __pyx_mstate_global->__pyx_kp_u_Note_that_Cython_is_deliberately;
        }
    }
    type_name = __Pyx_PyType_GetFullyQualifiedName(type);
    obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected " __Pyx_FMT_TYPENAME
        ", got " __Pyx_FMT_TYPENAME ")"
#if __PYX_LIMITED_VERSION_HEX < 0x030C0000
        "%s%U"
#endif
        , name, type_name, obj_type_name
#if __PYX_LIMITED_VERSION_HEX < 0x030C0000
        , (from_annotation_subclass ? ". " : ""), extra_info
#endif
        );
#if __PYX_LIMITED_VERSION_HEX >= 0x030C0000
    if (exact == 2 && from_annotation_subclass) {
        PyObject *res;
        PyObject *vargs[2];
        vargs[0] = PyErr_GetRaisedException();
        vargs[1] = extra_info;
        res = PyObject_VectorcallMethod(__pyx_mstate_global->__pyx_kp_u_add_note, vargs, 2, NULL);
        Py_XDECREF(res);
        PyErr_SetRaisedException(vargs[0]);
    }
#endif
    __Pyx_DECREF_TypeName(type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    return 0;
}

/* GetItemInt */
static PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (unlikely(!j)) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS && !CYTHON_AVOID_THREAD_UNSAFE_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyList_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS
    Py_ssize_t wrapped_i = i;
    if (wraparound & unlikely(i < 0)) {
        wrapped_i += PyTuple_GET_SIZE(o);
    }
    if ((!boundscheck) || likely(__Pyx_is_valid_index(wrapped_i, PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, wrapped_i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE && !CYTHON_AVOID_BORROWED_REFS && CYTHON_USE_TYPE_SLOTS
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely(__Pyx_is_valid_index(n, PyList_GET_SIZE(o))))) {
            return __Pyx_PyList_GetItemRef(o, n);
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely(__Pyx_is_valid_index(n, PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PyMappingMethods *mm = Py_TYPE(o)->tp_as_mapping;
        PySequenceMethods *sm = Py_TYPE(o)->tp_as_sequence;
        if (mm && mm->mp_subscript) {
            PyObject *r, *key = PyLong_FromSsize_t(i);
            if (unlikely(!key)) return NULL;
            r = mm->mp_subscript(o, key);
            Py_DECREF(key);
            return r;
        }
        if (likely(sm && sm->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(sm->sq_length)) {
                Py_ssize_t l = sm->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return sm->sq_item(o, i);
        }
    }
#else
    if (is_list || !PyMapping_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyLong_FromSsize_t(i));
}

/* ExtTypeTest */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    __Pyx_TypeName obj_type_name;
    __Pyx_TypeName type_name;
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(__Pyx_TypeCheck(obj, type)))
        return 1;
    obj_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(obj));
    type_name = __Pyx_PyType_GetFullyQualifiedName(type);
    PyErr_Format(PyExc_TypeError,
                 "Cannot convert " __Pyx_FMT_TYPENAME " to " __Pyx_FMT_TYPENAME,
                 obj_type_name, type_name);
    __Pyx_DECREF_TypeName(obj_type_name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
}

/* decode_c_bytes */
static CYTHON_INLINE PyObject* __Pyx_decode_c_bytes(
         const char* cstring, Py_ssize_t length, Py_ssize_t start, Py_ssize_t stop,
         const char* encoding, const char* errors,
         PyObject* (*decode_func)(const char *s, Py_ssize_t size, const char *errors)) {
    if (unlikely((start < 0) | (stop < 0))) {
        if (start < 0) {
            start += length;
            if (start < 0)
                start = 0;
        }
        if (stop < 0)
            stop += length;
    }
    if (stop > length)
        stop = length;
    if (unlikely(stop <= start))
        return __Pyx_NewRef(__pyx_mstate_global->__pyx_empty_unicode);
    length = stop - start;
    cstring += start;
    if (decode_func) {
        return decode_func(cstring, length, errors);
    } else {
        return PyUnicode_Decode(cstring, length, encoding, errors);
    }
}

/* RaiseKeywordRequired */
static void __Pyx_RaiseKeywordRequired(const char* func_name, PyObject* kw_name) {
    PyErr_Format(PyExc_TypeError,
        "%s() needs keyword-only argument %U", func_name, kw_name);
}

/* SetPackagePathFromImportLib */
#if !CYTHON_PEP489_MULTI_PHASE_INIT
static int __Pyx_SetPackagePathFromImportLib(PyObject *module_name) {
    PyObject *importlib, *osmod, *ossep, *parts, *package_path;
    PyObject *file_path = NULL;
    PyObject *item;
    int result;
    PyObject *spec;
    importlib = PyImport_ImportModule("importlib.util");
    if (unlikely(!importlib))
        goto bad;
    spec = PyObject_CallMethod(importlib, "find_spec", "(O)", module_name);
    Py_DECREF(importlib);
    if (unlikely(!spec))
        goto bad;
    file_path = PyObject_GetAttrString(spec, "origin");
    Py_DECREF(spec);
    if (unlikely(!file_path))
        goto bad;
    if (unlikely(PyObject_SetAttrString(__pyx_m, "__file__", file_path) < 0))
        goto bad;
    osmod = PyImport_ImportModule("os");
    if (unlikely(!osmod))
        goto bad;
    ossep = PyObject_GetAttrString(osmod, "sep");
    Py_DECREF(osmod);
    if (unlikely(!ossep))
        goto bad;
    parts = PyObject_CallMethod(file_path, "rsplit", "(Oi)", ossep, 1);
    Py_DECREF(file_path); file_path = NULL;
    Py_DECREF(ossep);
    if (unlikely(!parts))
        goto bad;
#if CYTHON_ASSUME_SAFE_MACROS
    package_path = Py_BuildValue("[O]", PyList_GET_ITEM(parts, 0));
#else
    item = PyList_GetItem(parts, 0);
    if (unlikely(!item))
        goto bad;
    package_path = Py_BuildValue("[O]", item);
#endif
    Py_DECREF(parts);
    if (unlikely(!package_path))
        goto bad;
    goto set_path;
bad:
    PyErr_WriteUnraisable(module_name);
    Py_XDECREF(file_path);
    PyErr_Clear();
    package_path = PyList_New(0);
    if (unlikely(!package_path))
        return -1;
set_path:
    result = PyObject_SetAttrString(__pyx_m, "__path__", package_path);
    Py_DECREF(package_path);
    return result;
}
#endif

/* LimitedApiGetTypeDict */
#if CYTHON_COMPILING_IN_LIMITED_API
static Py_ssize_t __Pyx_GetTypeDictOffset(void) {
    PyObject *tp_dictoffset_o;
    Py_ssize_t tp_dictoffset;
    tp_dictoffset_o = PyObject_GetAttrString((PyObject*)(&PyType_Type), "__dictoffset__");
    if (unlikely(!tp_dictoffset_o)) return -1;
    tp_dictoffset = PyLong_AsSsize_t(tp_dictoffset_o);
    Py_DECREF(tp_dictoffset_o);
    if (unlikely(tp_dictoffset == 0)) {
        PyErr_SetString(
            PyExc_TypeError,
            "'type' doesn't have a dictoffset");
        return -1;
    } else if (unlikely(tp_dictoffset < 0)) {
        PyErr_SetString(
            PyExc_TypeError,
            "'type' has an unexpected negative dictoffset. "
            "Please report this as Cython bug");
        return -1;
    }
    return tp_dictoffset;
}
static PyObject *__Pyx_GetTypeDict(PyTypeObject *tp) {
    static Py_ssize_t tp_dictoffset = 0;
    if (unlikely(tp_dictoffset == 0)) {
        tp_dictoffset = __Pyx_GetTypeDictOffset();
        if (unlikely(tp_dictoffset == -1 && PyErr_Occurred())) {
            tp_dictoffset = 0; // try again next time?
            return NULL;
        }
    }
    return *(PyObject**)((char*)tp + tp_dictoffset);
}
#endif

/* SetItemOnTypeDict */
static int __Pyx__SetItemOnTypeDict(PyTypeObject *tp, PyObject *k, PyObject *v) {
    int result;
    PyObject *tp_dict;
#if CYTHON_COMPILING_IN_LIMITED_API
    tp_dict = __Pyx_GetTypeDict(tp);
    if (unlikely(!tp_dict)) return -1;
#else
    tp_dict = tp->tp_dict;
#endif
    result = PyDict_SetItem(tp_dict, k, v);
    if (likely(!result)) {
        PyType_Modified(tp);
        if (unlikely(PyObject_HasAttr(v, __pyx_mstate_global->__pyx_n_u_set_name))) {
            PyObject *setNameResult = PyObject_CallMethodObjArgs(v, __pyx_mstate_global->__pyx_n_u_set_name,  (PyObject *) tp, k, NULL);
            if (!setNameResult) return -1;
            Py_DECREF(setNameResult);
        }
    }
    return result;
}

/* FixUpExtensionType */
static int __Pyx_fix_up_extension_type_from_spec(PyType_Spec *spec, PyTypeObject *type) {
#if __PYX_LIMITED_VERSION_HEX > 0x030900B1
    CYTHON_UNUSED_VAR(spec);
    CYTHON_UNUSED_VAR(type);
    CYTHON_UNUSED_VAR(__Pyx__SetItemOnTypeDict);
#else
    const PyType_Slot *slot = spec->slots;
    int changed = 0;
#if !CYTHON_COMPILING_IN_LIMITED_API
    while (slot && slot->slot && slot->slot != Py_tp_members)
        slot++;
    if (slot && slot->slot == Py_tp_members) {
#if !CYTHON_COMPILING_IN_CPYTHON
        const
#endif  // !CYTHON_COMPILING_IN_CPYTHON)
            PyMemberDef *memb = (PyMemberDef*) slot->pfunc;
        while (memb && memb->name) {
            if (memb->name[0] == '_' && memb->name[1] == '_') {
                if (strcmp(memb->name, "__weaklistoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_weaklistoffset = memb->offset;
                    changed = 1;
                }
                else if (strcmp(memb->name, "__dictoffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
                    type->tp_dictoffset = memb->offset;
                    changed = 1;
                }
#if CYTHON_METH_FASTCALL
                else if (strcmp(memb->name, "__vectorcalloffset__") == 0) {
                    assert(memb->type == T_PYSSIZET);
                    assert(memb->flags == READONLY);
#if PY_VERSION_HEX >= 0x030800b4
                    type->tp_vectorcall_offset = memb->offset;
#else
                    type->tp_print = (printfunc) memb->offset;
#endif
                    changed = 1;
                }
#endif  // CYTHON_METH_FASTCALL
#if !CYTHON_COMPILING_IN_PYPY
                else if (strcmp(memb->name, "__module__") == 0) {
                    PyObject *descr;
                    assert(memb->type == T_OBJECT);
                    assert(memb->flags == 0 || memb->flags == READONLY);
                    descr = PyDescr_NewMember(type, memb);
                    if (unlikely(!descr))
                        return -1;
                    int set_item_result = PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr);
                    Py_DECREF(descr);
                    if (unlikely(set_item_result < 0)) {
                        return -1;
                    }
                    changed = 1;
                }
#endif  // !CYTHON_COMPILING_IN_PYPY
            }
            memb++;
        }
    }
#endif  // !CYTHON_COMPILING_IN_LIMITED_API
#if !CYTHON_COMPILING_IN_PYPY
    slot = spec->slots;
    while (slot && slot->slot && slot->slot != Py_tp_getset)
        slot++;
    if (slot && slot->slot == Py_tp_getset) {
        PyGetSetDef *getset = (PyGetSetDef*) slot->pfunc;
        while (getset && getset->name) {
            if (getset->name[0] == '_' && getset->name[1] == '_' && strcmp(getset->name, "__module__") == 0) {
                PyObject *descr = PyDescr_NewGetSet(type, getset);
                if (unlikely(!descr))
                    return -1;
                #if CYTHON_COMPILING_IN_LIMITED_API
                PyObject *pyname = PyUnicode_FromString(getset->name);
                if (unlikely(!pyname)) {
                    Py_DECREF(descr);
                    return -1;
                }
                int set_item_result = __Pyx_SetItemOnTypeDict(type, pyname, descr);
                Py_DECREF(pyname);
                #else
                CYTHON_UNUSED_VAR(__Pyx__SetItemOnTypeDict);
                int set_item_result = PyDict_SetItem(type->tp_dict, PyDescr_NAME(descr), descr);
                #endif
                Py_DECREF(descr);
                if (unlikely(set_item_result < 0)) {
                    return -1;
                }
                changed = 1;
            }
            ++getset;
        }
    }
#endif  // !CYTHON_COMPILING_IN_PYPY
    if (changed)
        PyType_Modified(type);
#endif  // PY_VERSION_HEX > 0x030900B1
    return 0;
}

/* PyObjectCallNoArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
    PyObject *arg[2] = {NULL, NULL};
    return __Pyx_PyObject_FastCall(func, arg + 1, 0 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectCallOneArg */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *args[2] = {NULL, arg};
    return __Pyx_PyObject_FastCall(func, args+1, 1 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectGetMethod */
static int __Pyx_PyObject_GetMethod(PyObject *obj, PyObject *name, PyObject **method) {
    PyObject *attr;
#if CYTHON_UNPACK_METHODS && CYTHON_COMPILING_IN_CPYTHON && CYTHON_USE_PYTYPE_LOOKUP
    __Pyx_TypeName type_name;
    PyTypeObject *tp = Py_TYPE(obj);
    PyObject *descr;
    descrgetfunc f = NULL;
    PyObject **dictptr, *dict;
    int meth_found = 0;
    assert (*method == NULL);
    if (unlikely(tp->tp_getattro != PyObject_GenericGetAttr)) {
        attr = __Pyx_PyObject_GetAttrStr(obj, name);
        goto try_unpack;
    }
    if (unlikely(tp->tp_dict == NULL) && unlikely(PyType_Ready(tp) < 0)) {
        return 0;
    }
    descr = _PyType_Lookup(tp, name);
    if (likely(descr != NULL)) {
        Py_INCREF(descr);
#if defined(Py_TPFLAGS_METHOD_DESCRIPTOR) && Py_TPFLAGS_METHOD_DESCRIPTOR
        if (__Pyx_PyType_HasFeature(Py_TYPE(descr), Py_TPFLAGS_METHOD_DESCRIPTOR))
#else
        #ifdef __Pyx_CyFunction_USED
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type) || __Pyx_CyFunction_Check(descr)))
        #else
        if (likely(PyFunction_Check(descr) || __Pyx_IS_TYPE(descr, &PyMethodDescr_Type)))
        #endif
#endif
        {
            meth_found = 1;
        } else {
            f = Py_TYPE(descr)->tp_descr_get;
            if (f != NULL && PyDescr_IsData(descr)) {
                attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
                Py_DECREF(descr);
                goto try_unpack;
            }
        }
    }
    dictptr = _PyObject_GetDictPtr(obj);
    if (dictptr != NULL && (dict = *dictptr) != NULL) {
        Py_INCREF(dict);
        attr = __Pyx_PyDict_GetItemStr(dict, name);
        if (attr != NULL) {
            Py_INCREF(attr);
            Py_DECREF(dict);
            Py_XDECREF(descr);
            goto try_unpack;
        }
        Py_DECREF(dict);
    }
    if (meth_found) {
        *method = descr;
        return 1;
    }
    if (f != NULL) {
        attr = f(descr, obj, (PyObject *)Py_TYPE(obj));
        Py_DECREF(descr);
        goto try_unpack;
    }
    if (likely(descr != NULL)) {
        *method = descr;
        return 0;
    }
    type_name = __Pyx_PyType_GetFullyQualifiedName(tp);
    PyErr_Format(PyExc_AttributeError,
                 "'" __Pyx_FMT_TYPENAME "' object has no attribute '%U'",
                 type_name, name);
    __Pyx_DECREF_TypeName(type_name);
    return 0;
#else
    attr = __Pyx_PyObject_GetAttrStr(obj, name);
    goto try_unpack;
#endif
try_unpack:
#if CYTHON_UNPACK_METHODS
    if (likely(attr) && PyMethod_Check(attr) && likely(PyMethod_GET_SELF(attr) == obj)) {
        PyObject *function = PyMethod_GET_FUNCTION(attr);
        Py_INCREF(function);
        Py_DECREF(attr);
        *method = function;
        return 1;
    }
#endif
    *method = attr;
    return 0;
}

/* PyObjectCallMethod0 */
static PyObject* __Pyx_PyObject_CallMethod0(PyObject* obj, PyObject* method_name) {
#if CYTHON_VECTORCALL && (__PYX_LIMITED_VERSION_HEX >= 0x030C0000 || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x03090000))
    PyObject *args[1] = {obj};
    (void) __Pyx_PyObject_GetMethod;
    (void) __Pyx_PyObject_CallOneArg;
    (void) __Pyx_PyObject_CallNoArg;
    return PyObject_VectorcallMethod(method_name, args, 1 | PY_VECTORCALL_ARGUMENTS_OFFSET, NULL);
#else
    PyObject *method = NULL, *result = NULL;
    int is_method = __Pyx_PyObject_GetMethod(obj, method_name, &method);
    if (likely(is_method)) {
        result = __Pyx_PyObject_CallOneArg(method, obj);
        Py_DECREF(method);
        return result;
    }
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_CallNoArg(method);
    Py_DECREF(method);
bad:
    return result;
#endif
}

/* ValidateBasesTuple */
#if CYTHON_COMPILING_IN_CPYTHON || CYTHON_COMPILING_IN_LIMITED_API || CYTHON_USE_TYPE_SPECS
static int __Pyx_validate_bases_tuple(const char *type_name, Py_ssize_t dictoffset, PyObject *bases) {
    Py_ssize_t i, n;
#if CYTHON_ASSUME_SAFE_SIZE
    n = PyTuple_GET_SIZE(bases);
#else
    n = PyTuple_Size(bases);
    if (unlikely(n < 0)) return -1;
#endif
    for (i = 1; i < n; i++)
    {
        PyTypeObject *b;
#if CYTHON_AVOID_BORROWED_REFS
        PyObject *b0 = PySequence_GetItem(bases, i);
        if (!b0) return -1;
#elif CYTHON_ASSUME_SAFE_MACROS
        PyObject *b0 = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *b0 = PyTuple_GetItem(bases, i);
        if (!b0) return -1;
#endif
        b = (PyTypeObject*) b0;
        if (!__Pyx_PyType_HasFeature(b, Py_TPFLAGS_HEAPTYPE))
        {
            __Pyx_TypeName b_name = __Pyx_PyType_GetFullyQualifiedName(b);
            PyErr_Format(PyExc_TypeError,
                "base class '" __Pyx_FMT_TYPENAME "' is not a heap type", b_name);
            __Pyx_DECREF_TypeName(b_name);
#if CYTHON_AVOID_BORROWED_REFS
            Py_DECREF(b0);
#endif
            return -1;
        }
        if (dictoffset == 0)
        {
            Py_ssize_t b_dictoffset = 0;
#if CYTHON_USE_TYPE_SLOTS
            b_dictoffset = b->tp_dictoffset;
#else
            PyObject *py_b_dictoffset = PyObject_GetAttrString((PyObject*)b, "__dictoffset__");
            if (!py_b_dictoffset) goto dictoffset_return;
            b_dictoffset = PyLong_AsSsize_t(py_b_dictoffset);
            Py_DECREF(py_b_dictoffset);
            if (b_dictoffset == -1 && PyErr_Occurred()) goto dictoffset_return;
#endif
            if (b_dictoffset) {
                {
                    __Pyx_TypeName b_name = __Pyx_PyType_GetFullyQualifiedName(b);
                    PyErr_Format(PyExc_TypeError,
                        "extension type '%.200s' has no __dict__ slot, "
                        "but base type '" __Pyx_FMT_TYPENAME "' has: "
                        "either add 'cdef dict __dict__' to the extension type "
                        "or add '__slots__ = [...]' to the base type",
                        type_name, b_name);
                    __Pyx_DECREF_TypeName(b_name);
                }
#if !CYTHON_USE_TYPE_SLOTS
              dictoffset_return:
#endif
#if CYTHON_AVOID_BORROWED_REFS
                Py_DECREF(b0);
#endif
                return -1;
            }
        }
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(b0);
#endif
    }
    return 0;
}
#endif

/* PyType_Ready */
CYTHON_UNUSED static int __Pyx_PyType_HasMultipleInheritance(PyTypeObject *t) {
    while (t) {
        PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
        if (bases) {
            return 1;
        }
        t = __Pyx_PyType_GetSlot(t, tp_base, PyTypeObject*);
    }
    return 0;
}
static int __Pyx_PyType_Ready(PyTypeObject *t) {
#if CYTHON_USE_TYPE_SPECS || !CYTHON_COMPILING_IN_CPYTHON || defined(PYSTON_MAJOR_VERSION)
    (void)__Pyx_PyObject_CallMethod0;
#if CYTHON_USE_TYPE_SPECS
    (void)__Pyx_validate_bases_tuple;
#endif
    return PyType_Ready(t);
#else
    int r;
    if (!__Pyx_PyType_HasMultipleInheritance(t)) {
        return PyType_Ready(t);
    }
    PyObject *bases = __Pyx_PyType_GetSlot(t, tp_bases, PyObject*);
    if (bases && unlikely(__Pyx_validate_bases_tuple(t->tp_name, t->tp_dictoffset, bases) == -1))
        return -1;
#if !defined(PYSTON_MAJOR_VERSION)
    {
        int gc_was_enabled;
    #if PY_VERSION_HEX >= 0x030A00b1
        gc_was_enabled = PyGC_Disable();
        (void)__Pyx_PyObject_CallMethod0;
    #else
        PyObject *ret, *py_status;
        PyObject *gc = NULL;
        #if (!CYTHON_COMPILING_IN_PYPY || PYPY_VERSION_NUM+0 >= 0x07030400) &&\
                !CYTHON_COMPILING_IN_GRAAL
        gc = PyImport_GetModule(__pyx_mstate_global->__pyx_kp_u_gc);
        #endif
        if (unlikely(!gc)) gc = PyImport_Import(__pyx_mstate_global->__pyx_kp_u_gc);
        if (unlikely(!gc)) return -1;
        py_status = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_isenabled);
        if (unlikely(!py_status)) {
            Py_DECREF(gc);
            return -1;
        }
        gc_was_enabled = __Pyx_PyObject_IsTrue(py_status);
        Py_DECREF(py_status);
        if (gc_was_enabled > 0) {
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_disable);
            if (unlikely(!ret)) {
                Py_DECREF(gc);
                return -1;
            }
            Py_DECREF(ret);
        } else if (unlikely(gc_was_enabled == -1)) {
            Py_DECREF(gc);
            return -1;
        }
    #endif
        t->tp_flags |= Py_TPFLAGS_HEAPTYPE;
#if PY_VERSION_HEX >= 0x030A0000
        t->tp_flags |= Py_TPFLAGS_IMMUTABLETYPE;
#endif
#else
        (void)__Pyx_PyObject_CallMethod0;
#endif
    r = PyType_Ready(t);
#if !defined(PYSTON_MAJOR_VERSION)
        t->tp_flags &= ~Py_TPFLAGS_HEAPTYPE;
    #if PY_VERSION_HEX >= 0x030A00b1
        if (gc_was_enabled)
            PyGC_Enable();
    #else
        if (gc_was_enabled) {
            PyObject *tp, *v, *tb;
            PyErr_Fetch(&tp, &v, &tb);
            ret = __Pyx_PyObject_CallMethod0(gc, __pyx_mstate_global->__pyx_kp_u_enable);
            if (likely(ret || r == -1)) {
                Py_XDECREF(ret);
                PyErr_Restore(tp, v, tb);
            } else {
                Py_XDECREF(tp);
                Py_XDECREF(v);
                Py_XDECREF(tb);
                r = -1;
            }
        }
        Py_DECREF(gc);
    #endif
    }
#endif
    return r;
#endif
}

/* SetVTable */
static int __Pyx_SetVtable(PyTypeObject *type, void *vtable) {
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
    if (unlikely(!ob))
        goto bad;
#if CYTHON_COMPILING_IN_LIMITED_API
    if (unlikely(PyObject_SetAttr((PyObject *) type, __pyx_mstate_global->__pyx_n_u_pyx_vtable, ob) < 0))
#else
    if (unlikely(PyDict_SetItem(type->tp_dict, __pyx_mstate_global->__pyx_n_u_pyx_vtable, ob) < 0))
#endif
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

/* GetVTable */
static void* __Pyx_GetVtable(PyTypeObject *type) {
    void* ptr;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *ob = PyObject_GetAttr((PyObject *)type, __pyx_mstate_global->__pyx_n_u_pyx_vtable);
#else
    PyObject *ob = PyObject_GetItem(type->tp_dict, __pyx_mstate_global->__pyx_n_u_pyx_vtable);
#endif
    if (!ob)
        goto bad;
    ptr = PyCapsule_GetPointer(ob, 0);
    if (!ptr && !PyErr_Occurred())
        PyErr_SetString(PyExc_RuntimeError, "invalid vtable found for imported type");
    Py_DECREF(ob);
    return ptr;
bad:
    Py_XDECREF(ob);
    return NULL;
}

/* MergeVTables */
static int __Pyx_MergeVtables(PyTypeObject *type) {
    int i=0;
    Py_ssize_t size;
    void** base_vtables;
    __Pyx_TypeName tp_base_name = NULL;
    __Pyx_TypeName base_name = NULL;
    void* unknown = (void*)-1;
    PyObject* bases = __Pyx_PyType_GetSlot(type, tp_bases, PyObject*);
    int base_depth = 0;
    {
        PyTypeObject* base = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
        while (base) {
            base_depth += 1;
            base = __Pyx_PyType_GetSlot(base, tp_base, PyTypeObject*);
        }
    }
    base_vtables = (void**) PyMem_Malloc(sizeof(void*) * (size_t)(base_depth + 1));
    base_vtables[0] = unknown;
#if CYTHON_COMPILING_IN_LIMITED_API
    size = PyTuple_Size(bases);
    if (size < 0) goto other_failure;
#else
    size = PyTuple_GET_SIZE(bases);
#endif
    for (i = 1; i < size; i++) {
        PyObject *basei;
        void* base_vtable;
#if CYTHON_AVOID_BORROWED_REFS
        basei = PySequence_GetItem(bases, i);
        if (unlikely(!basei)) goto other_failure;
#elif !CYTHON_ASSUME_SAFE_MACROS
        basei = PyTuple_GetItem(bases, i);
        if (unlikely(!basei)) goto other_failure;
#else
        basei = PyTuple_GET_ITEM(bases, i);
#endif
        base_vtable = __Pyx_GetVtable((PyTypeObject*)basei);
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(basei);
#endif
        if (base_vtable != NULL) {
            int j;
            PyTypeObject* base = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
            for (j = 0; j < base_depth; j++) {
                if (base_vtables[j] == unknown) {
                    base_vtables[j] = __Pyx_GetVtable(base);
                    base_vtables[j + 1] = unknown;
                }
                if (base_vtables[j] == base_vtable) {
                    break;
                } else if (base_vtables[j] == NULL) {
                    goto bad;
                }
                base = __Pyx_PyType_GetSlot(base, tp_base, PyTypeObject*);
            }
        }
    }
    PyErr_Clear();
    PyMem_Free(base_vtables);
    return 0;
bad:
    {
        PyTypeObject* basei = NULL;
        PyTypeObject* tp_base = __Pyx_PyType_GetSlot(type, tp_base, PyTypeObject*);
        tp_base_name = __Pyx_PyType_GetFullyQualifiedName(tp_base);
#if CYTHON_AVOID_BORROWED_REFS
        basei = (PyTypeObject*)PySequence_GetItem(bases, i);
        if (unlikely(!basei)) goto really_bad;
#elif !CYTHON_ASSUME_SAFE_MACROS
        basei = (PyTypeObject*)PyTuple_GetItem(bases, i);
        if (unlikely(!basei)) goto really_bad;
#else
        basei = (PyTypeObject*)PyTuple_GET_ITEM(bases, i);
#endif
        base_name = __Pyx_PyType_GetFullyQualifiedName(basei);
#if CYTHON_AVOID_BORROWED_REFS
        Py_DECREF(basei);
#endif
    }
    PyErr_Format(PyExc_TypeError,
        "multiple bases have vtable conflict: '" __Pyx_FMT_TYPENAME "' and '" __Pyx_FMT_TYPENAME "'", tp_base_name, base_name);
#if CYTHON_AVOID_BORROWED_REFS || !CYTHON_ASSUME_SAFE_MACROS
really_bad: // bad has failed!
#endif
    __Pyx_DECREF_TypeName(tp_base_name);
    __Pyx_DECREF_TypeName(base_name);
#if CYTHON_COMPILING_IN_LIMITED_API || CYTHON_AVOID_BORROWED_REFS || !CYTHON_ASSUME_SAFE_MACROS
other_failure:
#endif
    PyMem_Free(base_vtables);
    return -1;
}

/* DelItemOnTypeDict */
static int __Pyx__DelItemOnTypeDict(PyTypeObject *tp, PyObject *k) {
    int result;
    PyObject *tp_dict;
#if CYTHON_COMPILING_IN_LIMITED_API
    tp_dict = __Pyx_GetTypeDict(tp);
    if (unlikely(!tp_dict)) return -1;
#else
    tp_dict = tp->tp_dict;
#endif
    result = PyDict_DelItem(tp_dict, k);
    if (likely(!result)) PyType_Modified(tp);
    return result;
}

/* SetupReduce */
static int __Pyx_setup_reduce_is_named(PyObject* meth, PyObject* name) {
  int ret;
  PyObject *name_attr;
  name_attr = __Pyx_PyObject_GetAttrStrNoError(meth, __pyx_mstate_global->__pyx_n_u_name_2);
  if (likely(name_attr)) {
      ret = PyObject_RichCompareBool(name_attr, name, Py_EQ);
  } else {
      ret = -1;
  }
  if (unlikely(ret < 0)) {
      PyErr_Clear();
      ret = 0;
  }
  Py_XDECREF(name_attr);
  return ret;
}
static int __Pyx_setup_reduce(PyObject* type_obj) {
    int ret = 0;
    PyObject *object_reduce = NULL;
    PyObject *object_getstate = NULL;
    PyObject *object_reduce_ex = NULL;
    PyObject *reduce = NULL;
    PyObject *reduce_ex = NULL;
    PyObject *reduce_cython = NULL;
    PyObject *setstate = NULL;
    PyObject *setstate_cython = NULL;
    PyObject *getstate = NULL;
#if CYTHON_USE_PYTYPE_LOOKUP
    getstate = _PyType_Lookup((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_getstate);
#else
    getstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_getstate);
    if (!getstate && PyErr_Occurred()) {
        goto __PYX_BAD;
    }
#endif
    if (getstate) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_getstate = _PyType_Lookup(&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_getstate);
#else
        object_getstate = __Pyx_PyObject_GetAttrStrNoError((PyObject*)&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_getstate);
        if (!object_getstate && PyErr_Occurred()) {
            goto __PYX_BAD;
        }
#endif
        if (object_getstate != getstate) {
            goto __PYX_GOOD;
        }
    }
#if CYTHON_USE_PYTYPE_LOOKUP
    object_reduce_ex = _PyType_Lookup(&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#else
    object_reduce_ex = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce_ex); if (!object_reduce_ex) goto __PYX_BAD;
#endif
    reduce_ex = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_mstate_global->__pyx_n_u_reduce_ex); if (unlikely(!reduce_ex)) goto __PYX_BAD;
    if (reduce_ex == object_reduce_ex) {
#if CYTHON_USE_PYTYPE_LOOKUP
        object_reduce = _PyType_Lookup(&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce); if (!object_reduce) goto __PYX_BAD;
#else
        object_reduce = __Pyx_PyObject_GetAttrStr((PyObject*)&PyBaseObject_Type, __pyx_mstate_global->__pyx_n_u_reduce); if (!object_reduce) goto __PYX_BAD;
#endif
        reduce = __Pyx_PyObject_GetAttrStr(type_obj, __pyx_mstate_global->__pyx_n_u_reduce); if (unlikely(!reduce)) goto __PYX_BAD;
        if (reduce == object_reduce || __Pyx_setup_reduce_is_named(reduce, __pyx_mstate_global->__pyx_n_u_reduce_cython)) {
            reduce_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_reduce_cython);
            if (likely(reduce_cython)) {
                ret = __Pyx_SetItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_reduce, reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                ret = __Pyx_DelItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_reduce_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
            } else if (reduce == object_reduce || PyErr_Occurred()) {
                goto __PYX_BAD;
            }
            setstate = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_setstate);
            if (!setstate) PyErr_Clear();
            if (!setstate || __Pyx_setup_reduce_is_named(setstate, __pyx_mstate_global->__pyx_n_u_setstate_cython)) {
                setstate_cython = __Pyx_PyObject_GetAttrStrNoError(type_obj, __pyx_mstate_global->__pyx_n_u_setstate_cython);
                if (likely(setstate_cython)) {
                    ret = __Pyx_SetItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_setstate, setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                    ret = __Pyx_DelItemOnTypeDict((PyTypeObject*)type_obj, __pyx_mstate_global->__pyx_n_u_setstate_cython); if (unlikely(ret < 0)) goto __PYX_BAD;
                } else if (!setstate || PyErr_Occurred()) {
                    goto __PYX_BAD;
                }
            }
            PyType_Modified((PyTypeObject*)type_obj);
        }
    }
    goto __PYX_GOOD;
__PYX_BAD:
    if (!PyErr_Occurred()) {
        __Pyx_TypeName type_obj_name =
            __Pyx_PyType_GetFullyQualifiedName((PyTypeObject*)type_obj);
        PyErr_Format(PyExc_RuntimeError,
            "Unable to initialize pickling for " __Pyx_FMT_TYPENAME, type_obj_name);
        __Pyx_DECREF_TypeName(type_obj_name);
    }
    ret = -1;
__PYX_GOOD:
#if !CYTHON_USE_PYTYPE_LOOKUP
    Py_XDECREF(object_reduce);
    Py_XDECREF(object_reduce_ex);
    Py_XDECREF(object_getstate);
    Py_XDECREF(getstate);
#endif
    Py_XDECREF(reduce);
    Py_XDECREF(reduce_ex);
    Py_XDECREF(reduce_cython);
    Py_XDECREF(setstate);
    Py_XDECREF(setstate_cython);
    return ret;
}

/* TypeImport */
#ifndef __PYX_HAVE_RT_ImportType_3_1_3
#define __PYX_HAVE_RT_ImportType_3_1_3
static PyTypeObject *__Pyx_ImportType_3_1_3(PyObject *module, const char *module_name, const char *class_name,
    size_t size, size_t alignment, enum __Pyx_ImportType_CheckSize_3_1_3 check_size)
{
    PyObject *result = 0;
    Py_ssize_t basicsize;
    Py_ssize_t itemsize;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    PyObject *py_itemsize;
#endif
    result = PyObject_GetAttrString(module, class_name);
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#if !CYTHON_COMPILING_IN_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
    itemsize = ((PyTypeObject *)result)->tp_itemsize;
#else
    if (size == 0) {
        return (PyTypeObject *)result;
    }
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
    py_itemsize = PyObject_GetAttrString(result, "__itemsize__");
    if (!py_itemsize)
        goto bad;
    itemsize = PyLong_AsSsize_t(py_itemsize);
    Py_DECREF(py_itemsize);
    py_itemsize = 0;
    if (itemsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (itemsize) {
        if (size % alignment) {
            alignment = size % alignment;
        }
        if (itemsize < (Py_ssize_t)alignment)
            itemsize = (Py_ssize_t)alignment;
    }
    if ((size_t)(basicsize + itemsize) < size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd from PyObject",
            module_name, class_name, size, basicsize+itemsize);
        goto bad;
    }
    if (check_size == __Pyx_ImportType_CheckSize_Error_3_1_3 &&
            ((size_t)basicsize > size || (size_t)(basicsize + itemsize) < size)) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s size changed, may indicate binary incompatibility. "
            "Expected %zd from C header, got %zd-%zd from PyObject",
            module_name, class_name, size, basicsize, basicsize+itemsize);
        goto bad;
    }
    else if (check_size == __Pyx_ImportType_CheckSize_Warn_3_1_3 && (size_t)basicsize > size) {
        if (PyErr_WarnFormat(NULL, 0,
                "%.200s.%.200s size changed, may indicate binary incompatibility. "
                "Expected %zd from C header, got %zd from PyObject",
                module_name, class_name, size, basicsize) < 0) {
            goto bad;
        }
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(result);
    return NULL;
}
#endif

/* Import */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *module = 0;
    PyObject *empty_dict = 0;
    PyObject *empty_list = 0;
    empty_dict = PyDict_New();
    if (unlikely(!empty_dict))
        goto bad;
    if (level == -1) {
        const char* package_sep = strchr(__Pyx_MODULE_NAME, '.');
        if (package_sep != (0)) {
            module = PyImport_ImportModuleLevelObject(
                name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, 1);
            if (unlikely(!module)) {
                if (unlikely(!PyErr_ExceptionMatches(PyExc_ImportError)))
                    goto bad;
                PyErr_Clear();
            }
        }
        level = 0;
    }
    if (!module) {
        module = PyImport_ImportModuleLevelObject(
            name, __pyx_mstate_global->__pyx_d, empty_dict, from_list, level);
    }
bad:
    Py_XDECREF(empty_dict);
    Py_XDECREF(empty_list);
    return module;
}

/* ImportDottedModule */
static PyObject *__Pyx__ImportDottedModule_Error(PyObject *name, PyObject *parts_tuple, Py_ssize_t count) {
    PyObject *partial_name = NULL, *slice = NULL, *sep = NULL;
    Py_ssize_t size;
    if (unlikely(PyErr_Occurred())) {
        PyErr_Clear();
    }
#if CYTHON_ASSUME_SAFE_SIZE
    size = PyTuple_GET_SIZE(parts_tuple);
#else
    size = PyTuple_Size(parts_tuple);
    if (size < 0) goto bad;
#endif
    if (likely(size == count)) {
        partial_name = name;
    } else {
        slice = PySequence_GetSlice(parts_tuple, 0, count);
        if (unlikely(!slice))
            goto bad;
        sep = PyUnicode_FromStringAndSize(".", 1);
        if (unlikely(!sep))
            goto bad;
        partial_name = PyUnicode_Join(sep, slice);
    }
    PyErr_Format(
        PyExc_ModuleNotFoundError,
        "No module named '%U'", partial_name);
bad:
    Py_XDECREF(sep);
    Py_XDECREF(slice);
    Py_XDECREF(partial_name);
    return NULL;
}
static PyObject *__Pyx__ImportDottedModule_Lookup(PyObject *name) {
    PyObject *imported_module;
#if (CYTHON_COMPILING_IN_PYPY && PYPY_VERSION_NUM  < 0x07030400) ||\
        CYTHON_COMPILING_IN_GRAAL
    PyObject *modules = PyImport_GetModuleDict();
    if (unlikely(!modules))
        return NULL;
    imported_module = __Pyx_PyDict_GetItemStr(modules, name);
    Py_XINCREF(imported_module);
#else
    imported_module = PyImport_GetModule(name);
#endif
    return imported_module;
}
static PyObject *__Pyx_ImportDottedModule_WalkParts(PyObject *module, PyObject *name, PyObject *parts_tuple) {
    Py_ssize_t i, nparts;
#if CYTHON_ASSUME_SAFE_SIZE
    nparts = PyTuple_GET_SIZE(parts_tuple);
#else
    nparts = PyTuple_Size(parts_tuple);
    if (nparts < 0) return NULL;
#endif
    for (i=1; i < nparts && module; i++) {
        PyObject *part, *submodule;
#if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
        part = PyTuple_GET_ITEM(parts_tuple, i);
#else
        part = __Pyx_PySequence_ITEM(parts_tuple, i);
        if (!part) return NULL;
#endif
        submodule = __Pyx_PyObject_GetAttrStrNoError(module, part);
#if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
        Py_DECREF(part);
#endif
        Py_DECREF(module);
        module = submodule;
    }
    if (unlikely(!module)) {
        return __Pyx__ImportDottedModule_Error(name, parts_tuple, i);
    }
    return module;
}
static PyObject *__Pyx__ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
    PyObject *imported_module;
    PyObject *module = __Pyx_Import(name, NULL, 0);
    if (!parts_tuple || unlikely(!module))
        return module;
    imported_module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(imported_module)) {
        Py_DECREF(module);
        return imported_module;
    }
    PyErr_Clear();
    return __Pyx_ImportDottedModule_WalkParts(module, name, parts_tuple);
}
static PyObject *__Pyx_ImportDottedModule(PyObject *name, PyObject *parts_tuple) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *module = __Pyx__ImportDottedModule_Lookup(name);
    if (likely(module)) {
        PyObject *spec = __Pyx_PyObject_GetAttrStrNoError(module, __pyx_mstate_global->__pyx_n_u_spec);
        if (likely(spec)) {
            PyObject *unsafe = __Pyx_PyObject_GetAttrStrNoError(spec, __pyx_mstate_global->__pyx_n_u_initializing);
            if (likely(!unsafe || !__Pyx_PyObject_IsTrue(unsafe))) {
                Py_DECREF(spec);
                spec = NULL;
            }
            Py_XDECREF(unsafe);
        }
        if (likely(!spec)) {
            PyErr_Clear();
            return module;
        }
        Py_DECREF(spec);
        Py_DECREF(module);
    } else if (PyErr_Occurred()) {
        PyErr_Clear();
    }
#endif
    return __Pyx__ImportDottedModule(name, parts_tuple);
}

/* ListPack */
static PyObject *__Pyx_PyList_Pack(Py_ssize_t n, ...) {
    va_list va;
    PyObject *l = PyList_New(n);
    va_start(va, n);
    if (unlikely(!l)) goto end;
    for (Py_ssize_t i=0; i<n; ++i) {
        PyObject *arg = va_arg(va, PyObject*);
        Py_INCREF(arg);
        if (__Pyx_PyList_SET_ITEM(l, i, arg) != (0)) {
            Py_CLEAR(l);
            goto end;
        }
    }
    end:
    va_end(va);
    return l;
}

/* FetchSharedCythonModule */
static PyObject *__Pyx_FetchSharedCythonABIModule(void) {
    return __Pyx_PyImport_AddModuleRef(__PYX_ABI_MODULE_NAME);
}

/* dict_setdefault */
static CYTHON_INLINE PyObject *__Pyx_PyDict_SetDefault(PyObject *d, PyObject *key, PyObject *default_value,
                                                       int is_safe_type) {
    PyObject* value;
    CYTHON_MAYBE_UNUSED_VAR(is_safe_type);
#if CYTHON_COMPILING_IN_LIMITED_API
    value = PyObject_CallMethod(d, "setdefault", "OO", key, default_value);
#elif PY_VERSION_HEX >= 0x030d0000
    PyDict_SetDefaultRef(d, key, default_value, &value);
#else
    value = PyDict_SetDefault(d, key, default_value);
    if (unlikely(!value)) return NULL;
    Py_INCREF(value);
#endif
    return value;
}

/* FetchCommonType */
#if __PYX_LIMITED_VERSION_HEX < 0x030C0000
static PyObject* __Pyx_PyType_FromMetaclass(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *result = __Pyx_PyType_FromModuleAndSpec(module, spec, bases);
    if (result && metaclass) {
        PyObject *old_tp = (PyObject*)Py_TYPE(result);
    Py_INCREF((PyObject*)metaclass);
#if __PYX_LIMITED_VERSION_HEX >= 0x03090000
        Py_SET_TYPE(result, metaclass);
#else
        result->ob_type = metaclass;
#endif
        Py_DECREF(old_tp);
    }
    return result;
}
#else
#define __Pyx_PyType_FromMetaclass(me, mo, s, b) PyType_FromMetaclass(me, mo, s, b)
#endif
static int __Pyx_VerifyCachedType(PyObject *cached_type,
                               const char *name,
                               Py_ssize_t expected_basicsize) {
    Py_ssize_t basicsize;
    if (!PyType_Check(cached_type)) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s is not a type object", name);
        return -1;
    }
    if (expected_basicsize == 0) {
        return 0; // size is inherited, nothing useful to check
    }
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_basicsize;
    py_basicsize = PyObject_GetAttrString(cached_type, "__basicsize__");
    if (unlikely(!py_basicsize)) return -1;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = NULL;
    if (unlikely(basicsize == (Py_ssize_t)-1) && PyErr_Occurred()) return -1;
#else
    basicsize = ((PyTypeObject*) cached_type)->tp_basicsize;
#endif
    if (basicsize != expected_basicsize) {
        PyErr_Format(PyExc_TypeError,
            "Shared Cython type %.200s has the wrong size, try recompiling",
            name);
        return -1;
    }
    return 0;
}
static PyTypeObject *__Pyx_FetchCommonTypeFromSpec(PyTypeObject *metaclass, PyObject *module, PyType_Spec *spec, PyObject *bases) {
    PyObject *abi_module = NULL, *cached_type = NULL, *abi_module_dict, *new_cached_type, *py_object_name;
    int get_item_ref_result;
    const char* object_name = strrchr(spec->name, '.');
    object_name = object_name ? object_name+1 : spec->name;
    py_object_name = PyUnicode_FromString(object_name);
    if (!py_object_name) return NULL;
    abi_module = __Pyx_FetchSharedCythonABIModule();
    if (!abi_module) goto done;
    abi_module_dict = PyModule_GetDict(abi_module);
    if (!abi_module_dict) goto done;
    get_item_ref_result = __Pyx_PyDict_GetItemRef(abi_module_dict, py_object_name, &cached_type);
    if (get_item_ref_result == 1) {
        if (__Pyx_VerifyCachedType(
              cached_type,
              object_name,
              spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    } else if (unlikely(get_item_ref_result == -1)) {
        goto bad;
    }
    CYTHON_UNUSED_VAR(module);
    cached_type = __Pyx_PyType_FromMetaclass(metaclass, abi_module, spec, bases);
    if (unlikely(!cached_type)) goto bad;
    if (unlikely(__Pyx_fix_up_extension_type_from_spec(spec, (PyTypeObject *) cached_type) < 0)) goto bad;
    new_cached_type = __Pyx_PyDict_SetDefault(abi_module_dict, py_object_name, cached_type, 1);
    if (unlikely(new_cached_type != cached_type)) {
        if (unlikely(!new_cached_type)) goto bad;
        Py_DECREF(cached_type);
        cached_type = new_cached_type;
        if (__Pyx_VerifyCachedType(
                cached_type,
                object_name,
                spec->basicsize) < 0) {
            goto bad;
        }
        goto done;
    } else {
        Py_DECREF(new_cached_type);
    }
done:
    Py_XDECREF(abi_module);
    Py_DECREF(py_object_name);
    assert(cached_type == NULL || PyType_Check(cached_type));
    return (PyTypeObject *) cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CommonTypesMetaclass */
static PyObject* __pyx_CommonTypesMetaclass_get_module(CYTHON_UNUSED PyObject *self, CYTHON_UNUSED void* context) {
    return PyUnicode_FromString(__PYX_ABI_MODULE_NAME);
}
static PyGetSetDef __pyx_CommonTypesMetaclass_getset[] = {
    {"__module__", __pyx_CommonTypesMetaclass_get_module, NULL, NULL, NULL},
    {0, 0, 0, 0, 0}
};
static PyType_Slot __pyx_CommonTypesMetaclass_slots[] = {
    {Py_tp_getset, (void *)__pyx_CommonTypesMetaclass_getset},
    {0, 0}
};
static PyType_Spec __pyx_CommonTypesMetaclass_spec = {
    __PYX_TYPE_MODULE_PREFIX "_common_types_metatype",
    0,
    0,
#if PY_VERSION_HEX >= 0x030A0000
    Py_TPFLAGS_IMMUTABLETYPE |
    Py_TPFLAGS_DISALLOW_INSTANTIATION |
#endif
    Py_TPFLAGS_DEFAULT,
    __pyx_CommonTypesMetaclass_slots
};
static int __pyx_CommonTypesMetaclass_init(PyObject *module) {
    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);
    PyObject *bases = PyTuple_Pack(1, &PyType_Type);
    if (unlikely(!bases)) {
        return -1;
    }
    mstate->__pyx_CommonTypesMetaclassType = __Pyx_FetchCommonTypeFromSpec(NULL, module, &__pyx_CommonTypesMetaclass_spec, bases);
    if (unlikely(mstate->__pyx_CommonTypesMetaclassType == NULL)) {
        return -1;
    }
    return 0;
}

/* CallTypeTraverse */
#if !CYTHON_USE_TYPE_SPECS || (!CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x03090000)
#else
static int __Pyx_call_type_traverse(PyObject *o, int always_call, visitproc visit, void *arg) {
    #if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x03090000
    if (__Pyx_get_runtime_version() < 0x03090000) return 0;
    #endif
    if (!always_call) {
        PyTypeObject *base = __Pyx_PyObject_GetSlot(o, tp_base, PyTypeObject*);
        unsigned long flags = PyType_GetFlags(base);
        if (flags & Py_TPFLAGS_HEAPTYPE) {
            return 0;
        }
    }
    Py_VISIT((PyObject*)Py_TYPE(o));
    return 0;
}
#endif

/* PyMethodNew */
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    PyObject *result;
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    #if __PYX_LIMITED_VERSION_HEX >= 0x030C0000
    {
        PyObject *args[] = {func, self};
        result = PyObject_Vectorcall(__pyx_mstate_global->__Pyx_CachedMethodType, args, 2, NULL);
    }
    #else
    result = PyObject_CallFunctionObjArgs(__pyx_mstate_global->__Pyx_CachedMethodType, func, self, NULL);
    #endif
    return result;
}
#else
static PyObject *__Pyx_PyMethod_New(PyObject *func, PyObject *self, PyObject *typ) {
    CYTHON_UNUSED_VAR(typ);
    if (!self)
        return __Pyx_NewRef(func);
    return PyMethod_New(func, self);
}
#endif

/* PyVectorcallFastCallDict */
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static PyObject *__Pyx_PyVectorcall_FastCallDict_kw(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    PyObject *res = NULL;
    PyObject *kwnames;
    PyObject **newargs;
    PyObject **kwvalues;
    Py_ssize_t i, pos;
    size_t j;
    PyObject *key, *value;
    unsigned long keys_are_strings;
    #if !CYTHON_ASSUME_SAFE_SIZE
    Py_ssize_t nkw = PyDict_Size(kw);
    if (unlikely(nkw == -1)) return NULL;
    #else
    Py_ssize_t nkw = PyDict_GET_SIZE(kw);
    #endif
    newargs = (PyObject **)PyMem_Malloc((nargs + (size_t)nkw) * sizeof(args[0]));
    if (unlikely(newargs == NULL)) {
        PyErr_NoMemory();
        return NULL;
    }
    for (j = 0; j < nargs; j++) newargs[j] = args[j];
    kwnames = PyTuple_New(nkw);
    if (unlikely(kwnames == NULL)) {
        PyMem_Free(newargs);
        return NULL;
    }
    kwvalues = newargs + nargs;
    pos = i = 0;
    keys_are_strings = Py_TPFLAGS_UNICODE_SUBCLASS;
    while (PyDict_Next(kw, &pos, &key, &value)) {
        keys_are_strings &=
        #if CYTHON_COMPILING_IN_LIMITED_API
            PyType_GetFlags(Py_TYPE(key));
        #else
            Py_TYPE(key)->tp_flags;
        #endif
        Py_INCREF(key);
        Py_INCREF(value);
        #if !CYTHON_ASSUME_SAFE_MACROS
        if (unlikely(PyTuple_SetItem(kwnames, i, key) < 0)) goto cleanup;
        #else
        PyTuple_SET_ITEM(kwnames, i, key);
        #endif
        kwvalues[i] = value;
        i++;
    }
    if (unlikely(!keys_are_strings)) {
        PyErr_SetString(PyExc_TypeError, "keywords must be strings");
        goto cleanup;
    }
    res = vc(func, newargs, nargs, kwnames);
cleanup:
    Py_DECREF(kwnames);
    for (i = 0; i < nkw; i++)
        Py_DECREF(kwvalues[i]);
    PyMem_Free(newargs);
    return res;
}
static CYTHON_INLINE PyObject *__Pyx_PyVectorcall_FastCallDict(PyObject *func, __pyx_vectorcallfunc vc, PyObject *const *args, size_t nargs, PyObject *kw)
{
    Py_ssize_t kw_size =
        likely(kw == NULL) ?
        0 :
#if !CYTHON_ASSUME_SAFE_SIZE
        PyDict_Size(kw);
#else
        PyDict_GET_SIZE(kw);
#endif
    if (kw_size == 0) {
        return vc(func, args, nargs, NULL);
    }
#if !CYTHON_ASSUME_SAFE_SIZE
    else if (unlikely(kw_size == -1)) {
        return NULL;
    }
#endif
    return __Pyx_PyVectorcall_FastCallDict_kw(func, vc, args, nargs, kw);
}
#endif

/* CythonFunctionShared */
#if CYTHON_COMPILING_IN_LIMITED_API
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunctionNoMethod(PyObject *func, void (*cfunc)(void)) {
    if (__Pyx_CyFunction_Check(func)) {
        return PyCFunction_GetFunction(((__pyx_CyFunctionObject*)func)->func) == (PyCFunction) cfunc;
    } else if (PyCFunction_Check(func)) {
        return PyCFunction_GetFunction(func) == (PyCFunction) cfunc;
    }
    return 0;
}
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void)) {
    if ((PyObject*)Py_TYPE(func) == __pyx_mstate_global->__Pyx_CachedMethodType) {
        int result;
        PyObject *newFunc = PyObject_GetAttr(func, __pyx_mstate_global->__pyx_n_u_func);
        if (unlikely(!newFunc)) {
            PyErr_Clear(); // It's only an optimization, so don't throw an error
            return 0;
        }
        result = __Pyx__IsSameCyOrCFunctionNoMethod(newFunc, cfunc);
        Py_DECREF(newFunc);
        return result;
    }
    return __Pyx__IsSameCyOrCFunctionNoMethod(func, cfunc);
}
#else
static CYTHON_INLINE int __Pyx__IsSameCyOrCFunction(PyObject *func, void (*cfunc)(void)) {
    if (PyMethod_Check(func)) {
        func = PyMethod_GET_FUNCTION(func);
    }
    return __Pyx_CyOrPyCFunction_Check(func) && __Pyx_CyOrPyCFunction_GET_FUNCTION(func) == (PyCFunction) cfunc;
}
#endif
static CYTHON_INLINE void __Pyx__CyFunction_SetClassObj(__pyx_CyFunctionObject* f, PyObject* classobj) {
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    __Pyx_Py_XDECREF_SET(
        __Pyx_CyFunction_GetClassObj(f),
            ((classobj) ? __Pyx_NewRef(classobj) : NULL));
#else
    __Pyx_Py_XDECREF_SET(
        ((PyCMethodObject *) (f))->mm_class,
        (PyTypeObject*)((classobj) ? __Pyx_NewRef(classobj) : NULL));
#endif
}
static PyObject *
__Pyx_CyFunction_get_doc_locked(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_doc == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_doc = PyObject_GetAttrString(op->func, "__doc__");
        if (unlikely(!op->func_doc)) return NULL;
#else
        if (((PyCFunctionObject*)op)->m_ml->ml_doc) {
            op->func_doc = PyUnicode_FromString(((PyCFunctionObject*)op)->m_ml->ml_doc);
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
#endif
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, void *closure) {
    PyObject *result;
    CYTHON_UNUSED_VAR(closure);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_doc_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_doc, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name_locked(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if CYTHON_COMPILING_IN_LIMITED_API
        op->func_name = PyObject_GetAttrString(op->func, "__name__");
#else
        op->func_name = PyUnicode_InternFromString(((PyCFunctionObject*)op)->m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op, void *context)
{
    PyObject *result = NULL;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_name_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_name, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    PyObject *result;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    Py_INCREF(op->func_qualname);
    result = op->func_qualname;
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_qualname, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_dict_locked(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    PyObject *result;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_dict_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value, void *context)
{
    CYTHON_UNUSED_VAR(context);
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_dict, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(__pyx_CyFunctionObject *op, void *context)
{
    CYTHON_UNUSED_VAR(op);
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op, void *context)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    CYTHON_UNUSED_VAR(context);
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = __Pyx_PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = __Pyx_PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyTuple_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__defaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->defaults_tuple, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults_locked(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result = NULL;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_defaults_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value) {
        value = Py_None;
    } else if (unlikely(value != Py_None && !PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    PyErr_WarnEx(PyExc_RuntimeWarning, "changes to cyfunction.__kwdefaults__ will not "
                 "currently affect the values used in function calls", 1);
    Py_INCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->defaults_kwdict, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults_locked(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (unlikely(__Pyx_CyFunction_init_defaults(op) < 0)) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op, void *context) {
    PyObject* result;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_kwdefaults_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    if (!value || value == Py_None) {
        value = NULL;
    } else if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    __Pyx_Py_XDECREF_SET(op->func_annotations, value);
    __Pyx_END_CRITICAL_SECTION();
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations_locked(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op, void *context) {
    PyObject *result;
    CYTHON_UNUSED_VAR(context);
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    result = __Pyx_CyFunction_get_annotations_locked(op);
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine_value(__pyx_CyFunctionObject *op) {
    int is_coroutine = op->flags & __Pyx_CYFUNCTION_COROUTINE;
    if (is_coroutine) {
        PyObject *is_coroutine_value, *module, *fromlist, *marker = __pyx_mstate_global->__pyx_n_u_is_coroutine;
        fromlist = PyList_New(1);
        if (unlikely(!fromlist)) return NULL;
        Py_INCREF(marker);
#if CYTHON_ASSUME_SAFE_MACROS
        PyList_SET_ITEM(fromlist, 0, marker);
#else
        if (unlikely(PyList_SetItem(fromlist, 0, marker) < 0)) {
            Py_DECREF(marker);
            Py_DECREF(fromlist);
            return NULL;
        }
#endif
        module = PyImport_ImportModuleLevelObject(__pyx_mstate_global->__pyx_n_u_asyncio_coroutines, NULL, NULL, fromlist, 0);
        Py_DECREF(fromlist);
        if (unlikely(!module)) goto ignore;
        is_coroutine_value = __Pyx_PyObject_GetAttrStr(module, marker);
        Py_DECREF(module);
        if (likely(is_coroutine_value)) {
            return is_coroutine_value;
        }
ignore:
        PyErr_Clear();
    }
    return __Pyx_PyBool_FromLong(is_coroutine);
}
static PyObject *
__Pyx_CyFunction_get_is_coroutine(__pyx_CyFunctionObject *op, void *context) {
    PyObject *result;
    CYTHON_UNUSED_VAR(context);
    if (op->func_is_coroutine) {
        return __Pyx_NewRef(op->func_is_coroutine);
    }
    result = __Pyx_CyFunction_get_is_coroutine_value(op);
    if (unlikely(!result))
        return NULL;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    if (op->func_is_coroutine) {
        Py_DECREF(result);
        result = __Pyx_NewRef(op->func_is_coroutine);
    } else {
        op->func_is_coroutine = __Pyx_NewRef(result);
    }
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static void __Pyx_CyFunction_raise_argument_count_error(__pyx_CyFunctionObject *func, const char* message, Py_ssize_t size) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_name = __Pyx_CyFunction_get_name(func, NULL);
    if (!py_name) return;
    PyErr_Format(PyExc_TypeError,
        "%.200S() %s (%" CYTHON_FORMAT_SSIZE_T "d given)",
        py_name, message, size);
    Py_DECREF(py_name);
#else
    const char* name = ((PyCFunctionObject*)func)->m_ml->ml_name;
    PyErr_Format(PyExc_TypeError,
        "%.200s() %s (%" CYTHON_FORMAT_SSIZE_T "d given)",
        name, message, size);
#endif
}
static void __Pyx_CyFunction_raise_type_error(__pyx_CyFunctionObject *func, const char* message) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *py_name = __Pyx_CyFunction_get_name(func, NULL);
    if (!py_name) return;
    PyErr_Format(PyExc_TypeError,
        "%.200S() %s",
        py_name, message);
    Py_DECREF(py_name);
#else
    const char* name = ((PyCFunctionObject*)func)->m_ml->ml_name;
    PyErr_Format(PyExc_TypeError,
        "%.200s() %s",
        name, message);
#endif
}
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *
__Pyx_CyFunction_get_module(__pyx_CyFunctionObject *op, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_GetAttrString(op->func, "__module__");
}
static int
__Pyx_CyFunction_set_module(__pyx_CyFunctionObject *op, PyObject* value, void *context) {
    CYTHON_UNUSED_VAR(context);
    return PyObject_SetAttrString(op->func, "__module__", value);
}
#endif
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {"func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {"__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {"func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {"__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {"__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {"func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {"__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {"func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {"__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {"func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {"__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {"func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {"__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {"func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {"__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {"__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {"__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {"_is_coroutine", (getter)__Pyx_CyFunction_get_is_coroutine, 0, 0, 0},
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", (getter)__Pyx_CyFunction_get_module, (setter)__Pyx_CyFunction_set_module, 0, 0},
#endif
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
#if !CYTHON_COMPILING_IN_LIMITED_API
    {"__module__", T_OBJECT, offsetof(PyCFunctionObject, m_module), 0, 0},
#endif
    {"__dictoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_dict), READONLY, 0},
#if CYTHON_METH_FASTCALL
#if CYTHON_BACKPORT_VECTORCALL || CYTHON_COMPILING_IN_LIMITED_API
    {"__vectorcalloffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_vectorcall), READONLY, 0},
#else
    {"__vectorcalloffset__", T_PYSSIZET, offsetof(PyCFunctionObject, vectorcall), READONLY, 0},
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
    {"__weaklistoffset__", T_PYSSIZET, offsetof(__pyx_CyFunctionObject, func_weakreflist), READONLY, 0},
#else
    {"__weaklistoffset__", T_PYSSIZET, offsetof(PyCFunctionObject, m_weakreflist), READONLY, 0},
#endif
#endif
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, PyObject *args)
{
    PyObject *result = NULL;
    CYTHON_UNUSED_VAR(args);
    __Pyx_BEGIN_CRITICAL_SECTION(m);
    Py_INCREF(m->func_qualname);
    result = m->func_qualname;
    __Pyx_END_CRITICAL_SECTION();
    return result;
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if CYTHON_COMPILING_IN_LIMITED_API
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) (((PyCFunctionObject*)cyfunc)->m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_Init(__pyx_CyFunctionObject *op, PyMethodDef *ml, int flags, PyObject* qualname,
                                       PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
#if !CYTHON_COMPILING_IN_LIMITED_API
    PyCFunctionObject *cf = (PyCFunctionObject*) op;
#endif
    if (unlikely(op == NULL))
        return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    op->func = PyCFunction_NewEx(ml, (PyObject*)op, module);
    if (unlikely(!op->func)) return NULL;
#endif
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
#if !CYTHON_COMPILING_IN_LIMITED_API
    cf->m_ml = ml;
    cf->m_self = (PyObject *) op;
#endif
    Py_XINCREF(closure);
    op->func_closure = closure;
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_XINCREF(module);
    cf->m_module = module;
#endif
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
#if PY_VERSION_HEX < 0x030900B1 || CYTHON_COMPILING_IN_LIMITED_API
    op->func_classobj = NULL;
#else
    ((PyCMethodObject*)op)->mm_class = NULL;
#endif
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    op->func_is_coroutine = NULL;
#if CYTHON_METH_FASTCALL
    switch (ml->ml_flags & (METH_VARARGS | METH_FASTCALL | METH_NOARGS | METH_O | METH_KEYWORDS | METH_METHOD)) {
    case METH_NOARGS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_NOARGS;
        break;
    case METH_O:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_O;
        break;
    case METH_METHOD | METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD;
        break;
    case METH_FASTCALL | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS;
        break;
    case METH_VARARGS | METH_KEYWORDS:
        __Pyx_CyFunction_func_vectorcall(op) = NULL;
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        Py_DECREF(op);
        return NULL;
    }
#endif
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_CLEAR(m->func);
#else
    Py_CLEAR(((PyCFunctionObject*)m)->m_module);
#endif
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
#if PY_VERSION_HEX < 0x030900B1
    Py_CLEAR(__Pyx_CyFunction_GetClassObj(m));
#else
    {
        PyObject *cls = (PyObject*) ((PyCMethodObject *) (m))->mm_class;
        ((PyCMethodObject *) (m))->mm_class = NULL;
        Py_XDECREF(cls);
    }
#endif
#endif
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    Py_CLEAR(m->func_is_coroutine);
    Py_CLEAR(m->defaults);
    return 0;
}
static void __Pyx__CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    __Pyx_PyHeapTypeObject_GC_Del(m);
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    __Pyx__CyFunction_dealloc(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    {
        int e = __Pyx_call_type_traverse((PyObject*)m, 1, visit, arg);
        if (e) return e;
    }
    Py_VISIT(m->func_closure);
#if CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(m->func);
#else
    Py_VISIT(((PyCFunctionObject*)m)->m_module);
#endif
    Py_VISIT(m->func_dict);
    __Pyx_VISIT_CONST(m->func_name);
    __Pyx_VISIT_CONST(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    __Pyx_VISIT_CONST(m->func_code);
#if !CYTHON_COMPILING_IN_LIMITED_API
    Py_VISIT(__Pyx_CyFunction_GetClassObj(m));
#endif
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    Py_VISIT(m->func_is_coroutine);
    Py_VISIT(m->defaults);
    return 0;
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
    PyObject *repr;
    __Pyx_BEGIN_CRITICAL_SECTION(op);
    repr = PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
    __Pyx_END_CRITICAL_SECTION();
    return repr;
}
static PyObject * __Pyx_CyFunction_CallMethod(PyObject *func, PyObject *self, PyObject *arg, PyObject *kw) {
#if CYTHON_COMPILING_IN_LIMITED_API
    PyObject *f = ((__pyx_CyFunctionObject*)func)->func;
    PyCFunction meth;
    int flags;
    meth = PyCFunction_GetFunction(f);
    if (unlikely(!meth)) return NULL;
    flags = PyCFunction_GetFlags(f);
    if (unlikely(flags < 0)) return NULL;
#else
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    int flags = f->m_ml->ml_flags;
#endif
    Py_ssize_t size;
    switch (flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)(void(*)(void))meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_SIZE
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 0))
                return (*meth)(self, NULL);
            __Pyx_CyFunction_raise_argument_count_error(
                (__pyx_CyFunctionObject*)func,
                "takes no arguments", size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
#if CYTHON_ASSUME_SAFE_SIZE
            size = PyTuple_GET_SIZE(arg);
#else
            size = PyTuple_Size(arg);
            if (unlikely(size < 0)) return NULL;
#endif
            if (likely(size == 1)) {
                PyObject *result, *arg0;
                #if CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS
                arg0 = PyTuple_GET_ITEM(arg, 0);
                #else
                arg0 = __Pyx_PySequence_ITEM(arg, 0); if (unlikely(!arg0)) return NULL;
                #endif
                result = (*meth)(self, arg0);
                #if !(CYTHON_ASSUME_SAFE_MACROS && !CYTHON_AVOID_BORROWED_REFS)
                Py_DECREF(arg0);
                #endif
                return result;
            }
            __Pyx_CyFunction_raise_argument_count_error(
                (__pyx_CyFunctionObject*)func,
                "takes exactly one argument", size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags for CyFunction");
        return NULL;
    }
    __Pyx_CyFunction_raise_type_error(
        (__pyx_CyFunctionObject*)func, "takes no keyword arguments");
    return NULL;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *self, *result;
#if CYTHON_COMPILING_IN_LIMITED_API
    self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)func)->func);
    if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
    self = ((PyCFunctionObject*)func)->m_self;
#endif
    result = __Pyx_CyFunction_CallMethod(func, self, arg, kw);
    return result;
}
static PyObject *__Pyx_CyFunction_CallAsMethod(PyObject *func, PyObject *args, PyObject *kw) {
    PyObject *result;
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *) func;
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
     __pyx_vectorcallfunc vc = __Pyx_CyFunction_func_vectorcall(cyfunc);
    if (vc) {
#if CYTHON_ASSUME_SAFE_MACROS && CYTHON_ASSUME_SAFE_SIZE
        return __Pyx_PyVectorcall_FastCallDict(func, vc, &PyTuple_GET_ITEM(args, 0), (size_t)PyTuple_GET_SIZE(args), kw);
#else
        (void) &__Pyx_PyVectorcall_FastCallDict;
        return PyVectorcall_Call(func, args, kw);
#endif
    }
#endif
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        Py_ssize_t argc;
        PyObject *new_args;
        PyObject *self;
#if CYTHON_ASSUME_SAFE_SIZE
        argc = PyTuple_GET_SIZE(args);
#else
        argc = PyTuple_Size(args);
        if (unlikely(argc < 0)) return NULL;
#endif
        new_args = PyTuple_GetSlice(args, 1, argc);
        if (unlikely(!new_args))
            return NULL;
        self = PyTuple_GetItem(args, 0);
        if (unlikely(!self)) {
            Py_DECREF(new_args);
            PyErr_Format(PyExc_TypeError,
                         "unbound method %.200S() needs an argument",
                         cyfunc->func_qualname);
            return NULL;
        }
        result = __Pyx_CyFunction_CallMethod(func, self, new_args, kw);
        Py_DECREF(new_args);
    } else {
        result = __Pyx_CyFunction_Call(func, args, kw);
    }
    return result;
}
#if CYTHON_METH_FASTCALL && (CYTHON_VECTORCALL || CYTHON_BACKPORT_VECTORCALL)
static CYTHON_INLINE int __Pyx_CyFunction_Vectorcall_CheckArgs(__pyx_CyFunctionObject *cyfunc, Py_ssize_t nargs, PyObject *kwnames)
{
    int ret = 0;
    if ((cyfunc->flags & __Pyx_CYFUNCTION_CCLASS) && !(cyfunc->flags & __Pyx_CYFUNCTION_STATICMETHOD)) {
        if (unlikely(nargs < 1)) {
            __Pyx_CyFunction_raise_type_error(
                cyfunc, "needs an argument");
            return -1;
        }
        ret = 1;
    }
    if (unlikely(kwnames) && unlikely(__Pyx_PyTuple_GET_SIZE(kwnames))) {
        __Pyx_CyFunction_raise_type_error(
            cyfunc, "takes no keyword arguments");
        return -1;
    }
    return ret;
}
static PyObject * __Pyx_CyFunction_Vectorcall_NOARGS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 0)) {
        __Pyx_CyFunction_raise_argument_count_error(
            cyfunc, "takes no arguments", nargs);
        return NULL;
    }
    return meth(self, NULL);
}
static PyObject * __Pyx_CyFunction_Vectorcall_O(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, kwnames)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    if (unlikely(nargs != 1)) {
        __Pyx_CyFunction_raise_argument_count_error(
            cyfunc, "takes exactly one argument", nargs);
        return NULL;
    }
    return meth(self, args[0]);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCFunctionFastWithKeywords)(void(*)(void))meth)(self, args, nargs, kwnames);
}
static PyObject * __Pyx_CyFunction_Vectorcall_FASTCALL_KEYWORDS_METHOD(PyObject *func, PyObject *const *args, size_t nargsf, PyObject *kwnames)
{
    __pyx_CyFunctionObject *cyfunc = (__pyx_CyFunctionObject *)func;
    PyTypeObject *cls = (PyTypeObject *) __Pyx_CyFunction_GetClassObj(cyfunc);
#if CYTHON_BACKPORT_VECTORCALL
    Py_ssize_t nargs = (Py_ssize_t)nargsf;
#else
    Py_ssize_t nargs = PyVectorcall_NARGS(nargsf);
#endif
    PyObject *self;
#if CYTHON_COMPILING_IN_LIMITED_API
    PyCFunction meth = PyCFunction_GetFunction(cyfunc->func);
    if (unlikely(!meth)) return NULL;
#else
    PyCFunction meth = ((PyCFunctionObject*)cyfunc)->m_ml->ml_meth;
#endif
    switch (__Pyx_CyFunction_Vectorcall_CheckArgs(cyfunc, nargs, NULL)) {
    case 1:
        self = args[0];
        args += 1;
        nargs -= 1;
        break;
    case 0:
#if CYTHON_COMPILING_IN_LIMITED_API
        self = PyCFunction_GetSelf(((__pyx_CyFunctionObject*)cyfunc)->func);
        if (unlikely(!self) && PyErr_Occurred()) return NULL;
#else
        self = ((PyCFunctionObject*)cyfunc)->m_self;
#endif
        break;
    default:
        return NULL;
    }
    return ((__Pyx_PyCMethod)(void(*)(void))meth)(self, cls, args, (size_t)nargs, kwnames);
}
#endif
static PyType_Slot __pyx_CyFunctionType_slots[] = {
    {Py_tp_dealloc, (void *)__Pyx_CyFunction_dealloc},
    {Py_tp_repr, (void *)__Pyx_CyFunction_repr},
    {Py_tp_call, (void *)__Pyx_CyFunction_CallAsMethod},
    {Py_tp_traverse, (void *)__Pyx_CyFunction_traverse},
    {Py_tp_clear, (void *)__Pyx_CyFunction_clear},
    {Py_tp_methods, (void *)__pyx_CyFunction_methods},
    {Py_tp_members, (void *)__pyx_CyFunction_members},
    {Py_tp_getset, (void *)__pyx_CyFunction_getsets},
    {Py_tp_descr_get, (void *)__Pyx_PyMethod_New},
    {0, 0},
};
static PyType_Spec __pyx_CyFunctionType_spec = {
    __PYX_TYPE_MODULE_PREFIX "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
#ifdef Py_TPFLAGS_METHOD_DESCRIPTOR
    Py_TPFLAGS_METHOD_DESCRIPTOR |
#endif
#if CYTHON_METH_FASTCALL
#if defined(Py_TPFLAGS_HAVE_VECTORCALL)
    Py_TPFLAGS_HAVE_VECTORCALL |
#elif defined(_Py_TPFLAGS_HAVE_VECTORCALL)
    _Py_TPFLAGS_HAVE_VECTORCALL |
#endif
#endif // CYTHON_METH_FASTCALL
#if PY_VERSION_HEX >= 0x030A0000
    Py_TPFLAGS_IMMUTABLETYPE |
#endif
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_BASETYPE,
    __pyx_CyFunctionType_slots
};
static int __pyx_CyFunction_init(PyObject *module) {
    __pyx_mstatetype *mstate = __Pyx_PyModule_GetState(module);
    mstate->__pyx_CyFunctionType = __Pyx_FetchCommonTypeFromSpec(
        mstate->__pyx_CommonTypesMetaclassType, module, &__pyx_CyFunctionType_spec, NULL);
    if (unlikely(mstate->__pyx_CyFunctionType == NULL)) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE PyObject *__Pyx_CyFunction_InitDefaults(PyObject *func, PyTypeObject *defaults_type) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_CallObject((PyObject*)defaults_type, NULL); // _PyObject_New(defaults_type);
    if (unlikely(!m->defaults))
        return NULL;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* CythonFunction */
static PyObject *__Pyx_CyFunction_New(PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    PyObject *op = __Pyx_CyFunction_Init(
        PyObject_GC_New(__pyx_CyFunctionObject, __pyx_mstate_global->__pyx_CyFunctionType),
        ml, flags, qualname, closure, module, globals, code
    );
    if (likely(op)) {
        PyObject_GC_Track(op);
    }
    return op;
}

/* CalculateMetaclass */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases;
#if CYTHON_ASSUME_SAFE_SIZE
    nbases = PyTuple_GET_SIZE(bases);
#else
    nbases = PyTuple_Size(bases);
    if (nbases < 0) return NULL;
#endif
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
#if CYTHON_ASSUME_SAFE_MACROS
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
#else
        PyObject *tmp = PyTuple_GetItem(bases, i);
        if (!tmp) return NULL;
#endif
        tmptype = Py_TYPE(tmp);
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
        metaclass = &PyType_Type;
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* PyObjectCall2Args */
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call2Args(PyObject* function, PyObject* arg1, PyObject* arg2) {
    PyObject *args[3] = {NULL, arg1, arg2};
    return __Pyx_PyObject_FastCall(function, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET);
}

/* PyObjectLookupSpecial */
#if CYTHON_USE_PYTYPE_LOOKUP && CYTHON_USE_TYPE_SLOTS
static CYTHON_INLINE PyObject* __Pyx__PyObject_LookupSpecial(PyObject* obj, PyObject* attr_name, int with_error) {
    PyObject *res;
    PyTypeObject *tp = Py_TYPE(obj);
    res = _PyType_Lookup(tp, attr_name);
    if (likely(res)) {
        descrgetfunc f = Py_TYPE(res)->tp_descr_get;
        if (!f) {
            Py_INCREF(res);
        } else {
            res = f(res, obj, (PyObject *)tp);
        }
    } else if (with_error) {
        PyErr_SetObject(PyExc_AttributeError, attr_name);
    }
    return res;
}
#endif

/* Py3ClassCreate */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStrNoError(metaclass, __pyx_mstate_global->__pyx_n_u_prepare);
        if (prep) {
            PyObject *pargs[3] = {NULL, name, bases};
            ns = __Pyx_PyObject_FastCallDict(prep, pargs+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, mkw);
            Py_DECREF(prep);
        } else {
            if (unlikely(PyErr_Occurred()))
                return NULL;
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_mstate_global->__pyx_n_u_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_mstate_global->__pyx_n_u_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_mstate_global->__pyx_n_u_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result;
    PyObject *owned_metaclass = NULL;
    PyObject *margs[4] = {NULL, name, bases, dict};
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_mstate_global->__pyx_n_u_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    result = __Pyx_PyObject_FastCallDict(metaclass, margs+1, 3 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, mkw);
    Py_XDECREF(owned_metaclass);
    return result;
}

/* CLineInTraceback */
#if CYTHON_CLINE_IN_TRACEBACK && CYTHON_CLINE_IN_TRACEBACK_RUNTIME
static int __Pyx_CLineForTraceback(PyThreadState *tstate, int c_line) {
    PyObject *use_cline;
    PyObject *ptype, *pvalue, *ptraceback;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject **cython_runtime_dict;
#endif
    CYTHON_MAYBE_UNUSED_VAR(tstate);
    if (unlikely(!__pyx_mstate_global->__pyx_cython_runtime)) {
        return c_line;
    }
    __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
#if CYTHON_COMPILING_IN_CPYTHON
    cython_runtime_dict = _PyObject_GetDictPtr(__pyx_mstate_global->__pyx_cython_runtime);
    if (likely(cython_runtime_dict)) {
        __Pyx_BEGIN_CRITICAL_SECTION(*cython_runtime_dict);
        __PYX_PY_DICT_LOOKUP_IF_MODIFIED(
            use_cline, *cython_runtime_dict,
            __Pyx_PyDict_GetItemStr(*cython_runtime_dict, __pyx_mstate_global->__pyx_n_u_cline_in_traceback))
        Py_XINCREF(use_cline);
        __Pyx_END_CRITICAL_SECTION();
    } else
#endif
    {
      PyObject *use_cline_obj = __Pyx_PyObject_GetAttrStrNoError(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_u_cline_in_traceback);
      if (use_cline_obj) {
        use_cline = PyObject_Not(use_cline_obj) ? Py_False : Py_True;
        Py_INCREF(use_cline);
        Py_DECREF(use_cline_obj);
      } else {
        PyErr_Clear();
        use_cline = NULL;
      }
    }
    if (!use_cline) {
        c_line = 0;
        (void) PyObject_SetAttr(__pyx_mstate_global->__pyx_cython_runtime, __pyx_mstate_global->__pyx_n_u_cline_in_traceback, Py_False);
    }
    else if (use_cline == Py_False || (use_cline != Py_True && PyObject_Not(use_cline) != 0)) {
        c_line = 0;
    }
    Py_XDECREF(use_cline);
    __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
    return c_line;
}
#endif

/* CodeObjectCache */
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static __Pyx_CachedCodeObjectType *__pyx__find_code_object(struct __Pyx_CodeObjectCache *code_cache, int code_line) {
    __Pyx_CachedCodeObjectType* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!code_cache->entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(code_cache->entries, code_cache->count, code_line);
    if (unlikely(pos >= code_cache->count) || unlikely(code_cache->entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = code_cache->entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static __Pyx_CachedCodeObjectType *__pyx_find_code_object(int code_line) {
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS
    (void)__pyx__find_code_object;
    return NULL; // Most implementation should have atomics. But otherwise, don't make it thread-safe, just miss.
#else
    struct __Pyx_CodeObjectCache *code_cache = &__pyx_mstate_global->__pyx_code_cache;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_nonatomic_int_type old_count = __pyx_atomic_incr_acq_rel(&code_cache->accessor_count);
    if (old_count < 0) {
        __pyx_atomic_decr_acq_rel(&code_cache->accessor_count);
        return NULL;
    }
#endif
    __Pyx_CachedCodeObjectType *result = __pyx__find_code_object(code_cache, code_line);
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_decr_acq_rel(&code_cache->accessor_count);
#endif
    return result;
#endif
}
static void __pyx__insert_code_object(struct __Pyx_CodeObjectCache *code_cache, int code_line, __Pyx_CachedCodeObjectType* code_object)
{
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = code_cache->entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            code_cache->entries = entries;
            code_cache->max_count = 64;
            code_cache->count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(code_cache->entries, code_cache->count, code_line);
    if ((pos < code_cache->count) && unlikely(code_cache->entries[pos].code_line == code_line)) {
        __Pyx_CachedCodeObjectType* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_INCREF(code_object);
        Py_DECREF(tmp);
        return;
    }
    if (code_cache->count == code_cache->max_count) {
        int new_max = code_cache->max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            code_cache->entries, ((size_t)new_max) * sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        code_cache->entries = entries;
        code_cache->max_count = new_max;
    }
    for (i=code_cache->count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    code_cache->count++;
    Py_INCREF(code_object);
}
static void __pyx_insert_code_object(int code_line, __Pyx_CachedCodeObjectType* code_object) {
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING && !CYTHON_ATOMICS
    (void)__pyx__insert_code_object;
    return; // Most implementation should have atomics. But otherwise, don't make it thread-safe, just fail.
#else
    struct __Pyx_CodeObjectCache *code_cache = &__pyx_mstate_global->__pyx_code_cache;
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_nonatomic_int_type expected = 0;
    if (!__pyx_atomic_int_cmp_exchange(&code_cache->accessor_count, &expected, INT_MIN)) {
        return;
    }
#endif
    __pyx__insert_code_object(code_cache, code_line, code_object);
#if CYTHON_COMPILING_IN_CPYTHON_FREETHREADING
    __pyx_atomic_sub(&code_cache->accessor_count, INT_MIN);
#endif
#endif
}

/* AddTraceback */
#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
#if PY_VERSION_HEX >= 0x030b00a6 && !CYTHON_COMPILING_IN_LIMITED_API && !defined(PYPY_VERSION)
  #ifndef Py_BUILD_CORE
    #define Py_BUILD_CORE 1
  #endif
  #include "internal/pycore_frame.h"
#endif
#if CYTHON_COMPILING_IN_LIMITED_API
static PyObject *__Pyx_PyCode_Replace_For_AddTraceback(PyObject *code, PyObject *scratch_dict,
                                                       PyObject *firstlineno, PyObject *name) {
    PyObject *replace = NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_firstlineno", firstlineno))) return NULL;
    if (unlikely(PyDict_SetItemString(scratch_dict, "co_name", name))) return NULL;
    replace = PyObject_GetAttrString(code, "replace");
    if (likely(replace)) {
        PyObject *result = PyObject_Call(replace, __pyx_mstate_global->__pyx_empty_tuple, scratch_dict);
        Py_DECREF(replace);
        return result;
    }
    PyErr_Clear();
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyObject *code_object = NULL, *py_py_line = NULL, *py_funcname = NULL, *dict = NULL;
    PyObject *replace = NULL, *getframe = NULL, *frame = NULL;
    PyObject *exc_type, *exc_value, *exc_traceback;
    int success = 0;
    if (c_line) {
        (void) __pyx_cfilenm;
        (void) __Pyx_CLineForTraceback(__Pyx_PyThreadState_Current, c_line);
    }
    PyErr_Fetch(&exc_type, &exc_value, &exc_traceback);
    code_object = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!code_object) {
        code_object = Py_CompileString("_getframe()", filename, Py_eval_input);
        if (unlikely(!code_object)) goto bad;
        py_py_line = PyLong_FromLong(py_line);
        if (unlikely(!py_py_line)) goto bad;
        py_funcname = PyUnicode_FromString(funcname);
        if (unlikely(!py_funcname)) goto bad;
        dict = PyDict_New();
        if (unlikely(!dict)) goto bad;
        {
            PyObject *old_code_object = code_object;
            code_object = __Pyx_PyCode_Replace_For_AddTraceback(code_object, dict, py_py_line, py_funcname);
            Py_DECREF(old_code_object);
        }
        if (unlikely(!code_object)) goto bad;
        __pyx_insert_code_object(c_line ? -c_line : py_line, code_object);
    } else {
        dict = PyDict_New();
    }
    getframe = PySys_GetObject("_getframe");
    if (unlikely(!getframe)) goto bad;
    if (unlikely(PyDict_SetItemString(dict, "_getframe", getframe))) goto bad;
    frame = PyEval_EvalCode(code_object, dict, dict);
    if (unlikely(!frame) || frame == Py_None) goto bad;
    success = 1;
  bad:
    PyErr_Restore(exc_type, exc_value, exc_traceback);
    Py_XDECREF(code_object);
    Py_XDECREF(py_py_line);
    Py_XDECREF(py_funcname);
    Py_XDECREF(dict);
    Py_XDECREF(replace);
    if (success) {
        PyTraceBack_Here(
            (struct _frame*)frame);
    }
    Py_XDECREF(frame);
}
#else
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = NULL;
    PyObject *py_funcname = NULL;
    if (c_line) {
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        if (!py_funcname) goto bad;
        funcname = PyUnicode_AsUTF8(py_funcname);
        if (!funcname) goto bad;
    }
    py_code = PyCode_NewEmpty(filename, funcname, py_line);
    Py_XDECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    PyThreadState *tstate = __Pyx_PyThreadState_Current;
    PyObject *ptype, *pvalue, *ptraceback;
    if (c_line) {
        c_line = __Pyx_CLineForTraceback(tstate, c_line);
    }
    py_code = __pyx_find_code_object(c_line ? -c_line : py_line);
    if (!py_code) {
        __Pyx_ErrFetchInState(tstate, &ptype, &pvalue, &ptraceback);
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) {
            /* If the code object creation fails, then we should clear the
               fetched exception references and propagate the new exception */
            Py_XDECREF(ptype);
            Py_XDECREF(pvalue);
            Py_XDECREF(ptraceback);
            goto bad;
        }
        __Pyx_ErrRestoreInState(tstate, ptype, pvalue, ptraceback);
        __pyx_insert_code_object(c_line ? -c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        tstate,            /*PyThreadState *tstate,*/
        py_code,           /*PyCodeObject *code,*/
        __pyx_mstate_global->__pyx_d,    /*PyObject *globals,*/
        0                  /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    __Pyx_PyFrame_SetLineNumber(py_frame, py_line);
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}
#endif

/* CIntFromPyVerify */
#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

static PyObject* __pyx_convert__to_py_yirage_3a__3a_transpiler_3a__3a_OutputTensorDirective(yirage::transpiler::OutputTensorDirective s) {
  PyObject* res;
  PyObject* member;
  res = __Pyx_PyDict_NewPresized(3); if (unlikely(!res)) return NULL;
  member = __Pyx_PyLong_FromSize_t(s.alloc_size); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_mstate_global->__pyx_n_u_alloc_size, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert_vector_to_py_int(s.shape); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_mstate_global->__pyx_n_u_shape, member) < 0)) goto bad;
  Py_DECREF(member);
  member = __pyx_convert_vector_to_py_size_t(s.strides); if (unlikely(!member)) goto bad;
  if (unlikely(PyDict_SetItem(res, __pyx_mstate_global->__pyx_n_u_strides, member) < 0)) goto bad;
  Py_DECREF(member);
  return res;
  bad:
  Py_XDECREF(member);
  Py_DECREF(res);
  return NULL;
}
/* CIntFromPy */
static CYTHON_INLINE int __Pyx_PyLong_As_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyLong_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 2 * PyLong_SHIFT)) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 3 * PyLong_SHIFT)) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) >= 4 * PyLong_SHIFT)) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(int) - 1 > 4 * PyLong_SHIFT)) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((int) 1) << (sizeof(int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_int(int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const int neg_one = (int) -1, const_zero = (int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_DataType(enum yirage::type::DataType value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum yirage::type::DataType neg_one = (enum yirage::type::DataType) -1, const_zero = (enum yirage::type::DataType) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum yirage::type::DataType) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(enum yirage::type::DataType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(enum yirage::type::DataType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum yirage::type::DataType) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum yirage::type::DataType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(enum yirage::type::DataType),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(enum yirage::type::DataType));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_TBEpilogueType(enum yirage::type::TBEpilogueType value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum yirage::type::TBEpilogueType neg_one = (enum yirage::type::TBEpilogueType) -1, const_zero = (enum yirage::type::TBEpilogueType) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum yirage::type::TBEpilogueType) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(enum yirage::type::TBEpilogueType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(enum yirage::type::TBEpilogueType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum yirage::type::TBEpilogueType) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum yirage::type::TBEpilogueType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(enum yirage::type::TBEpilogueType),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(enum yirage::type::TBEpilogueType));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_TBOperatorType(enum yirage::type::TBOperatorType value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum yirage::type::TBOperatorType neg_one = (enum yirage::type::TBOperatorType) -1, const_zero = (enum yirage::type::TBOperatorType) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum yirage::type::TBOperatorType) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(enum yirage::type::TBOperatorType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(enum yirage::type::TBOperatorType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum yirage::type::TBOperatorType) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum yirage::type::TBOperatorType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(enum yirage::type::TBOperatorType),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(enum yirage::type::TBOperatorType));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE unsigned PY_LONG_LONG __Pyx_PyLong_As_unsigned_PY_LONG_LONG(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        unsigned PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (unsigned PY_LONG_LONG) -1;
        val = __Pyx_PyLong_As_unsigned_PY_LONG_LONG(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) >= 2 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) >= 3 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) >= 4 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (unsigned PY_LONG_LONG) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) ((((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) ((((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) (((unsigned PY_LONG_LONG)-1)*(((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(unsigned PY_LONG_LONG) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT)) {
                            return (unsigned PY_LONG_LONG) ((((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(unsigned PY_LONG_LONG) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned PY_LONG_LONG, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        unsigned PY_LONG_LONG val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (unsigned PY_LONG_LONG) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (unsigned PY_LONG_LONG) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (unsigned PY_LONG_LONG) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (unsigned PY_LONG_LONG) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(unsigned PY_LONG_LONG) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((unsigned PY_LONG_LONG) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(unsigned PY_LONG_LONG) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((unsigned PY_LONG_LONG) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((unsigned PY_LONG_LONG) 1) << (sizeof(unsigned PY_LONG_LONG) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (unsigned PY_LONG_LONG) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned PY_LONG_LONG");
    return (unsigned PY_LONG_LONG) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned PY_LONG_LONG");
    return (unsigned PY_LONG_LONG) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_unsigned_PY_LONG_LONG(unsigned PY_LONG_LONG value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned PY_LONG_LONG neg_one = (unsigned PY_LONG_LONG) -1, const_zero = (unsigned PY_LONG_LONG) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned PY_LONG_LONG) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned PY_LONG_LONG) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned PY_LONG_LONG),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned PY_LONG_LONG));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_enum__yirage_3a__3a_type_3a__3a_KNOperatorType(enum yirage::type::KNOperatorType value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum yirage::type::KNOperatorType neg_one = (enum yirage::type::KNOperatorType) -1, const_zero = (enum yirage::type::KNOperatorType) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(enum yirage::type::KNOperatorType) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(enum yirage::type::KNOperatorType) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(enum yirage::type::KNOperatorType) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(enum yirage::type::KNOperatorType) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(enum yirage::type::KNOperatorType) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(enum yirage::type::KNOperatorType),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(enum yirage::type::KNOperatorType));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE size_t __Pyx_PyLong_As_size_t(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyLong_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 2 * PyLong_SHIFT)) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 3 * PyLong_SHIFT)) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) >= 4 * PyLong_SHIFT)) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (size_t) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(size_t) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(size_t, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(size_t) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(size_t) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(size_t) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT)) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(size_t) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(size_t) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        size_t val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (size_t) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (size_t) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (size_t) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (size_t) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(size_t) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((size_t) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(size_t) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((size_t) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((size_t) 1) << (sizeof(size_t) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (size_t) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum yirage::type::DataType __Pyx_PyLong_As_enum__yirage_3a__3a_type_3a__3a_DataType(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum yirage::type::DataType neg_one = (enum yirage::type::DataType) -1, const_zero = (enum yirage::type::DataType) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        enum yirage::type::DataType val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (enum yirage::type::DataType) -1;
        val = __Pyx_PyLong_As_enum__yirage_3a__3a_type_3a__3a_DataType(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(enum yirage::type::DataType, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(enum yirage::type::DataType) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::DataType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::DataType) >= 2 * PyLong_SHIFT)) {
                            return (enum yirage::type::DataType) (((((enum yirage::type::DataType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(enum yirage::type::DataType) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::DataType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::DataType) >= 3 * PyLong_SHIFT)) {
                            return (enum yirage::type::DataType) (((((((enum yirage::type::DataType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(enum yirage::type::DataType) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::DataType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::DataType) >= 4 * PyLong_SHIFT)) {
                            return (enum yirage::type::DataType) (((((((((enum yirage::type::DataType)digits[3]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (enum yirage::type::DataType) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(enum yirage::type::DataType) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(enum yirage::type::DataType, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(enum yirage::type::DataType) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(enum yirage::type::DataType, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(enum yirage::type::DataType, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(enum yirage::type::DataType) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::DataType, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::DataType) - 1 > 2 * PyLong_SHIFT)) {
                            return (enum yirage::type::DataType) (((enum yirage::type::DataType)-1)*(((((enum yirage::type::DataType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(enum yirage::type::DataType) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::DataType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::DataType) - 1 > 2 * PyLong_SHIFT)) {
                            return (enum yirage::type::DataType) ((((((enum yirage::type::DataType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(enum yirage::type::DataType) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::DataType, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::DataType) - 1 > 3 * PyLong_SHIFT)) {
                            return (enum yirage::type::DataType) (((enum yirage::type::DataType)-1)*(((((((enum yirage::type::DataType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(enum yirage::type::DataType) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::DataType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::DataType) - 1 > 3 * PyLong_SHIFT)) {
                            return (enum yirage::type::DataType) ((((((((enum yirage::type::DataType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(enum yirage::type::DataType) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::DataType, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::DataType) - 1 > 4 * PyLong_SHIFT)) {
                            return (enum yirage::type::DataType) (((enum yirage::type::DataType)-1)*(((((((((enum yirage::type::DataType)digits[3]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(enum yirage::type::DataType) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::DataType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::DataType) - 1 > 4 * PyLong_SHIFT)) {
                            return (enum yirage::type::DataType) ((((((((((enum yirage::type::DataType)digits[3]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::DataType)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(enum yirage::type::DataType) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(enum yirage::type::DataType, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(enum yirage::type::DataType) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(enum yirage::type::DataType, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        enum yirage::type::DataType val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() or PyLong_AsNativeBytes() not available, cannot convert large enums");
        val = (enum yirage::type::DataType) -1;
#endif
        if (unlikely(ret))
            return (enum yirage::type::DataType) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum yirage::type::DataType");
    return (enum yirage::type::DataType) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum yirage::type::DataType");
    return (enum yirage::type::DataType) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_long(long value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(long));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* CIntFromPy */
static CYTHON_INLINE unsigned int __Pyx_PyLong_As_unsigned_int(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        unsigned int val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (unsigned int) -1;
        val = __Pyx_PyLong_As_unsigned_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) >= 2 * PyLong_SHIFT)) {
                            return (unsigned int) (((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) >= 3 * PyLong_SHIFT)) {
                            return (unsigned int) (((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) >= 4 * PyLong_SHIFT)) {
                            return (unsigned int) (((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (unsigned int) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(unsigned int) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(unsigned int, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(unsigned int) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                            return (unsigned int) (((unsigned int)-1)*(((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(unsigned int) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                            return (unsigned int) ((((((unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(unsigned int) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                            return (unsigned int) (((unsigned int)-1)*(((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(unsigned int) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                            return (unsigned int) ((((((((unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(unsigned int) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                            return (unsigned int) (((unsigned int)-1)*(((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(unsigned int) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(unsigned int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(unsigned int) - 1 > 4 * PyLong_SHIFT)) {
                            return (unsigned int) ((((((((((unsigned int)digits[3]) << PyLong_SHIFT) | (unsigned int)digits[2]) << PyLong_SHIFT) | (unsigned int)digits[1]) << PyLong_SHIFT) | (unsigned int)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(unsigned int) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned int, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(unsigned int) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(unsigned int, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        unsigned int val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (unsigned int) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (unsigned int) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (unsigned int) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (unsigned int) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(unsigned int) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((unsigned int) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(unsigned int) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((unsigned int) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((unsigned int) 1) << (sizeof(unsigned int) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (unsigned int) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to unsigned int");
    return (unsigned int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to unsigned int");
    return (unsigned int) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum yirage::type::TBEpilogueType __Pyx_PyLong_As_enum__yirage_3a__3a_type_3a__3a_TBEpilogueType(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum yirage::type::TBEpilogueType neg_one = (enum yirage::type::TBEpilogueType) -1, const_zero = (enum yirage::type::TBEpilogueType) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        enum yirage::type::TBEpilogueType val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (enum yirage::type::TBEpilogueType) -1;
        val = __Pyx_PyLong_As_enum__yirage_3a__3a_type_3a__3a_TBEpilogueType(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBEpilogueType, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(enum yirage::type::TBEpilogueType) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBEpilogueType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBEpilogueType) >= 2 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBEpilogueType) (((((enum yirage::type::TBEpilogueType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(enum yirage::type::TBEpilogueType) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBEpilogueType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBEpilogueType) >= 3 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBEpilogueType) (((((((enum yirage::type::TBEpilogueType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(enum yirage::type::TBEpilogueType) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBEpilogueType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBEpilogueType) >= 4 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBEpilogueType) (((((((((enum yirage::type::TBEpilogueType)digits[3]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (enum yirage::type::TBEpilogueType) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(enum yirage::type::TBEpilogueType) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(enum yirage::type::TBEpilogueType, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(enum yirage::type::TBEpilogueType) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(enum yirage::type::TBEpilogueType, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBEpilogueType, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(enum yirage::type::TBEpilogueType) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBEpilogueType, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBEpilogueType) - 1 > 2 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBEpilogueType) (((enum yirage::type::TBEpilogueType)-1)*(((((enum yirage::type::TBEpilogueType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(enum yirage::type::TBEpilogueType) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBEpilogueType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBEpilogueType) - 1 > 2 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBEpilogueType) ((((((enum yirage::type::TBEpilogueType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(enum yirage::type::TBEpilogueType) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBEpilogueType, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBEpilogueType) - 1 > 3 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBEpilogueType) (((enum yirage::type::TBEpilogueType)-1)*(((((((enum yirage::type::TBEpilogueType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(enum yirage::type::TBEpilogueType) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBEpilogueType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBEpilogueType) - 1 > 3 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBEpilogueType) ((((((((enum yirage::type::TBEpilogueType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(enum yirage::type::TBEpilogueType) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBEpilogueType, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBEpilogueType) - 1 > 4 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBEpilogueType) (((enum yirage::type::TBEpilogueType)-1)*(((((((((enum yirage::type::TBEpilogueType)digits[3]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(enum yirage::type::TBEpilogueType) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBEpilogueType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBEpilogueType) - 1 > 4 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBEpilogueType) ((((((((((enum yirage::type::TBEpilogueType)digits[3]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBEpilogueType)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(enum yirage::type::TBEpilogueType) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(enum yirage::type::TBEpilogueType, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(enum yirage::type::TBEpilogueType) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(enum yirage::type::TBEpilogueType, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        enum yirage::type::TBEpilogueType val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() or PyLong_AsNativeBytes() not available, cannot convert large enums");
        val = (enum yirage::type::TBEpilogueType) -1;
#endif
        if (unlikely(ret))
            return (enum yirage::type::TBEpilogueType) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum yirage::type::TBEpilogueType");
    return (enum yirage::type::TBEpilogueType) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum yirage::type::TBEpilogueType");
    return (enum yirage::type::TBEpilogueType) -1;
}

/* CIntFromPy */
static CYTHON_INLINE enum yirage::type::TBOperatorType __Pyx_PyLong_As_enum__yirage_3a__3a_type_3a__3a_TBOperatorType(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const enum yirage::type::TBOperatorType neg_one = (enum yirage::type::TBOperatorType) -1, const_zero = (enum yirage::type::TBOperatorType) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        enum yirage::type::TBOperatorType val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (enum yirage::type::TBOperatorType) -1;
        val = __Pyx_PyLong_As_enum__yirage_3a__3a_type_3a__3a_TBOperatorType(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBOperatorType, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(enum yirage::type::TBOperatorType) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBOperatorType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBOperatorType) >= 2 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBOperatorType) (((((enum yirage::type::TBOperatorType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(enum yirage::type::TBOperatorType) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBOperatorType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBOperatorType) >= 3 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBOperatorType) (((((((enum yirage::type::TBOperatorType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(enum yirage::type::TBOperatorType) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBOperatorType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBOperatorType) >= 4 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBOperatorType) (((((((((enum yirage::type::TBOperatorType)digits[3]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (enum yirage::type::TBOperatorType) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(enum yirage::type::TBOperatorType) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(enum yirage::type::TBOperatorType, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(enum yirage::type::TBOperatorType) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(enum yirage::type::TBOperatorType, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBOperatorType, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(enum yirage::type::TBOperatorType) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBOperatorType, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBOperatorType) - 1 > 2 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBOperatorType) (((enum yirage::type::TBOperatorType)-1)*(((((enum yirage::type::TBOperatorType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(enum yirage::type::TBOperatorType) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBOperatorType, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBOperatorType) - 1 > 2 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBOperatorType) ((((((enum yirage::type::TBOperatorType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(enum yirage::type::TBOperatorType) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBOperatorType, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBOperatorType) - 1 > 3 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBOperatorType) (((enum yirage::type::TBOperatorType)-1)*(((((((enum yirage::type::TBOperatorType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(enum yirage::type::TBOperatorType) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBOperatorType, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBOperatorType) - 1 > 3 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBOperatorType) ((((((((enum yirage::type::TBOperatorType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(enum yirage::type::TBOperatorType) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBOperatorType, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBOperatorType) - 1 > 4 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBOperatorType) (((enum yirage::type::TBOperatorType)-1)*(((((((((enum yirage::type::TBOperatorType)digits[3]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(enum yirage::type::TBOperatorType) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(enum yirage::type::TBOperatorType, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(enum yirage::type::TBOperatorType) - 1 > 4 * PyLong_SHIFT)) {
                            return (enum yirage::type::TBOperatorType) ((((((((((enum yirage::type::TBOperatorType)digits[3]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[2]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[1]) << PyLong_SHIFT) | (enum yirage::type::TBOperatorType)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(enum yirage::type::TBOperatorType) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(enum yirage::type::TBOperatorType, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(enum yirage::type::TBOperatorType) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(enum yirage::type::TBOperatorType, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        enum yirage::type::TBOperatorType val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyErr_SetString(PyExc_RuntimeError,
                        "_PyLong_AsByteArray() or PyLong_AsNativeBytes() not available, cannot convert large enums");
        val = (enum yirage::type::TBOperatorType) -1;
#endif
        if (unlikely(ret))
            return (enum yirage::type::TBOperatorType) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to enum yirage::type::TBOperatorType");
    return (enum yirage::type::TBOperatorType) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to enum yirage::type::TBOperatorType");
    return (enum yirage::type::TBOperatorType) -1;
}

/* CIntToPy */
static CYTHON_INLINE PyObject* __Pyx_PyLong_From_unsigned_int(unsigned int value) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const unsigned int neg_one = (unsigned int) -1, const_zero = (unsigned int) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(unsigned int) < sizeof(long)) {
            return PyLong_FromLong((long) value);
        } else if (sizeof(unsigned int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
#if defined(HAVE_LONG_LONG) && !CYTHON_COMPILING_IN_PYPY
        } else if (sizeof(unsigned int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
#endif
        }
    } else {
        if (sizeof(unsigned int) <= sizeof(long)) {
            return PyLong_FromLong((long) value);
#ifdef HAVE_LONG_LONG
        } else if (sizeof(unsigned int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
#endif
        }
    }
    {
        unsigned char *bytes = (unsigned char *)&value;
#if !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d00A4
        if (is_unsigned) {
            return PyLong_FromUnsignedNativeBytes(bytes, sizeof(value), -1);
        } else {
            return PyLong_FromNativeBytes(bytes, sizeof(value), -1);
        }
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX < 0x030d0000
        int one = 1; int little = (int)*(unsigned char *)&one;
        return _PyLong_FromByteArray(bytes, sizeof(unsigned int),
                                     little, !is_unsigned);
#else
        int one = 1; int little = (int)*(unsigned char *)&one;
        PyObject *from_bytes, *result = NULL, *kwds = NULL;
        PyObject *py_bytes = NULL, *order_str = NULL;
        from_bytes = PyObject_GetAttrString((PyObject*)&PyLong_Type, "from_bytes");
        if (!from_bytes) return NULL;
        py_bytes = PyBytes_FromStringAndSize((char*)bytes, sizeof(unsigned int));
        if (!py_bytes) goto limited_bad;
        order_str = PyUnicode_FromString(little ? "little" : "big");
        if (!order_str) goto limited_bad;
        {
            PyObject *args[3+(CYTHON_VECTORCALL ? 1 : 0)] = { NULL, py_bytes, order_str };
            if (!is_unsigned) {
                kwds = __Pyx_MakeVectorcallBuilderKwds(1);
                if (!kwds) goto limited_bad;
                if (__Pyx_VectorcallBuilder_AddArgStr("signed", __Pyx_NewRef(Py_True), kwds, args+3, 0) < 0) goto limited_bad;
            }
            result = __Pyx_Object_Vectorcall_CallFromBuilder(from_bytes, args+1, 2 | __Pyx_PY_VECTORCALL_ARGUMENTS_OFFSET, kwds);
        }
        limited_bad:
        Py_XDECREF(kwds);
        Py_XDECREF(order_str);
        Py_XDECREF(py_bytes);
        Py_XDECREF(from_bytes);
        return result;
#endif
    }
}

/* FormatTypeName */
#if CYTHON_COMPILING_IN_LIMITED_API && __PYX_LIMITED_VERSION_HEX < 0x030d0000
static __Pyx_TypeName
__Pyx_PyType_GetFullyQualifiedName(PyTypeObject* tp)
{
    PyObject *module = NULL, *name = NULL, *result = NULL;
    #if __PYX_LIMITED_VERSION_HEX < 0x030b0000
    name = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_mstate_global->__pyx_n_u_qualname);
    #else
    name = PyType_GetQualName(tp);
    #endif
    if (unlikely(name == NULL) || unlikely(!PyUnicode_Check(name))) goto bad;
    module = __Pyx_PyObject_GetAttrStr((PyObject *)tp,
                                               __pyx_mstate_global->__pyx_n_u_module);
    if (unlikely(module == NULL) || unlikely(!PyUnicode_Check(module))) goto bad;
    if (PyUnicode_CompareWithASCIIString(module, "builtins") == 0) {
        result = name;
        name = NULL;
        goto done;
    }
    result = PyUnicode_FromFormat("%U.%U", module, name);
    if (unlikely(result == NULL)) goto bad;
  done:
    Py_XDECREF(name);
    Py_XDECREF(module);
    return result;
  bad:
    PyErr_Clear();
    if (name) {
        result = name;
        name = NULL;
    } else {
        result = __Pyx_NewRef(__pyx_mstate_global->__pyx_kp_u__2);
    }
    goto done;
}
#endif

/* CIntFromPy */
static CYTHON_INLINE long __Pyx_PyLong_As_long(PyObject *x) {
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wconversion"
#endif
    const long neg_one = (long) -1, const_zero = (long) 0;
#ifdef __Pyx_HAS_GCC_DIAGNOSTIC
#pragma GCC diagnostic pop
#endif
    const int is_unsigned = neg_one > const_zero;
    if (unlikely(!PyLong_Check(x))) {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Long(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyLong_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
    if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
        if (unlikely(__Pyx_PyLong_IsNeg(x))) {
            goto raise_neg_overflow;
        } else if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_upylong, __Pyx_PyLong_CompactValueUnsigned(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_DigitCount(x)) {
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 2 * PyLong_SHIFT)) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 3 * PyLong_SHIFT)) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) >= 4 * PyLong_SHIFT)) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
        }
#endif
#if CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX < 0x030C00A7
        if (unlikely(Py_SIZE(x) < 0)) {
            goto raise_neg_overflow;
        }
#else
        {
            int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
            if (unlikely(result < 0))
                return (long) -1;
            if (unlikely(result == 1))
                goto raise_neg_overflow;
        }
#endif
        if ((sizeof(long) <= sizeof(unsigned long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(unsigned PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
#endif
        }
    } else {
#if CYTHON_USE_PYLONG_INTERNALS
        if (__Pyx_PyLong_IsCompact(x)) {
            __PYX_VERIFY_RETURN_INT(long, __Pyx_compact_pylong, __Pyx_PyLong_CompactValue(x))
        } else {
            const digit* digits = __Pyx_PyLong_Digits(x);
            assert(__Pyx_PyLong_DigitCount(x) > 1);
            switch (__Pyx_PyLong_SignedDigitCount(x)) {
                case -2:
                    if ((8 * sizeof(long) - 1 > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if ((8 * sizeof(long) > 1 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 2 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if ((8 * sizeof(long) - 1 > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if ((8 * sizeof(long) > 2 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 3 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if ((8 * sizeof(long) - 1 > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if ((8 * sizeof(long) > 3 * PyLong_SHIFT)) {
                        if ((8 * sizeof(unsigned long) > 4 * PyLong_SHIFT)) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if ((8 * sizeof(long) - 1 > 4 * PyLong_SHIFT)) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
        }
#endif
        if ((sizeof(long) <= sizeof(long))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
#ifdef HAVE_LONG_LONG
        } else if ((sizeof(long) <= sizeof(PY_LONG_LONG))) {
            __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
#endif
        }
    }
    {
        long val;
        int ret = -1;
#if PY_VERSION_HEX >= 0x030d00A6 && !CYTHON_COMPILING_IN_LIMITED_API
        Py_ssize_t bytes_copied = PyLong_AsNativeBytes(
            x, &val, sizeof(val), Py_ASNATIVEBYTES_NATIVE_ENDIAN | (is_unsigned ? Py_ASNATIVEBYTES_UNSIGNED_BUFFER | Py_ASNATIVEBYTES_REJECT_NEGATIVE : 0));
        if (unlikely(bytes_copied == -1)) {
        } else if (unlikely(bytes_copied > (Py_ssize_t) sizeof(val))) {
            goto raise_overflow;
        } else {
            ret = 0;
        }
#elif PY_VERSION_HEX < 0x030d0000 && !(CYTHON_COMPILING_IN_PYPY || CYTHON_COMPILING_IN_LIMITED_API) || defined(_PyLong_AsByteArray)
        int one = 1; int is_little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&val;
        ret = _PyLong_AsByteArray((PyLongObject *)x,
                                    bytes, sizeof(val),
                                    is_little, !is_unsigned);
#else
        PyObject *v;
        PyObject *stepval = NULL, *mask = NULL, *shift = NULL;
        int bits, remaining_bits, is_negative = 0;
        int chunk_size = (sizeof(long) < 8) ? 30 : 62;
        if (likely(PyLong_CheckExact(x))) {
            v = __Pyx_NewRef(x);
        } else {
            v = PyNumber_Long(x);
            if (unlikely(!v)) return (long) -1;
            assert(PyLong_CheckExact(v));
        }
        {
            int result = PyObject_RichCompareBool(v, Py_False, Py_LT);
            if (unlikely(result < 0)) {
                Py_DECREF(v);
                return (long) -1;
            }
            is_negative = result == 1;
        }
        if (is_unsigned && unlikely(is_negative)) {
            Py_DECREF(v);
            goto raise_neg_overflow;
        } else if (is_negative) {
            stepval = PyNumber_Invert(v);
            Py_DECREF(v);
            if (unlikely(!stepval))
                return (long) -1;
        } else {
            stepval = v;
        }
        v = NULL;
        val = (long) 0;
        mask = PyLong_FromLong((1L << chunk_size) - 1); if (unlikely(!mask)) goto done;
        shift = PyLong_FromLong(chunk_size); if (unlikely(!shift)) goto done;
        for (bits = 0; bits < (int) sizeof(long) * 8 - chunk_size; bits += chunk_size) {
            PyObject *tmp, *digit;
            long idigit;
            digit = PyNumber_And(stepval, mask);
            if (unlikely(!digit)) goto done;
            idigit = PyLong_AsLong(digit);
            Py_DECREF(digit);
            if (unlikely(idigit < 0)) goto done;
            val |= ((long) idigit) << bits;
            tmp = PyNumber_Rshift(stepval, shift);
            if (unlikely(!tmp)) goto done;
            Py_DECREF(stepval); stepval = tmp;
        }
        Py_DECREF(shift); shift = NULL;
        Py_DECREF(mask); mask = NULL;
        {
            long idigit = PyLong_AsLong(stepval);
            if (unlikely(idigit < 0)) goto done;
            remaining_bits = ((int) sizeof(long) * 8) - bits - (is_unsigned ? 0 : 1);
            if (unlikely(idigit >= (1L << remaining_bits)))
                goto raise_overflow;
            val |= ((long) idigit) << bits;
        }
        if (!is_unsigned) {
            if (unlikely(val & (((long) 1) << (sizeof(long) * 8 - 1))))
                goto raise_overflow;
            if (is_negative)
                val = ~val;
        }
        ret = 0;
    done:
        Py_XDECREF(shift);
        Py_XDECREF(mask);
        Py_XDECREF(stepval);
#endif
        if (unlikely(ret))
            return (long) -1;
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* FastTypeChecks */
#if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx_InBases(PyTypeObject *a, PyTypeObject *b) {
    while (a) {
        a = __Pyx_PyType_GetSlot(a, tp_base, PyTypeObject*);
        if (a == b)
            return 1;
    }
    return b == &PyBaseObject_Type;
}
static CYTHON_INLINE int __Pyx_IsSubtype(PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (a == b) return 1;
    mro = a->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(a, b);
}
static CYTHON_INLINE int __Pyx_IsAnySubtype2(PyTypeObject *cls, PyTypeObject *a, PyTypeObject *b) {
    PyObject *mro;
    if (cls == a || cls == b) return 1;
    mro = cls->tp_mro;
    if (likely(mro)) {
        Py_ssize_t i, n;
        n = PyTuple_GET_SIZE(mro);
        for (i = 0; i < n; i++) {
            PyObject *base = PyTuple_GET_ITEM(mro, i);
            if (base == (PyObject *)a || base == (PyObject *)b)
                return 1;
        }
        return 0;
    }
    return __Pyx_InBases(cls, a) || __Pyx_InBases(cls, b);
}
static CYTHON_INLINE int __Pyx_inner_PyErr_GivenExceptionMatches2(PyObject *err, PyObject* exc_type1, PyObject *exc_type2) {
    if (exc_type1) {
        return __Pyx_IsAnySubtype2((PyTypeObject*)err, (PyTypeObject*)exc_type1, (PyTypeObject*)exc_type2);
    } else {
        return __Pyx_IsSubtype((PyTypeObject*)err, (PyTypeObject*)exc_type2);
    }
}
static int __Pyx_PyErr_GivenExceptionMatchesTuple(PyObject *exc_type, PyObject *tuple) {
    Py_ssize_t i, n;
    assert(PyExceptionClass_Check(exc_type));
    n = PyTuple_GET_SIZE(tuple);
    for (i=0; i<n; i++) {
        if (exc_type == PyTuple_GET_ITEM(tuple, i)) return 1;
    }
    for (i=0; i<n; i++) {
        PyObject *t = PyTuple_GET_ITEM(tuple, i);
        if (likely(PyExceptionClass_Check(t))) {
            if (__Pyx_inner_PyErr_GivenExceptionMatches2(exc_type, NULL, t)) return 1;
        } else {
        }
    }
    return 0;
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches(PyObject *err, PyObject* exc_type) {
    if (likely(err == exc_type)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        if (likely(PyExceptionClass_Check(exc_type))) {
            return __Pyx_inner_PyErr_GivenExceptionMatches2(err, NULL, exc_type);
        } else if (likely(PyTuple_Check(exc_type))) {
            return __Pyx_PyErr_GivenExceptionMatchesTuple(err, exc_type);
        } else {
        }
    }
    return PyErr_GivenExceptionMatches(err, exc_type);
}
static CYTHON_INLINE int __Pyx_PyErr_GivenExceptionMatches2(PyObject *err, PyObject *exc_type1, PyObject *exc_type2) {
    assert(PyExceptionClass_Check(exc_type1));
    assert(PyExceptionClass_Check(exc_type2));
    if (likely(err == exc_type1 || err == exc_type2)) return 1;
    if (likely(PyExceptionClass_Check(err))) {
        return __Pyx_inner_PyErr_GivenExceptionMatches2(err, exc_type1, exc_type2);
    }
    return (PyErr_GivenExceptionMatches(err, exc_type1) || PyErr_GivenExceptionMatches(err, exc_type2));
}
#endif

/* GetRuntimeVersion */
static unsigned long __Pyx_get_runtime_version(void) {
#if __PYX_LIMITED_VERSION_HEX >= 0x030b0000
    return Py_Version & ~0xFFUL;
#else
    static unsigned long __Pyx_cached_runtime_version = 0;
    if (__Pyx_cached_runtime_version == 0) {
        const char* rt_version = Py_GetVersion();
        unsigned long version = 0;
        unsigned long factor = 0x01000000UL;
        unsigned int digit = 0;
        int i = 0;
        while (factor) {
            while ('0' <= rt_version[i] && rt_version[i] <= '9') {
                digit = digit * 10 + (unsigned int) (rt_version[i] - '0');
                ++i;
            }
            version += factor * digit;
            if (rt_version[i] != '.')
                break;
            digit = 0;
            factor >>= 8;
            ++i;
        }
        __Pyx_cached_runtime_version = version;
    }
    return __Pyx_cached_runtime_version;
#endif
}

/* CheckBinaryVersion */
static int __Pyx_check_binary_version(unsigned long ct_version, unsigned long rt_version, int allow_newer) {
    const unsigned long MAJOR_MINOR = 0xFFFF0000UL;
    if ((rt_version & MAJOR_MINOR) == (ct_version & MAJOR_MINOR))
        return 0;
    if (likely(allow_newer && (rt_version & MAJOR_MINOR) > (ct_version & MAJOR_MINOR)))
        return 1;
    {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compile time Python version %d.%d "
                      "of module '%.100s' "
                      "%s "
                      "runtime version %d.%d",
                       (int) (ct_version >> 24), (int) ((ct_version >> 16) & 0xFF),
                       __Pyx_MODULE_NAME,
                       (allow_newer) ? "was newer than" : "does not match",
                       (int) (rt_version >> 24), (int) ((rt_version >> 16) & 0xFF)
       );
        return PyErr_WarnEx(NULL, message, 1);
    }
}

/* NewCodeObj */
#if CYTHON_COMPILING_IN_LIMITED_API
    static PyObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,
                                       PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                       PyObject *fv, PyObject *cell, PyObject* fn,
                                       PyObject *name, int fline, PyObject *lnos) {
        PyObject *exception_table = NULL;
        PyObject *types_module=NULL, *code_type=NULL, *result=NULL;
        #if __PYX_LIMITED_VERSION_HEX < 0x030b0000
        PyObject *version_info;
        PyObject *py_minor_version = NULL;
        #endif
        long minor_version = 0;
        PyObject *type, *value, *traceback;
        PyErr_Fetch(&type, &value, &traceback);
        #if __PYX_LIMITED_VERSION_HEX >= 0x030b0000
        minor_version = 11;
        #else
        if (!(version_info = PySys_GetObject("version_info"))) goto end;
        if (!(py_minor_version = PySequence_GetItem(version_info, 1))) goto end;
        minor_version = PyLong_AsLong(py_minor_version);
        Py_DECREF(py_minor_version);
        if (minor_version == -1 && PyErr_Occurred()) goto end;
        #endif
        if (!(types_module = PyImport_ImportModule("types"))) goto end;
        if (!(code_type = PyObject_GetAttrString(types_module, "CodeType"))) goto end;
        if (minor_version <= 7) {
            (void)p;
            result = PyObject_CallFunction(code_type, "iiiiiOOOOOOiOOO", a, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else if (minor_version <= 10) {
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOiOOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, fline, lnos, fv, cell);
        } else {
            if (!(exception_table = PyBytes_FromStringAndSize(NULL, 0))) goto end;
            result = PyObject_CallFunction(code_type, "iiiiiiOOOOOOOiOOOO", a,p, k, l, s, f, code,
                          c, n, v, fn, name, name, fline, lnos, exception_table, fv, cell);
        }
    end:
        Py_XDECREF(code_type);
        Py_XDECREF(exception_table);
        Py_XDECREF(types_module);
        if (type) {
            PyErr_Restore(type, value, traceback);
        }
        return result;
    }
#elif PY_VERSION_HEX >= 0x030B0000
  static PyCodeObject* __Pyx__PyCode_New(int a, int p, int k, int l, int s, int f,
                                         PyObject *code, PyObject *c, PyObject* n, PyObject *v,
                                         PyObject *fv, PyObject *cell, PyObject* fn,
                                         PyObject *name, int fline, PyObject *lnos) {
    PyCodeObject *result;
    result =
      #if PY_VERSION_HEX >= 0x030C0000
        PyUnstable_Code_NewWithPosOnlyArgs
      #else
        PyCode_NewWithPosOnlyArgs
      #endif
        (a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, name, fline, lnos, __pyx_mstate_global->__pyx_empty_bytes);
    return result;
  }
#elif PY_VERSION_HEX >= 0x030800B2 && !CYTHON_COMPILING_IN_PYPY
  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_NewWithPosOnlyArgs(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#else
  #define __Pyx__PyCode_New(a, p, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
#endif
static PyObject* __Pyx_PyCode_New(
        const __Pyx_PyCode_New_function_description descr,
        PyObject * const *varnames,
        PyObject *filename,
        PyObject *funcname,
        const char *line_table,
        PyObject *tuple_dedup_map
) {
    PyObject *code_obj = NULL, *varnames_tuple_dedup = NULL, *code_bytes = NULL, *line_table_bytes = NULL;
    Py_ssize_t var_count = (Py_ssize_t) descr.nlocals;
    PyObject *varnames_tuple = PyTuple_New(var_count);
    if (unlikely(!varnames_tuple)) return NULL;
    for (Py_ssize_t i=0; i < var_count; i++) {
        Py_INCREF(varnames[i]);
        if (__Pyx_PyTuple_SET_ITEM(varnames_tuple, i, varnames[i]) != (0)) goto done;
    }
    #if CYTHON_COMPILING_IN_LIMITED_API
    varnames_tuple_dedup = PyDict_GetItem(tuple_dedup_map, varnames_tuple);
    if (!varnames_tuple_dedup) {
        if (unlikely(PyDict_SetItem(tuple_dedup_map, varnames_tuple, varnames_tuple) < 0)) goto done;
        varnames_tuple_dedup = varnames_tuple;
    }
    #else
    varnames_tuple_dedup = PyDict_SetDefault(tuple_dedup_map, varnames_tuple, varnames_tuple);
    if (unlikely(!varnames_tuple_dedup)) goto done;
    #endif
    #if CYTHON_AVOID_BORROWED_REFS
    Py_INCREF(varnames_tuple_dedup);
    #endif
    if (__PYX_LIMITED_VERSION_HEX >= (0x030b0000) && line_table != NULL
        && !CYTHON_COMPILING_IN_GRAAL) {
        line_table_bytes = PyBytes_FromStringAndSize(line_table, descr.line_table_length);
        if (unlikely(!line_table_bytes)) goto done;
        Py_ssize_t code_len = (descr.line_table_length * 2 + 4) & ~3;
        code_bytes = PyBytes_FromStringAndSize(NULL, code_len);
        if (unlikely(!code_bytes)) goto done;
        char* c_code_bytes = PyBytes_AsString(code_bytes);
        if (unlikely(!c_code_bytes)) goto done;
        memset(c_code_bytes, 0, (size_t) code_len);
    }
    code_obj = (PyObject*) __Pyx__PyCode_New(
        (int) descr.argcount,
        (int) descr.num_posonly_args,
        (int) descr.num_kwonly_args,
        (int) descr.nlocals,
        0,
        (int) descr.flags,
        code_bytes ? code_bytes : __pyx_mstate_global->__pyx_empty_bytes,
        __pyx_mstate_global->__pyx_empty_tuple,
        __pyx_mstate_global->__pyx_empty_tuple,
        varnames_tuple_dedup,
        __pyx_mstate_global->__pyx_empty_tuple,
        __pyx_mstate_global->__pyx_empty_tuple,
        filename,
        funcname,
        (int) descr.first_line,
        (__PYX_LIMITED_VERSION_HEX >= (0x030b0000) && line_table_bytes) ? line_table_bytes : __pyx_mstate_global->__pyx_empty_bytes
    );
done:
    Py_XDECREF(code_bytes);
    Py_XDECREF(line_table_bytes);
    #if CYTHON_AVOID_BORROWED_REFS
    Py_XDECREF(varnames_tuple_dedup);
    #endif
    Py_DECREF(varnames_tuple);
    return code_obj;
}

/* InitStrings */
static int __Pyx_InitStrings(__Pyx_StringTabEntry const *t, PyObject **target, const char* const* encoding_names) {
    while (t->s) {
        PyObject *str;
        if (t->is_unicode) {
            if (t->intern) {
                str = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                str = PyUnicode_Decode(t->s, t->n - 1, encoding_names[t->encoding], NULL);
            } else {
                str = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            str = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        if (!str)
            return -1;
        *target = str;
        if (PyObject_Hash(str) == -1)
            return -1;
        ++t;
        ++target;
    }
    return 0;
}

#include <string.h>
static CYTHON_INLINE Py_ssize_t __Pyx_ssize_strlen(const char *s) {
    size_t len = strlen(s);
    if (unlikely(len > (size_t) PY_SSIZE_T_MAX)) {
        PyErr_SetString(PyExc_OverflowError, "byte string is too long");
        return -1;
    }
    return (Py_ssize_t) len;
}
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return __Pyx_PyUnicode_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE PyObject* __Pyx_PyByteArray_FromString(const char* c_str) {
    Py_ssize_t len = __Pyx_ssize_strlen(c_str);
    if (unlikely(len < 0)) return NULL;
    return PyByteArray_FromStringAndSize(c_str, len);
}
static CYTHON_INLINE const char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
static CYTHON_INLINE const char* __Pyx_PyUnicode_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
    if (unlikely(__Pyx_PyUnicode_READY(o) == -1)) return NULL;
#if CYTHON_COMPILING_IN_LIMITED_API
    {
        const char* result;
        Py_ssize_t unicode_length;
        CYTHON_MAYBE_UNUSED_VAR(unicode_length); // only for __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        #if __PYX_LIMITED_VERSION_HEX < 0x030A0000
        if (unlikely(PyArg_Parse(o, "s#", &result, length) < 0)) return NULL;
        #else
        result = PyUnicode_AsUTF8AndSize(o, length);
        #endif
        #if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        unicode_length = PyUnicode_GetLength(o);
        if (unlikely(unicode_length < 0)) return NULL;
        if (unlikely(unicode_length != *length)) {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
        #endif
        return result;
    }
#else
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
    if (likely(PyUnicode_IS_ASCII(o))) {
        *length = PyUnicode_GET_LENGTH(o);
        return PyUnicode_AsUTF8(o);
    } else {
        PyUnicode_AsASCIIString(o);
        return NULL;
    }
#else
    return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
}
#endif
static CYTHON_INLINE const char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_UTF8
    if (PyUnicode_Check(o)) {
        return __Pyx_PyUnicode_AsStringAndSize(o, length);
    } else
#endif
    if (PyByteArray_Check(o)) {
#if (CYTHON_ASSUME_SAFE_SIZE && CYTHON_ASSUME_SAFE_MACROS) || (CYTHON_COMPILING_IN_PYPY && (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE)))
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
#else
        *length = PyByteArray_Size(o);
        if (*length == -1) return NULL;
        return PyByteArray_AsString(o);
#endif
    } else
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrueAndDecref(PyObject* x) {
    int retval;
    if (unlikely(!x)) return -1;
    retval = __Pyx_PyObject_IsTrue(x);
    Py_DECREF(x);
    return retval;
}
static PyObject* __Pyx_PyNumber_LongWrongResultType(PyObject* result) {
    __Pyx_TypeName result_type_name = __Pyx_PyType_GetFullyQualifiedName(Py_TYPE(result));
    if (PyLong_Check(result)) {
        if (PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
                "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ").  "
                "The ability to return an instance of a strict subclass of int is deprecated, "
                "and may be removed in a future version of Python.",
                result_type_name)) {
            __Pyx_DECREF_TypeName(result_type_name);
            Py_DECREF(result);
            return NULL;
        }
        __Pyx_DECREF_TypeName(result_type_name);
        return result;
    }
    PyErr_Format(PyExc_TypeError,
                 "__int__ returned non-int (type " __Pyx_FMT_TYPENAME ")",
                 result_type_name);
    __Pyx_DECREF_TypeName(result_type_name);
    Py_DECREF(result);
    return NULL;
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Long(PyObject* x) {
#if CYTHON_USE_TYPE_SLOTS
  PyNumberMethods *m;
#endif
  PyObject *res = NULL;
  if (likely(PyLong_Check(x)))
      return __Pyx_NewRef(x);
#if CYTHON_USE_TYPE_SLOTS
  m = Py_TYPE(x)->tp_as_number;
  if (likely(m && m->nb_int)) {
      res = m->nb_int(x);
  }
#else
  if (!PyBytes_CheckExact(x) && !PyUnicode_CheckExact(x)) {
      res = PyNumber_Long(x);
  }
#endif
  if (likely(res)) {
      if (unlikely(!PyLong_CheckExact(res))) {
          return __Pyx_PyNumber_LongWrongResultType(res);
      }
  }
  else if (!PyErr_Occurred()) {
      PyErr_SetString(PyExc_TypeError,
                      "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    if (likely(__Pyx_PyLong_IsCompact(b))) {
        return __Pyx_PyLong_CompactValue(b);
    } else {
      const digit* digits = __Pyx_PyLong_Digits(b);
      const Py_ssize_t size = __Pyx_PyLong_SignedDigitCount(b);
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyLong_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE Py_hash_t __Pyx_PyIndex_AsHash_t(PyObject* o) {
  if (sizeof(Py_hash_t) == sizeof(Py_ssize_t)) {
    return (Py_hash_t) __Pyx_PyIndex_AsSsize_t(o);
  } else {
    Py_ssize_t ival;
    PyObject *x;
    x = PyNumber_Index(o);
    if (!x) return -1;
    ival = PyLong_AsLong(x);
    Py_DECREF(x);
    return ival;
  }
}
static CYTHON_INLINE PyObject *__Pyx_Owned_Py_None(int b) {
    CYTHON_UNUSED_VAR(b);
    return __Pyx_NewRef(Py_None);
}
static CYTHON_INLINE PyObject * __Pyx_PyBool_FromLong(long b) {
  return b ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False);
}
static CYTHON_INLINE PyObject * __Pyx_PyLong_FromSize_t(size_t ival) {
    return PyLong_FromSize_t(ival);
}


/* MultiPhaseInitModuleState */
#if CYTHON_PEP489_MULTI_PHASE_INIT && CYTHON_USE_MODULE_STATE
#ifndef CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
#if (CYTHON_COMPILING_IN_LIMITED_API || PY_VERSION_HEX >= 0x030C0000)
  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 1
#else
  #define CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE 0
#endif
#endif
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE && !CYTHON_ATOMICS
#error "Module state with PEP489 requires atomics. Currently that's one of\
 C11, C++11, gcc atomic intrinsics or MSVC atomic intrinsics"
#endif
#if !CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
#define __Pyx_ModuleStateLookup_Lock()
#define __Pyx_ModuleStateLookup_Unlock()
#elif !CYTHON_COMPILING_IN_LIMITED_API && PY_VERSION_HEX >= 0x030d0000
static PyMutex __Pyx_ModuleStateLookup_mutex = {0};
#define __Pyx_ModuleStateLookup_Lock() PyMutex_Lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() PyMutex_Unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(__cplusplus) && __cplusplus >= 201103L
#include <mutex>
static std::mutex __Pyx_ModuleStateLookup_mutex;
#define __Pyx_ModuleStateLookup_Lock() __Pyx_ModuleStateLookup_mutex.lock()
#define __Pyx_ModuleStateLookup_Unlock() __Pyx_ModuleStateLookup_mutex.unlock()
#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ > 201112L) && !defined(__STDC_NO_THREADS__)
#include <threads.h>
static mtx_t __Pyx_ModuleStateLookup_mutex;
static once_flag __Pyx_ModuleStateLookup_mutex_once_flag = ONCE_FLAG_INIT;
static void __Pyx_ModuleStateLookup_initialize_mutex(void) {
    mtx_init(&__Pyx_ModuleStateLookup_mutex, mtx_plain);
}
#define __Pyx_ModuleStateLookup_Lock()\
  call_once(&__Pyx_ModuleStateLookup_mutex_once_flag, __Pyx_ModuleStateLookup_initialize_mutex);\
  mtx_lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() mtx_unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(HAVE_PTHREAD_H)
#include <pthread.h>
static pthread_mutex_t __Pyx_ModuleStateLookup_mutex = PTHREAD_MUTEX_INITIALIZER;
#define __Pyx_ModuleStateLookup_Lock() pthread_mutex_lock(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() pthread_mutex_unlock(&__Pyx_ModuleStateLookup_mutex)
#elif defined(_WIN32)
#include <Windows.h>  // synchapi.h on its own doesn't work
static SRWLOCK __Pyx_ModuleStateLookup_mutex = SRWLOCK_INIT;
#define __Pyx_ModuleStateLookup_Lock() AcquireSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)
#define __Pyx_ModuleStateLookup_Unlock() ReleaseSRWLockExclusive(&__Pyx_ModuleStateLookup_mutex)
#else
#error "No suitable lock available for CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE.\
 Requires C standard >= C11, or C++ standard >= C++11,\
 or pthreads, or the Windows 32 API, or Python >= 3.13."
#endif
typedef struct {
    int64_t id;
    PyObject *module;
} __Pyx_InterpreterIdAndModule;
typedef struct {
    char interpreter_id_as_index;
    Py_ssize_t count;
    Py_ssize_t allocated;
    __Pyx_InterpreterIdAndModule table[1];
} __Pyx_ModuleStateLookupData;
#define __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE 32
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static __pyx_atomic_int_type __Pyx_ModuleStateLookup_read_counter = 0;
#endif
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static __pyx_atomic_ptr_type __Pyx_ModuleStateLookup_data = 0;
#else
static __Pyx_ModuleStateLookupData* __Pyx_ModuleStateLookup_data = NULL;
#endif
static __Pyx_InterpreterIdAndModule* __Pyx_State_FindModuleStateLookupTableLowerBound(
        __Pyx_InterpreterIdAndModule* table,
        Py_ssize_t count,
        int64_t interpreterId) {
    __Pyx_InterpreterIdAndModule* begin = table;
    __Pyx_InterpreterIdAndModule* end = begin + count;
    if (begin->id == interpreterId) {
        return begin;
    }
    while ((end - begin) > __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {
        __Pyx_InterpreterIdAndModule* halfway = begin + (end - begin)/2;
        if (halfway->id == interpreterId) {
            return halfway;
        }
        if (halfway->id < interpreterId) {
            begin = halfway;
        } else {
            end = halfway;
        }
    }
    for (; begin < end; ++begin) {
        if (begin->id >= interpreterId) return begin;
    }
    return begin;
}
static PyObject *__Pyx_State_FindModule(CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return NULL;
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData* data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);
    {
        __pyx_atomic_incr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
        if (likely(data)) {
            __Pyx_ModuleStateLookupData* new_data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_acquire(&__Pyx_ModuleStateLookup_data);
            if (likely(data == new_data)) {
                goto read_finished;
            }
        }
        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
        __Pyx_ModuleStateLookup_Lock();
        __pyx_atomic_incr_relaxed(&__Pyx_ModuleStateLookup_read_counter);
        data = (__Pyx_ModuleStateLookupData*)__pyx_atomic_pointer_load_relaxed(&__Pyx_ModuleStateLookup_data);
        __Pyx_ModuleStateLookup_Unlock();
    }
  read_finished:;
#else
    __Pyx_ModuleStateLookupData* data = __Pyx_ModuleStateLookup_data;
#endif
    __Pyx_InterpreterIdAndModule* found = NULL;
    if (unlikely(!data)) goto end;
    if (data->interpreter_id_as_index) {
        if (interpreter_id < data->count) {
            found = data->table+interpreter_id;
        }
    } else {
        found = __Pyx_State_FindModuleStateLookupTableLowerBound(
            data->table, data->count, interpreter_id);
    }
  end:
    {
        PyObject *result=NULL;
        if (found && found->id == interpreter_id) {
            result = found->module;
        }
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
        __pyx_atomic_decr_acq_rel(&__Pyx_ModuleStateLookup_read_counter);
#endif
        return result;
    }
}
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
static void __Pyx_ModuleStateLookup_wait_until_no_readers(void) {
    while (__pyx_atomic_load(&__Pyx_ModuleStateLookup_read_counter) != 0);
}
#else
#define __Pyx_ModuleStateLookup_wait_until_no_readers()
#endif
static int __Pyx_State_AddModuleInterpIdAsIndex(__Pyx_ModuleStateLookupData **old_data, PyObject* module, int64_t interpreter_id) {
    Py_ssize_t to_allocate = (*old_data)->allocated;
    while (to_allocate <= interpreter_id) {
        if (to_allocate == 0) to_allocate = 1;
        else to_allocate *= 2;
    }
    __Pyx_ModuleStateLookupData *new_data = *old_data;
    if (to_allocate != (*old_data)->allocated) {
         new_data = (__Pyx_ModuleStateLookupData *)realloc(
            *old_data,
            sizeof(__Pyx_ModuleStateLookupData)+(to_allocate-1)*sizeof(__Pyx_InterpreterIdAndModule));
        if (!new_data) {
            PyErr_NoMemory();
            return -1;
        }
        for (Py_ssize_t i = new_data->allocated; i < to_allocate; ++i) {
            new_data->table[i].id = i;
            new_data->table[i].module = NULL;
        }
        new_data->allocated = to_allocate;
    }
    new_data->table[interpreter_id].module = module;
    if (new_data->count < interpreter_id+1) {
        new_data->count = interpreter_id+1;
    }
    *old_data = new_data;
    return 0;
}
static void __Pyx_State_ConvertFromInterpIdAsIndex(__Pyx_ModuleStateLookupData *data) {
    __Pyx_InterpreterIdAndModule *read = data->table;
    __Pyx_InterpreterIdAndModule *write = data->table;
    __Pyx_InterpreterIdAndModule *end = read + data->count;
    for (; read<end; ++read) {
        if (read->module) {
            write->id = read->id;
            write->module = read->module;
            ++write;
        }
    }
    data->count = write - data->table;
    for (; write<end; ++write) {
        write->id = 0;
        write->module = NULL;
    }
    data->interpreter_id_as_index = 0;
}
static int __Pyx_State_AddModule(PyObject* module, CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return -1;
    int result = 0;
    __Pyx_ModuleStateLookup_Lock();
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData *old_data = (__Pyx_ModuleStateLookupData *)
            __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, 0);
#else
    __Pyx_ModuleStateLookupData *old_data = __Pyx_ModuleStateLookup_data;
#endif
    __Pyx_ModuleStateLookupData *new_data = old_data;
    if (!new_data) {
        new_data = (__Pyx_ModuleStateLookupData *)calloc(1, sizeof(__Pyx_ModuleStateLookupData));
        if (!new_data) {
            result = -1;
            PyErr_NoMemory();
            goto end;
        }
        new_data->allocated = 1;
        new_data->interpreter_id_as_index = 1;
    }
    __Pyx_ModuleStateLookup_wait_until_no_readers();
    if (new_data->interpreter_id_as_index) {
        if (interpreter_id < __PYX_MODULE_STATE_LOOKUP_SMALL_SIZE) {
            result = __Pyx_State_AddModuleInterpIdAsIndex(&new_data, module, interpreter_id);
            goto end;
        }
        __Pyx_State_ConvertFromInterpIdAsIndex(new_data);
    }
    {
        Py_ssize_t insert_at = 0;
        {
            __Pyx_InterpreterIdAndModule* lower_bound = __Pyx_State_FindModuleStateLookupTableLowerBound(
                new_data->table, new_data->count, interpreter_id);
            assert(lower_bound);
            insert_at = lower_bound - new_data->table;
            if (unlikely(insert_at < new_data->count && lower_bound->id == interpreter_id)) {
                lower_bound->module = module;
                goto end;  // already in table, nothing more to do
            }
        }
        if (new_data->count+1 >= new_data->allocated) {
            Py_ssize_t to_allocate = (new_data->count+1)*2;
            new_data =
                (__Pyx_ModuleStateLookupData*)realloc(
                    new_data,
                    sizeof(__Pyx_ModuleStateLookupData) +
                    (to_allocate-1)*sizeof(__Pyx_InterpreterIdAndModule));
            if (!new_data) {
                result = -1;
                new_data = old_data;
                PyErr_NoMemory();
                goto end;
            }
            new_data->allocated = to_allocate;
        }
        ++new_data->count;
        int64_t last_id = interpreter_id;
        PyObject *last_module = module;
        for (Py_ssize_t i=insert_at; i<new_data->count; ++i) {
            int64_t current_id = new_data->table[i].id;
            new_data->table[i].id = last_id;
            last_id = current_id;
            PyObject *current_module = new_data->table[i].module;
            new_data->table[i].module = last_module;
            last_module = current_module;
        }
    }
  end:
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, new_data);
#else
    __Pyx_ModuleStateLookup_data = new_data;
#endif
    __Pyx_ModuleStateLookup_Unlock();
    return result;
}
static int __Pyx_State_RemoveModule(CYTHON_UNUSED void* dummy) {
    int64_t interpreter_id = PyInterpreterState_GetID(__Pyx_PyInterpreterState_Get());
    if (interpreter_id == -1) return -1;
    __Pyx_ModuleStateLookup_Lock();
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __Pyx_ModuleStateLookupData *data = (__Pyx_ModuleStateLookupData *)
            __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, 0);
#else
    __Pyx_ModuleStateLookupData *data = __Pyx_ModuleStateLookup_data;
#endif
    if (data->interpreter_id_as_index) {
        if (interpreter_id < data->count) {
            data->table[interpreter_id].module = NULL;
        }
        goto done;
    }
    {
        __Pyx_ModuleStateLookup_wait_until_no_readers();
        __Pyx_InterpreterIdAndModule* lower_bound = __Pyx_State_FindModuleStateLookupTableLowerBound(
            data->table, data->count, interpreter_id);
        if (!lower_bound) goto done;
        if (lower_bound->id != interpreter_id) goto done;
        __Pyx_InterpreterIdAndModule *end = data->table+data->count;
        for (;lower_bound<end-1; ++lower_bound) {
            lower_bound->id = (lower_bound+1)->id;
            lower_bound->module = (lower_bound+1)->module;
        }
    }
    --data->count;
    if (data->count == 0) {
        free(data);
        data = NULL;
    }
  done:
#if CYTHON_MODULE_STATE_LOOKUP_THREAD_SAFE
    __pyx_atomic_pointer_exchange(&__Pyx_ModuleStateLookup_data, data);
#else
    __Pyx_ModuleStateLookup_data = data;
#endif
    __Pyx_ModuleStateLookup_Unlock();
    return 0;
}
#endif

/* #### Code section: utility_code_pragmas_end ### */
#ifdef _MSC_VER
#pragma warning( pop )
#endif



/* #### Code section: end ### */
#endif /* Py_PYTHON_H */
